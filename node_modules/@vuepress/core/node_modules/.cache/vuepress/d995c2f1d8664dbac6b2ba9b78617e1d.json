{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/docs/.vuepress/theme/layouts/CreateMagicItemLayout.vue?vue&type=template&id=3f36d4f8&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/.vuepress/theme/layouts/CreateMagicItemLayout.vue","mtime":1634294763189},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}