{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/docs/.vuepress/theme/components/AbilityCalculator.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/.vuepress/theme/components/AbilityCalculator.vue","mtime":1640161622024},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/css-loader/dist/cjs.js","mtime":1640785878889},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1640785880897},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/postcss-loader/src/index.js","mtime":1640785880185},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/sass-loader/dist/cjs.js","mtime":1640785880489},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":1640785878621},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":1640785880897}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnYtaW5wdXQudGV4dC1jZW50ZXIgewogIGlucHV0IHsKICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICB9Cn0KLmFiaWxpdHktZmllbGQgewogIHdpZHRoOiAxODBweDsKICAudi1pbnB1dF9fcHJlcGVuZC1vdXRlciwgLnYtaW5wdXRfX2FwcGVuZC1vdXRlciB7CiAgICBtYXJnaW4tdG9wOiAwICFpbXBvcnRhbnQ7CiAgICBtYXJnaW4tYm90dG9tOiAwICFpbXBvcnRhbnQ7CiAgfQp9Cg=="},{"version":3,"sources":["AbilityCalculator.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"AbilityCalculator.vue","sourceRoot":"docs/.vuepress/theme/components","sourcesContent":["<template>\n  <div class=\"ability-scores-calculator\">\n    <v-row>\n      <v-col :cols=\"12\">\n        <v-row>\n          <v-col>\n            <v-btn color=\"primary\" @click.stop=\"reset\"><v-icon>mdi-eraser</v-icon> Réinitialiser</v-btn>\n          </v-col>\n        </v-row>\n\n        <v-row>\n          <v-col>\n            <v-select dense :items=\"races\" label=\"Race\" item-text=\"label\" v-model=\"selectedRace\" return-object outlined @change=\"selectRace(true, true)\"></v-select>\n          </v-col>\n          <v-col v-if=\"selectedRace && selectedRace.variants\">\n            <v-select dense :items=\"selectedRace.variants\" label=\"Variantes\" item-text=\"label\" v-model=\"selectedSubrace\" return-object outlined @change=\"selectRace(true)\"></v-select>\n          </v-col>\n          <v-col v-if=\"race && race.freeAbilityBonuses\">\n            <v-select dense :items=\"abilityScoresChoices\" multiple label=\"Bonus aux caractéristiques\" v-model=\"abilityBonuses\" outlined @change=\"selectAbilityBonus\"></v-select>\n          </v-col>\n        </v-row>\n\n        <v-row>\n          <v-col>\n            <v-select dense :items=\"generationMethodChoices\" label=\"Méthode d'attribution\" v-model=\"generationMethod\" outlined @change=\"selectGenerationMethod\"></v-select>\n          </v-col>\n          <v-col>\n            <v-select dense :items=\"powerTiers\" return-object label=\"Niveau de puissance\" v-model=\"powerTier\" outlined :hint=\"hintPowerTier\" persistent-hint @change=\"selectPowerTier\"></v-select>\n          </v-col>\n        </v-row>\n\n        <v-row>\n          <v-col>\n            <v-simple-table>\n              <template v-slot:default>\n                <thead>\n                  <tr>\n                    <th class=\"text-center\">Caractéristique</th>\n                    <th class=\"text-center\">Base</th>\n                    <th class=\"text-center\"></th>\n                    <th class=\"text-center\">Bonus racial</th>\n                    <th class=\"text-center\"></th>\n                    <th class=\"text-center\"><strong>Total</strong></th>\n                    <th class=\"text-center\"><strong>Mod.</strong></th>\n                    <th v-if=\"generationMethod == 'pointBuy'\" class=\"text-center\">Coût</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr v-for=\"ability in abilityScores\" :key=\"ability.key\">\n                    <td class=\"text-center\"><span class=\"subtitle-2\">{{ ability.label }}</span></td>\n                    <td class=\"text-center ability-field\">\n                      <div v-if=\"generationMethod == 'pointBuy'\" class=\"d-flex align-center\">\n                        <v-text-field class=\"text-center\" readonly outlined hide-details dense :value=\"ability.value\">\n                          <template v-slot:prepend>\n                            <v-btn icon dense color=\"accent\" :disabled=\"ability.value <= powerTier.min\" @click.stop=\"ability.value--\"><v-icon>mdi-minus-circle</v-icon></v-btn>\n                          </template>\n                          <template v-slot:append-outer>\n                            <v-btn icon dense color=\"accent\" :disabled=\"ability.value >= powerTier.max\" @click.stop=\"ability.value++\"><v-icon>mdi-plus-circle</v-icon></v-btn>\n                          </template>\n                        </v-text-field>\n                      </div>\n                      <template v-else-if=\"generationMethod == 'standardArray'\">\n                        <v-select v-if=\"!ability.value\" dense :items=\"standardArrayValues\" v-model=\"ability.value\" outlined hide-details clearable @change=\"selectAbilityValue(ability)\"></v-select>\n                        <v-text-field v-else class=\"text-center\" outlined hide-details dense readonly clearable v-model=\"ability.value\"></v-text-field>\n                      </template>\n                    </td>\n                    <td class=\"text-center\">+</td>\n                    <td class=\"text-center\">{{ ability.racialBonus }}</td>\n                    <td class=\"text-center\">=</td>\n                    <td class=\"text-center\"><strong>{{ getTotal(ability) }}</strong></td>\n                    <td class=\"text-center\"><strong>{{ displayBonus(getModifier(getTotal(ability))) }}</strong></td>\n                    <td v-if=\"generationMethod == 'pointBuy'\" class=\"text-center\">{{ getAbilityScoreCost(ability) }}</td>\n                  </tr>\n                  <tr v-if=\"generationMethod == 'pointBuy' && powerTier\"><td class=\"text-right\" colspan=\"8\">Points restants : {{ pointsRemaining }}/{{ powerTier.pointBuy }}</td></tr>\n                </tbody>\n              </template>\n            </v-simple-table>\n          </v-col>\n        </v-row>\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport { getModifier, displayBonus, displayAbilityScore } from '@theme/util/monsterHelpers'\nimport { ABILITYSCORECOSTS, ABILITYSCORES, POWERTIERS } from '../../data/abilityScores'\nimport { races } from '../../data/races'\n\nconst GENERATION_METHOD_CHOICES = [\n  { text: 'Méthode fixe', value: 'standardArray' },\n  { text: 'Méthode par répartition', value: 'pointBuy' }\n]\n\nexport default {\n  data () {\n    return {\n      generationMethodChoices: GENERATION_METHOD_CHOICES,\n      generationMethod: GENERATION_METHOD_CHOICES[1].value,\n      abilityScoreCosts: ABILITYSCORECOSTS,\n      powerTiers: POWERTIERS,\n      abilityScoresChoices: null,\n      races: races,\n      selectedSubrace: null,\n      selectedRace: null,\n      race: null,\n      powerTier: POWERTIERS[1],\n      abilityScores: [\n        { key: 'for', label: 'Force', value: 8, racialBonus: 0},\n        { key: 'dex', label: 'Dextérité', value: 8, racialBonus: 0},\n        { key: 'con', label: 'Constitution', value: 8, racialBonus: 0},\n        { key: 'int', label: 'Intelligence', value: 8, racialBonus: 0},\n        { key: 'sag', label: 'Sagesse', value: 8, racialBonus: 0},\n        { key: 'cha', label: 'Charisme', value: 8, racialBonus: 0}\n      ],\n      abilityBonuses: []\n    }\n  },\n\n  computed: {\n    hintPowerTier () {\n      if (this.generationMethod && this.powerTier) {\n        if (this.generationMethod == 'standardArray') {\n          return 'Valeurs fixes : ' + this.powerTier.standardArray\n        } else if (this.generationMethod == 'pointBuy') {\n          return 'Points disponibles : ' + this.powerTier.pointBuy\n        }\n      }\n      return ''\n    },\n\n    pointsRemaining () {\n      if (!this.powerTier) {\n        return 0\n      }\n      let pointSpent = 0\n      for (let ability of this.abilityScores) {\n        if (ABILITYSCORECOSTS[ability.value]) {\n          pointSpent += ABILITYSCORECOSTS[ability.value].cost\n        }\n      }\n      return this.powerTier.pointBuy - pointSpent\n    },\n\n    standardArrayValues () {\n      let values = Array.from(this.powerTier.standardArray)\n      for (let ability of this.abilityScores) {\n        if (ability.value) {\n          values.splice(values.indexOf(ability.value), 1)\n        }\n      }\n      return values\n    }\n  },\n\n  methods: {\n    getTotal (ability) {\n      let total = 0\n      if (!ability.value) {\n        return '--'\n      }\n      return parseInt(ability.value) + parseInt(ability.racialBonus)\n    },\n\n    getAbilityScoreCost (ability) {\n      if (ABILITYSCORECOSTS[ability.value]) {\n        return ABILITYSCORECOSTS[ability.value].cost\n      }\n      return null\n    },\n\n    getModifier (value) {\n      if (value == '--') {\n        return '--'\n      }\n      return getModifier(value)\n    },\n\n    displayBonus (score) {\n      return displayBonus(score)\n    },\n\n    selectRace (clearAbilities = false, clearSubrace = false) {\n      if (clearSubrace) {\n        this.selectedSubrace = null\n      }\n\n      if (this.selectedSubrace) {\n        this.race = this.selectedSubrace\n      } else {\n        this.race = this.selectedRace\n      }\n\n      for (let ability of this.abilityScores) {\n        ability.racialBonus = 0\n        if (this.race.abilityBonuses) {\n          for (var bonus of this.race.abilityBonuses) {\n            if (bonus.ability == ability.key) {\n              ability.racialBonus = bonus.value\n            }\n          }\n        }\n      }\n\n      if (clearAbilities) {\n        this.abilityBonuses = []\n      }\n\n      let choices = Array.from(ABILITYSCORES)\n      if (this.race && this.race.abilityBonuses) {\n        for (let abilityBonus of this.race.abilityBonuses) {\n          choices.splice(choices.findIndex(item => item.value == abilityBonus.key), 1)\n        }\n      }\n      this.abilityScoresChoices = choices\n    },\n\n    selectAbilityBonus (e) {\n      if(e.length > this.race.freeAbilityBonuses.qty) {\n        e.pop()\n      } else {\n        this.selectRace()\n        for (let bonus of this.abilityBonuses) {\n          this.abilityScores[this.abilityScores.findIndex(item => item.key == bonus)].racialBonus = this.race.freeAbilityBonuses.value\n        }\n      }\n    },\n\n    selectGenerationMethod () {\n      // Réinitialisation des valeurs au changement de la méthode d'attribution\n      if (this.generationMethod) {\n        if (this.generationMethod == 'pointBuy') {\n          for (let ability of this.abilityScores) {\n            ability.value = 8\n          }\n        } else if (this.generationMethod == 'standardArray') {\n          for (let ability of this.abilityScores) {\n            ability.value = null\n          }\n        }\n      }\n    },\n\n    selectPowerTier () {\n      if (this.generationMethod == 'standardArray') {\n        for (let ability of this.abilityScores) {\n          ability.value = null\n        }\n      }\n    },\n\n    selectAbilityValue (ability) {\n      // console.log(ability)\n    },\n\n    reset () {\n      this.selectedRace = null\n      this.selectedSubrace = null\n      this.race = null\n      this.generationMethod = GENERATION_METHOD_CHOICES[1].value\n      this.powerTier = POWERTIERS[1]\n      this.abilityScores = [\n        { key: 'for', label: 'Force', value: 8, racialBonus: 0},\n        { key: 'dex', label: 'Dextérité', value: 8, racialBonus: 0},\n        { key: 'con', label: 'Constitution', value: 8, racialBonus: 0},\n        { key: 'int', label: 'Intelligence', value: 8, racialBonus: 0},\n        { key: 'sag', label: 'Sagesse', value: 8, racialBonus: 0},\n        { key: 'cha', label: 'Charisme', value: 8, racialBonus: 0}\n      ]\n      this.abilityBonuses = []\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.v-input.text-center {\n  input {\n    text-align: center;\n  }\n}\n.ability-field {\n  width: 180px;\n  .v-input__prepend-outer, .v-input__append-outer {\n    margin-top: 0 !important;\n    margin-bottom: 0 !important;\n  }\n}\n</style>\n"]}]}