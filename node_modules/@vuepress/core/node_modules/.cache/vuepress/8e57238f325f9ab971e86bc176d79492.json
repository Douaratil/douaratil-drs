{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/archetypes/ambeanamos/README.md?vue&type=template&id=3c2c850a&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/archetypes/ambeanamos/README.md","mtime":1634294763193},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJhbWJlYW5hbW9zIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkFtYmVhbmFtb3MgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjYW1iZWFuYW1vcyIgfSB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJldm9sdXRpb24tZGUtbC1hbWJlYW5hbW9zIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIsOJdm9sdXRpb24gZGUgbCdBbWJlYW5hbW9zICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2V2b2x1dGlvbi1kZS1sLWFtYmVhbmFtb3MiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRhYmxlIiwgWwogICAgICAgIF9jKCJ0aGVhZCIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRoIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiTml2ZWF1IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBcHRpdHVkZXMiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygidGJvZHkiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMyIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjbGEtbWFycXVlLWRlcy1kaWV1eCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkxhIG1hcnF1ZSBkZXMgZGlldXgiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgaHJlZjogIiNtYW5pcHVsYXRpb24tZGUtbGEtbWFnaWUtb3UtbWV0YW1hZ2llIiB9IH0sCiAgICAgICAgICAgICAgICBbX3ZtLl92KCJNYW5pcHVsYXRpb24gZGUgbGEgbWFnaWUgb3UgbcOpdGFtYWdpZSAiKV0KICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjQiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI21hbGVkaWN0aW9uLWRlLWwtb21icmUiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJNYWzDqWRpY3Rpb24gZGUgbOKAmW9tYnJlIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCI1IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNhZmZpbml0ZS1hbmNlc3RyYWxlIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQWZmaW5pdMOpIGFuY2VzdHJhbGUiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjYiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2VuZXJnaWUtcG9zaXRpdmUiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCLDiW5lcmdpZSBwb3NpdGl2ZSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiOCIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjY29tcGFnbm9uLWFuaW1hbCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNvbXBhZ25vbiBhbmltYWwiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF92bS5fdigiLCAiKSwKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNtYWdpZS1kdS1zYW5nIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiTWFnaWUgZHUgc2FuZyIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMTQiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2NoYXJtZS1pbnRlbnNlIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ2hhcm1lIGludGVuc2UiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjE2IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNzZWNvbmQtY29tcGFnbm9uLWFuaW1hbCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIlNlY29uZCBjb21wYWdub24gYW5pbWFsIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIxOCIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjcHJlc2VuY2UtcHVpc3NhbnRlIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiUHLDqXNlbmNlIHB1aXNzYW50ZSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMjAiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3Zlcml0YWJsZS1hbWJlYW5hbW9zIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiVsOpcml0YWJsZSBBbWJlYW5hbW9zIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhcHRpdHVkZXMtZC1hcmNoZXR5cGUiIH0gfSwgWwogICAgICAgIF92bS5fdigiQXB0aXR1ZGVzIGQnQXJjaMOpdHlwZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhcHRpdHVkZXMtZC1hcmNoZXR5cGUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkVuIHRhbnQgcXUnQW1iZWFuYW1vcywgdm91cyBiw6luw6lmaWNpZXogZGVzIGFwdGl0dWRlcyBkJ0FyY2jDqXR5cGUgc3VpdmFudGVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1haXRyaXNlcyIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJNYcOudHJpc2VzICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI21haXRyaXNlcyIgfSB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBcm11cmVzIildKSwKICAgICAgICBfdm0uX3YoIiA6IGFybXVyZXMgbMOpZ8OocmVzIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkFybWVzIildKSwKICAgICAgICBfdm0uX3YoIiA6IGFybWVzIGNvdXJhbnRlcyIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJPdXRpbHMiKV0pLAogICAgICAgIF92bS5fdigiIDogYXVjdW4iKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSmV0cyBkZSBzYXV2ZWdhcmRlIildKSwKICAgICAgICBfdm0uX3YoIiA6IFNhZ2Vzc2UsIENoYXJpc21lIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNvbXDDqXRlbmNlcyIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiA6IGNob2lzaXNzZXogZGV1eCBjb21ww6l0ZW5jZXMgcGFybWkgbGVzIHN1aXZhbnRlcyA6IEFyY2FuZXMsIEhpc3RvaXJlLCBJbnRpbWlkYXRpb24sIEludmVzdGlnYXRpb24sIE5hdHVyZSwgUmVsaWdpb24gZXQgU3VwZXJjaGVyaWUiCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ29uZGl0aW9ucyBkJ2FjY2Vzc2liaWxpdMOpIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiOiDDinRyZSBNZWxkw6h0ZSBkZSBsYSBjYXN0ZSBkZXMgQW5hbW9zIGV0IGF2b2lyIMOpdMOpIHZlbmR1IMOgIHVuIGF1dHJlIEFtYmVhbmFtb3MuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIlBvaW50cyBkZSBNYWdpZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIsKgOiBM4oCZQW1iZWFuYW1vcyBmYWl0IHBhcnRpZSBkZXMgbWFnZXMsIGRlIGNlIGZhaXQsIGlsIGTDqXZlbG9wcGUgbGVzIHBvaW50cyBkZSBNYWdpZSAoUE0pLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJMaW1pdGF0aW9ucyBk4oCZaGlzdG9yaXF1ZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIsKgOiBM4oCZQW1iZWFuYW1vcyBmYWl0IGV4Y2x1c2l2ZW1lbnQgcGFydGllIGRlIGxhIGNhc3RlIGRlcyBBbmFtb3MsIGxlcyBpbnRvdWNoYWJsZXMuIERlIGNlIGZhaXQsIHBvdXIgc2EgY3LDqWF0aW9uLCBsZSBwZXJzb25uYWdlIG5lIHBldXQgY2hvaXNpciBzZXMgaGlzdG9yaXF1ZXMgcXVlIHBhcm1pIGxlcyBzdWl2YW50c8KgOiBCcmlnYW5kLCBDcmFwdWxlLCBNZW5kaWFudCwgTWlzw6lyZXV4LCBPcnBoZWxpbiwgUmVib3V0ZXV4IG91IFNvbGl0YWlyZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJM4oCZQW1iZWFuYW1vcyBlc3QgdW5lIGNhc3RlIGRlIG1hZ2UgdHLDqHMgaW1wb3J0YW50ZSBjaGV6IGxlcyBNZWxkw6h0ZXMuIElscyBzb250IGlzc3VzIGRlIGxhIGNhc3RlIGRlcyBBbmFtb3MsIGxlcyBpbnRvdWNoYWJsZXMuIExlcyBoYW5kaWNhcMOpcyBkZSBuYWlzc2FuY2Ugc29udCBjb25zaWTDqXLDqXMgY29tbWUgbWF1ZGl0cyBwYXIgbGVzIGRpZXV4IGV0IHNvbnQgZ8OpbsOpcmFsZW1lbnQgb2ZmZXJ0cyBhdXggc29yY2llcnMgcG91ciBzZXJ2aXIgZXQgZGFucyBkZSByYXJlcyBjYXMsIHBvdXIgw6p0cmUgaW5pdGnDqSDDoCBsYSBzb3JjZWxsZXJpZS4gQ+KAmWVzdCBsZSBjYXMgY2hleiBsZXMgQW1iZWFuYW1vcy4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5DaGV6IGxlcyBNZWxkw6h0ZXMsIGxhIGNhc3RlIGRlcyBBbmFtb3MgcmVncm91cGUgbGVzIMKrwqBpbnRvdWNoYWJsZXPCoMK7LCBsZXMgaG9ycyBjYXN0ZXMgOiBlc2NsYXZlcywgcHJpc29ubmllcnMgc2FucyB2YWxldXIsIGNyaW1pbmVscyBkw6ljaHVzIGRlIGxldXIgY2FzdGUsIG1hbGhldXJldXggbWFsLWZvcm3DqXMgZGUgbmFpc3NhbmNlLiBMZXVyIGNyYW5lIGVzdCByYXPDqSBldCB1biBmZXIgcm91Z2UgZXN0IGFwcGxpcXXDqSBzdXIgbGV1cnMgam91ZXMgcG91ciB0cmFjZXIgdHJvaXMgYmFycmVzLCBsYSBtYXJxdWUgZCdpbmZhbWllLiBVbiBBbmFtIG5lIHBvdXJyYSBqYW1haXMgc29ydGlyIGRlIHNhIGNhc3RlLCDDoCBtb2lucyBxdWUgbGUgY29uc2VpbCBkZXMgYW5jaWVucyBkcm9kYW5vcyBuZSBkw6ljaWRlIGRlIGxlIHLDqWNvbXBlbnNlciBwb3VyIHVuIGFjdGUgZXhjZXB0aW9ubmVsIGVuIGwnaW50w6lncmFudCBkYW5zIHNlcyByYW5ncy4gQ2V0IMOpdsOpbmVtZW50IG5lIHMnZXN0IHByb2R1aXQgcXVlIHRyb2lzIGZvaXMsIGV0IHRvdWpvdXJzIGF2ZWMgZGVzIGluZGl2aWR1cyBhdSBkZXN0aW4gZXhjZXB0aW9ubmVsLiBBdSBzZWluIGRlIGNldHRlIGNhc3RlIG3DqXByaXPDqWUsIGlsIGV4aXN0ZSBwb3VydGFudCB1bmUgc29ydGUgZCfDqWxpdGUgOiBsZXMgQW1iZWFuYW1vcy4gQ2Ugc29udCBsZXMgbWFsaGV1cmV1eCBuw6lzIGRpZmZvcm1lcyBxdWkgb250IHJlamV0w6lzIHBhciBsZXVycyBwYXJlbnRzLCBkb250IHVuIEFtYmVhbmFtIGEgcmVww6lyw6kgbGVzIHBvdXZvaXJzLiBMYSBtdWV0dGUsIGxlIGJvc3N1LCBsZSBib2l0ZXV4Li4uIGxldXIgZGVzdGluIGVzdCBkJ2F2b2lyIHVuZSB2aWUgbWlzw6lyYWJsZSBldCBtw6ptZSBkZSBtb3VyaXIgamV1bmUgY2FyIG9uIHBlbnNlIHF1J2lscyBvbnQgdW4gwqvCoEZvcmFnwqDCuyBkYW5zIGxldXJzIGFuY8OqdHJlcy4gUG91cnRhbnQsIHNpIGxlIGhhc2FyZCBsZXVyIGNvbmbDqHJlIGxlIGRvbiBkZSBtYWdpZSwgbGV1ciB2aWUgcGV1dCBkZXZlbmlyIGJlYXVjb3VwIHBsdXMgZmFjaWxlLiBJbml0acOpcyBhdXggYXJ0cyBkZSBsYSBzb3JjZWxsZXJpZSwgaWxzIGFwcHJlbm5lbnQgw6AgbWF1ZGlyZSwgw6AgbGlyZSBsJ2F2ZW5pciBlbiBjb25zdWx0YW50IGxlcyBtb3J0cywgw6AgZ3XDqXJpciBsZSBiw6l0YWlsIG91IMOgIGZhdm9yaXNlciBsZXMgcsOpY29sdGVzLiBMZXVycyB0YWxlbnRzIHNlIHZlbmRlbnQgZm9ydCBjaGVyLCBtYWlzIGNvbW1lIGlscyBuZSBkZW1hbmRlbnQgcXVlIGRlIGwnYXJnZW50IGV0IHBhcyBkJ29iw6lpc3NhbmNlIGVuIMOpY2hhbmdlIChjb250cmFpcmVtZW50IGF1eCBkcm9kYW5vcyAhKSBub21icmV1eCBzb250IGNldXggcXVpIGxlcyBkZW1hbmRlbnQuIEF1IHNlaW4gZGUgbGEgY2FzdGUgZGVzIGFuYW1vcywgbGVzIGFtYmVhbmFtb3Mgc29udCBmYWNpbGVzIMOgIHJlY29ubmHDrnRyZSBjYXIgdW5lIMOpdG9pbGUgw6AgbmV1ZiBicmFuY2hlcyBsZXVyIGVzdCB0YXRvdcOpZSBzdXIgbGUgZnJvbnQgbG9ycyBkZSBsZXVyIGluaXRpYXRpb24uIExlcyBBbWJlYW5hbW9zIHF1aSB2aWVubmVudCBkZSBsYSBWb2llIGRlcyBBcm1lcyBzb250IGFwcGVsw6lzIE1lZGVsd3lyLCBj4oCZZXN0IMOgIGRpcmUgbGl0dMOpcmFsZW1lbnQgwqvCoExlIEZhdWNoZXVywqDCuy4gIExlcyBBbWJlYW5hbW9zIHF1aSB2aWVubmVudCBkZSBsYSBWb2llIGRlIGzigJlPbWJyZSBzb250IGFwcGVsw6lzIEN5c2dvZG9sLCBj4oCZZXN0IMOgIGRpcmUgbGl0dMOpcmFsZW1lbnQgwqvCoEzigJlPbWJyZcKgwrsuICBMZXMgQW1iZWFuYW1vcyBxdWkgdmllbm5lbnQgZGUgbGEgVm9pZSBsYSBNYWdpZSBzb250IGFwcGVsw6lzIEFt4oCZZsOgaWRoLCBj4oCZZXN0IMOgIGRpcmUgbGl0dMOpcmFsZW1lbnQgwqvCoExlIFByb3Bow6h0ZcKgwrsuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibGEtbWFycXVlLWRlcy1kaWV1eCIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJMYSBtYXJxdWUgZGVzIGRpZXV4ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2xhLW1hcnF1ZS1kZXMtZGlldXgiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBNZWxkw6h0ZSA6IE1hY2huaWF0aGFuIildKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG5M4oCZQW1iZWFuYW1vcywgZW4gcGx1cyBk4oCZw6p0cmUgbWFycXXDqSBhdSBmZXIgcm91Z2UgZXQgZOKAmcOqdHJlIHRhdG91w6ksIGVzdCBhZmZlY3TDqSBwYXIgZGVzIGhhbmRpY2Fwcy4gKElsIHNlcmFpdCBwZXJ0aW5lbnQgZGUgZMOpZmluaXIgY2VzIGhhbmRpY2FwcyBkw6lzIGxlIG5pdmVhdSAxIGR1IHBlcnNvbm5hZ2UpLiIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxuTGFuY2VyIDFENiAobm9uIGV4cGxvc2lmKSBwb3VyIGNvbm5hw650cmUgbGUgbm9tYnJlIGRlIGxhbmNlcnMuIExlcyBww6luYWxpdMOpcyBuZSBzZSBjdW11bGVudCBwYXMgbG9yc3F14oCZZWxsZXMgc29udCBzaW1pbGFpcmVzLiIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigiXG5DZXMgaGFuZGljYXBzIGRvbm5lbnQgdW4gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3V0aWxpc2VyLWxlcy1jYXJhY3RlcmlzdGlxdWVzLyNhdmFudGFnZS1ldC1kZXNhdmFudGFnZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJhdmFudGFnZSIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGF1IHRlc3RzIGTigJlpbnRpbWlkYXRpb24gY2FyIHNlcyBpbnRlcmxvY3V0ZXVycyBwZW5zZW50IHF14oCZaWwgZXN0IG1hdWRpdCBvdSBiw6luaXQgZGVzIGRpZXV4LiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0YWJsZSIsIFsKICAgICAgICBfYygidGhlYWQiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0aCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkxhbmNlciAyZDYiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlLDqXN1bHRhdCIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMi0zIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidGQiLAogICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJEb2lndHMgY3JvY2h1cyAoIiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICAgICAiL3V0aWxpc2VyLWxlcy1jYXJhY3RlcmlzdGlxdWVzLyNhdmFudGFnZS1ldC1kZXNhdmFudGFnZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJkw6lzYXZhbnRhZ2UiKV0pXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF92bS5fdigiIHRlc3RzIGRlIG1hbmlwdWxhdGlvbiBk4oCZb2JqZXRzKSIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjQiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJ0ZCIsCiAgICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIk9laWwgYmxhbmMgKCIpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgICAgICAgIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jYXZhbnRhZ2UtZXQtZGVzYXZhbnRhZ2UiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigiZMOpc2F2YW50YWdlIildKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBhdXggdGVzdHMgZGUgcGVyY2VwdGlvbiB2aXN1ZWxsZSkiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI1IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidGQiLAogICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJPZWlsIHJvdWdlICgiKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgICAgICIvdXRpbGlzZXItbGVzLWNhcmFjdGVyaXN0aXF1ZXMvI2F2YW50YWdlLWV0LWRlc2F2YW50YWdlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoImTDqXNhdmFudGFnZSIpXSldCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgYXV4IHRlc3RzIGRlIHBlcmNlcHRpb24gdmlzdWVsbGUpIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiNiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInRkIiwKICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQm9zc3UgKCIpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgICAgICAgIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jYXZhbnRhZ2UtZXQtZGVzYXZhbnRhZ2UiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigiZMOpc2F2YW50YWdlIildKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBhdXggdGVzdHMgZOKAmUF0aGzDqXRpc21lIGV0IGTigJlhY3JvYmF0aWUpIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiNy04IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidGQiLAogICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJUYWNoZSBkZSB2aW4gICgiKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgICAgICIvdXRpbGlzZXItbGVzLWNhcmFjdGVyaXN0aXF1ZXMvI2F2YW50YWdlLWV0LWRlc2F2YW50YWdlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoImTDqXNhdmFudGFnZSIpXSldCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgYXV4IHRlc3RzIGRlIHBlcnN1YXNpb24pIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiOSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInRkIiwKICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigiRMOpcGlnbWVudGF0aW9uIHBlYXUgKCIpLAogICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICB0bzoKICAgICAgICAgICAgICAgICAgICAgICAgIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jYXZhbnRhZ2UtZXQtZGVzYXZhbnRhZ2UiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigiZMOpc2F2YW50YWdlIildKV0KICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICBfdm0uX3YoIiBhdXggdGVzdHMgZGUgcGVyc3Vhc2lvbikiKQogICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgMQogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIxMCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInRkIiwKICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LAogICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgIF92bS5fdigiRMOpcGlnbWVudGF0aW9uIGRlcyBjaGV2ZXV4ICgiKSwKICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgdG86CiAgICAgICAgICAgICAgICAgICAgICAgICIvdXRpbGlzZXItbGVzLWNhcmFjdGVyaXN0aXF1ZXMvI2F2YW50YWdlLWV0LWRlc2F2YW50YWdlIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoImTDqXNhdmFudGFnZSIpXSldCiAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgX3ZtLl92KCIgYXV4IHRlc3RzIGRlIHBlcnN1YXNpb24pIikKICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgIDEKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMTEiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkNsYXVkaWNhdGlvbiAobW91dmVtZW50IHLDqWR1aXQgZGUgMW0pIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjEyIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAidGQiLAogICAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJIw6ltaXBsw6lnaWUgZmFjaWFsZSAoIiksCiAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIHRvOgogICAgICAgICAgICAgICAgICAgICAgICAiL3V0aWxpc2VyLWxlcy1jYXJhY3RlcmlzdGlxdWVzLyNhdmFudGFnZS1ldC1kZXNhdmFudGFnZSIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJkw6lzYXZhbnRhZ2UiKV0pXQogICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgIF92bS5fdigiIGF1eCB0ZXN0cyBkZSBwZXJzdWFzaW9uKSIpCiAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAxCiAgICAgICAgICAgICkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibWFuaXB1bGF0aW9uLWRlLWxhLW1hZ2llLW91LW1ldGFtYWdpZSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJNYW5pcHVsYXRpb24gZGUgbGEgbWFnaWUgb3UgbcOpdGFtYWdpZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNtYW5pcHVsYXRpb24tZGUtbGEtbWFnaWUtb3UtbWV0YW1hZ2llIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBNZWxkw6h0ZSA6IEzDoGltZHJhb2lkIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5BdSBuaXZlYXUgMywgdm91cyBnYWduZXogbGEgY2FwYWNpdMOpIGRlIG1vZGlmaWVyIHZvcyBzb3J0cyBwb3VyIGxlcyBhZGFwdGVyIMOgIHZvcyBiZXNvaW5zIGVuIGTDqXBlbnNhbnQgbGUgZG91YmxlIGRlIHBvaW50cyBkZSBtYWdpZSAoUE0pLiBWb3VzIGdhZ25leiB1bmUgZGUgbcOpdGFtYWdpZSBkZSB2b3RyZSBjaG9peCBwYXJtaSBsZXMgc3VpdmFudGVzLiBWb3VzIGVuIGdhZ25lcmV6IHVuZSBub3V2ZWxsZSBhdSBuaXZlYXUgNywgdW5lIGF1IG5pdmVhdSAxMCBldCB1bmUgZGVybmnDqHJlIGF1IG5pdmVhdSAxNy4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5Wb3VzIG5lIHBvdXZleiBhcHBsaXF1ZXIgcXUndW5lIHNldWxlIG9wdGlvbiBkZSBtw6l0YW1hZ2llIMOgIHVuIHNvcnQgcXVhbmQgdm91cyBsZSBsYW5jZXosIHNhdWYgbWVudGlvbiBjb250cmFpcmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJJbnZvY2F0aW9uIHBydWRlbnRlIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiICDCoFxuUXVhbmQgdm91cyBsYW5jZXogdW4gc29ydCBxdWkgZm9yY2UgZCdhdXRyZXMgY3LDqWF0dXJlcyDDoCBmYWlyZSB1biBqZXQgZGUgc2F1dmVnYXJkZSwgdm91cyBwb3V2ZXogY2hvaXNpciBkJ2F0dMOpbnVlciBsJ2VmZmV0IGR1IHNvcnQgcG91ciBjZXJ0YWluZXMgZGUgY2VzIGNyw6lhdHVyZXMuIFPDqWxlY3Rpb25uZXogdW4gbm9tYnJlIGRlIGNyw6lhdHVyZXMgZG9udCBsZSBtYXhpbXVtIGVzdCDDqWdhbCDDoCB2b3RyZSBtb2RpZmljYXRldXIgZOKAmUludGVsbGlnZW5jZSAoYXZlYyB1biBtaW5pbXVtIGQndW5lIGNyw6lhdHVyZSkuIExlcyBjcsOpYXR1cmVzIGTDqXNpZ27DqWVzIHLDqXVzc2lzc2VudCBhdXRvbWF0aXF1ZW1lbnQgbGV1csKgamV0IGRlIHNhdXZlZ2FyZGXCoGNvbnRyZSBjZSBzb3J0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiU29ydCBkaXN0YW50IildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5RdWFuZCB2b3VzIGxhbmNleiB1biBzb3J0IHF1aSBhIHVuZSBwb3J0w6llIGRlIDEsNTAgbcOodHJlIG91IHBsdXMsIHZvdXMgcG91dmV6IGRvdWJsZXIgbGEgcG9ydMOpZSBkZSBjZSBzb3J0LlxuUXVhbmQgdm91cyBsYW5jZXogdW4gc29ydCBkZSBjb250YWN0LCB2b3VzIHBvdXZleiBkw6lwZW5zZXIgZW4gbW9kaWZpZXIgbGEgcG9ydMOpZSDDoCA5IG3DqHRyZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJTb3J0IHB1aXNzYW50IildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5RdWFuZCB2b3VzIGxhbmNleiB1biBzb3J0IHF1aSBjYXVzZSBkZXMgZMOpZ8OidHMsIHZvdXMgcG91dmV6IGFubnVsZXIgbGVzIHLDqXN1bHRhdHMgZCd1biBub21icmUgZGUgZMOpcyBpbmbDqXJpZXVyIG91IMOpZ2FsIMOgIHZvdHJlIG1vZGlmaWNhdGV1ciBk4oCZSW50ZWxsaWdlbmNlIChhdmVjIHVuIG1pbmltdW0gZGUgdW4pIGV0IGxlcyByZWxhbmNlci4gVm91cyBkZXZleiB1dGlsaXNlciBsZXMgcsOpc3VsdGF0cyBkdSBub3V2ZWF1IGxhbmNlci5cblZvdXMgcG91dmV6IHV0aWxpc2VyIHNvcnQgcHVpc3NhbnQgbcOqbWUgc2kgdm91cyBhdmV6IGTDqWrDoCB1dGlsaXPDqSB1bmUgYXV0cmUgb3B0aW9uIGRlIG3DqXRhbWFnaWUgcG91ciBtb2RpZmllciBjZSBzb3J0IG1haXMgbGUgY2/Du3QgdG90YWwgZHUgc29ydCBlc3QgbGUgdHJpcGxlIGRlIHBvaW50IGRlIG1hZ2llIChQTSkuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJTb3J0IMOpdGVuZHUiKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcblF1YW5kIHZvdXMgbGFuY2V6IHVuIHNvcnQgcXVpIGR1cmUgMSBtaW51dGUgb3UgcGx1cywgdm91cyBwb3V2ZXogZG91YmxlciBzYSBkdXLDqWUganVzcXUnw6AgdW4gbWF4aW11bSBkZSAyNCBoZXVyZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJTb3J0IGludGVuc2UiKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcblF1YW5kIHZvdXMgbGFuY2V6IHVuIHNvcnQgcXVpIGZvcmNlIHVuZSBjcsOpYXR1cmUgw6AgZmFpcmUgdW7CoGpldCBkZSBzYXV2ZWdhcmRlwqBwb3VyIHLDqXNpc3RlciDDoCBzZXMgZWZmZXRzLCB2b3VzIHBvdXZleiBpbmZsaWdlciB1bsKgZMOpc2F2YW50YWdlwqDDoCBsYSBjaWJsZSBsb3JzIGRlIHNvbiBwcmVtaWVywqBqZXQgZGUgc2F1dmVnYXJkZcKgY29udHJlIGxlIHNvcnQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJTb3J0IGFjY8OpbMOpcsOpIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5RdWFuZCB2b3VzIGxhbmNleiB1biBzb3J0IGRvbnQgbGUgdGVtcHMgZCdpbmNhbnRhdGlvbiBlc3QgZCd1bmUgYWN0aW9uLCB2b3VzIHBvdXZleiB0cmFuc2Zvcm1lciBjZSB0ZW1wcyBkJ2luY2FudGF0aW9uIGVuIHVuZSBhY3Rpb24gYm9udXMgcG91ciBjZXR0ZSBmb2lzLWNpLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiU29ydCBzdWJ0aWwiKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcblF1YW5kIHZvdXMgbGFuY2V6IHVuIHNvcnQsIHZvdXMgcG91dmV6IGxlIGxhbmNlciBzYW5zIHV0aWxpc2VyIGRlIGNvbXBvc2FudGUgdmVyYmFsZSBuaSBzb21hdGlxdWUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJTb3J0IGp1bWVhdSIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuUXVhbmQgdm91cyBsYW5jZXogdW4gc29ydCBxdWkgYSBwb3VyIGNpYmxlIHVuZSBzZXVsZSBjcsOpYXR1cmUgZXQgZG9udCBsYSBwb3J0w6llIG4nZXN0IHBhcyBwZXJzb25uZWxsZSwgdm91cyBwb3V2ZXogY2libGVyIHVuZSBzZWNvbmRlIGNyw6lhdHVyZSBxdWkgc2UgdHJvdXZlIMOgIHBvcnTDqWUgYXZlYyBsZSBtw6ptZSBzb3J0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1hbGVkaWN0aW9uLWRlLWwtb21icmUiIH0gfSwgWwogICAgICAgIF92bS5fdigiTWFsw6lkaWN0aW9uIGRlIGzigJlvbWJyZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNtYWxlZGljdGlvbi1kZS1sLW9tYnJlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gTWVsZMOodGUgOiBNYWxsYWtzZ8OgaWwiKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbkF1IG5pdmVhdSA0LCBs4oCZQW1iZWFuYW1vcyBvYnRpZW50IGxhIHBvc3NpYmlsaXTDqSBkZSBtYXVkaXJlIHVuZSBwZXJzb25uZSBzaW1wbGVtZW50IGVuIHBvaWduYXJkYW50IHNvbiBvbWJyZS4gTOKAmWVmZmV0IGRlIGNldHRlIG1hbMOpZGljdGlvbiBlc3QgdHLDqHMgY3JhaW50ZSwgcGFydGljdWxpw6hyZW1lbnQgY2hleiBsZXMgTWVsZMOodGVzLiBM4oCZQW1iZWFuYW1vcyBwZXV0IG1haW50ZW5pciB1biBub21icmUgZGUgbWFsw6lkaWN0aW9uIMOpZ2FsIMOgIHNvbiBtb2RpZmljYXRldXIgZOKAmUludGVsbGlnZW5jZS4gU2kgbGUgbWF4aW11bSBlc3QgYXR0ZWludCwgaWwgZG9pdCBhbG9ycyBsaWLDqXJlciBs4oCZdW5lIGRlIHNlcyB2aWN0aW1lcy4gTGEgbWFsw6lkaWN0aW9uIGEgcG91ciBlZmZldCBk4oCZaW1wb3NlciB1biAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jYXZhbnRhZ2UtZXQtZGVzYXZhbnRhZ2UiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigiZMOpc2F2YW50YWdlIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgw6AgdG91cyBsZXMgdGVzdHMgw6Agc2EgdmljdGltZSBldCBwb3VyIHVuZSBkdXLDqWUgaWxsaW1pdMOpLiBJbCBu4oCZeSBhIHBhcyBkZSB0ZXN0IGRlIHNhdXZlZ2FyZGUgY29udHJlIGNldCBlZmZldC4gU2kgbOKAmUFtYmVhbmFtb3MgZXN0IHR1w6ksIGxhIG1hbMOpZGljdGlvbiBwZXJkdXJlIHBlbmRhbnQgdW5lIGR1csOpZSBk4oCZdW5lIGx1bmUgcGFyIG5pdmVhdS4gR2xvYmFsZW1lbnQsIGxlcyB2aWN0aW1lcyBk4oCZdW5lIG1hbMOpZGljdGlvbiBwcsOpZsOocmVudCBuw6lnb2NpZXIgYXZlYyBs4oCZQW1iZWFuYW1vcyBwb3VyIMOqdHJlIGxpYsOpcsOpLiBM4oCZQW1iZWFuYW1vcyBwZXV0IGltcG9zZXIgdW5lIHNlY29uZGUgbWFsw6lkaWN0aW9uIMOgIGxhIG3Dqm1lIHZpY3RpbWUgcXVpIGEgcG91ciBlZmZldCBk4oCZYXVnbWVudGVyIGxhIGRpZmZpY3VsdMOpIGRlcyBzZXMgYWN0aW9ucyBkZSB1biBwYWxpZXIsIHJlbmRhbnQgbGUgZGVybmllciBpbXBvc3NpYmxlIMOgIHLDqWFsaXNlci4gQ2V0dGUgc2Vjb25kZSBtYWzDqWRpY3Rpb24gY29tcHRlIGRhbnMgbGUgbm9tYnJlIGRlIG1hbMOpZGljdGlvbiBtYWludGVudWUuIExhIG1hbMOpZGljdGlvbiBuZSBwZXV0IHBhcyDDqnRyZSBsYW5jw6llIGR1cmFudCB1biBjb21iYXQgb8O5IHVuIGFjdGlvbiB2aXZlIGV0IHBvdXIgcXXigJllbGxlIGFpdCBlZmZldCwgZWxsZSBkb2l0IMOqdHJlIGpldMOpZSBkZXZhbnQgZGVzIHTDqW1vaW5zLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJhZmZpbml0ZS1hbmNlc3RyYWxlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkFmZmluaXTDqSBhbmNlc3RyYWxlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2FmZmluaXRlLWFuY2VzdHJhbGUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuIE1lbGTDqHRlIDogRMOgaW1zaGlubiIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuQXUgbml2ZWF1IDUsIMOgIGNoYXF1ZSBmb2lzIHF1ZSB2b3VzIGZhaXRlcyB1biB0ZXN0IGRlIENoYXJpc21lIGFsb3JzIHF1ZSB2b3VzIGludGVyYWdpc3NleiBhdmVjIGRlcyBlc3ByaXRzLCB2b3RyZSBib251cyBkZSBtYcOudHJpc2UgZXN0IGRvdWJsw6kgcydpbCBzJ2FwcGxpcXVlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImVuZXJnaWUtcG9zaXRpdmUiIH0gfSwgWwogICAgICAgIF92bS5fdigiw4luZXJnaWUgcG9zaXRpdmUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZW5lcmdpZS1wb3NpdGl2ZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuIE1lbGTDqHRlIDogTMO5dGhhcnRhY2giKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoIlxuQXUgbml2ZWF1IDYsIHZvdXMgYsOpbsOpZmljaWV6IGQndW4gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3V0aWxpc2VyLWxlcy1jYXJhY3RlcmlzdGlxdWVzLyNhdmFudGFnZS1ldC1kZXNhdmFudGFnZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJhdmFudGFnZSIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgdG91cyBsZXMgamV0cyBkZSBzYXV2ZWdhcmRlIGNvbnRyZSBsJ8OpdGF0wqAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ2VyZXItbGEtc2FudGUtZHUtcGVyc29ubmFnZS8jdGVycm9yaXNlIiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJ0ZXJyb3Jpc8OpZSIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLiBMb3JzcXVlIHZvdXMgw6p0ZXPCoHRlcnJvcmlzw6ksIHZvdXMgZGl2aXNleiBsYSBkdXLDqWUgZGUgbCdlZmZldCBwYXIgZGV1eC5cbkwndXRpbGlzYXRpb24gZGUgbGEgbWFnaWUgcHJvZHVpdCB1biBmbHV4IGQnw6luZXJnaWUgcG9zaXRpdmUgZGFucyB2b3RyZSBjb3Jwcy4gw4AgY2hhcXVlIGZvaXMgcXVlIHZvdXMgZMOpcGVuc2V6IGRlcyBwb2ludHMgZGUgbWFnaWUgZW4gdXRpbGlzYW50IGRlIGxhICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7IGF0dHJzOiB7IGhyZWY6ICIjbWFuaXB1bGF0aW9uLWRlLWxhLW1hZ2llLW91LW1ldGFtYWdpZSIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJNw6l0YW1hZ2llICIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiwgdm91cyByw6ljdXDDqXJleiBsZSBtb250YW50IGRlIHBvaW50cyBkZSBk4oCZYWN0aW9uIChQQSkgcXVlIGRlIHBvaW50cyBkZSBtYWdpZSAoUE0pIHV0aWxpc8OpcyBub3JtYWxlbWVudCBwb3VyIGxlIHNvcnQgKEPigJllc3Qgw6AgZGlyZSBhdmFudCBsYSBtYWpvcmF0aW9uIGxpw6llIMOgIGzigJl1c2FnZSBkZSBsYSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgeyBhdHRyczogeyBocmVmOiAiI21hbmlwdWxhdGlvbi1kZS1sYS1tYWdpZS1vdS1tZXRhbWFnaWUiIH0gfSwKICAgICAgICAgICAgW192bS5fdigiTcOpdGFtYWdpZSAiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIikuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJjb21wYWdub24tYW5pbWFsIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkNvbXBhZ25vbiBhbmltYWwgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY29tcGFnbm9uLWFuaW1hbCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gTWVsZMOodGUgOiBDb21wYWJlYXRoIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG7DgCBwYXJ0aXIgZHUgbml2ZWF1IDgsIGzigJlBbWJlYW5hbW9zIHNlIGxpZSBhdmVjIHVuZSBjaG91ZXR0ZS4gSWwgZG9pdCBz4oCZYWdpciBk4oCZdW4gYW5pbWFsIHF1aSB2aXQgZGFucyBsZXMgY29udHLDqWVzIG/DuSByw6lzaWRlIGzigJlBbWJlYW5hbW9zLiBTaSBsYSBjaG91ZXR0ZSBkZXZhaXQgZGlzcGFyYcOudHJlIHBvdXIgdW5lIHF1ZWxjb25xdWUgcmFpc29uLCB1bmUgYXV0cmUgdmllbmRyYSBsYSByZW1wbGFjZXIgw6AgbGEgcGxlaW5lIGx1bmUgc3VpdmFudGUuIENlIGNvbXBhZ25vbiBhbmltYWwgZXN0IHV0aWxlIMOgIHBsdXNpZXVycyDDqWdhcmRzLiBJbCBwZXV0IGF2ZXJ0aXIgZGUgbOKAmWFycml2w6llIGTigJl1biBpbnRydXMgZW4gY2h1aW50YW50LiBMYSBjaG91ZXR0ZSBwZXV0IHBhcnRhZ2VyIHNhIGNoYXNzZSBhdmVjIHNvbiBtYcOudHJlLiBFbGxlIHBldXQgZm91cm5pciB1biByb25nZXVyLCB1biDDqWN1cmV1aWwsIHVuIHBldGl0IGxhcGluIG91IHVuIHBvaXNzb24sIHRvdXMgbGVzIGpvdXJzIMOgIGzigJlBbWJlYW5hbW9zLlxuRW5maW4sIGVsbGUgcGV1dCB0cmFuc3BvcnRlciBkZXMgcGV0aXRzIG9iamV0cyBvdSBkZXMgbWVzc2FnZXMuIEzigJlhbmltYWwgbmUgc+KAmcOpbG9pZ25lIGphbWFpcyBwbHVzIGRlIDUwIG3DqHRyZXMgcGFyIG5pdmVhdSBkZSBs4oCZQW1iZWFuYW1vcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJtYWdpZS1kdS1zYW5nIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIk1hZ2llIGR1IHNhbmcgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbWFnaWUtZHUtc2FuZyIgfSB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gTWVsZMOodGUgOiBEcmFvaWRmYWxhIildKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG7DgCBwYXJ0aXIgZHUgbml2ZWF1IDgsIHZvdXMgYXZleiBkw6ljb3V2ZXJ0IHF1ZSB2b3RyZSBwcm9wcmUgc2FuZyBhdmFpdCBkZXMgcHJvcHJpw6l0w6lzIG1hZ2lxdWVzIGV0IHF1ZSB2b3VzIHBvdXZleiBsZSBzYWNyaWZpZXIgcG91ciBhdWdtZW50ZXIgdm90cmUgcG91dm9pci4gVm91cyBwb3V2ZXogdXRpbGlzZXIgdW5lIGFjdGlvbiBib251cyBwb3VyIGZhaXJlIGNvdWxlciB2b3RyZSBzYW5nIMOgIGwnYWlkZSBkJ3VuZSBhcm1lIHRyYW5jaGFudGUgb3UgcGVyZm9yYW50ZSwgdm91cyBwZXJkZXogMWQ2IHBvaW50cyBk4oCZYWN0aW9uIChQQSkgZXQgdm91cyBnYWduZXogaW1tw6lkaWF0ZW1lbnQgMWQ2IHBvaW50IGRlIG1hZ2llIChQTSkgcXVlIHZvdXMgZGV2ZXogdXRpbGlzZXIgZGFucyBsZSBtw6ptZSByb3VuZC4gVm91cyBwb3V2ZXogc2FjcmlmaWVyIDFkNiBwb2ludHMgZGUgZOKAmWFjdGlvbnMgc3VwcGzDqW1lbnRhaXJlcyBwb3VyIGNoYXF1ZSBkNiBkZSBwb2ludCBkZSBtYWdpZSBzdXBwbMOpbWVudGFpcmUgcXVlIHZvdXMgc291aGFpdGV6IG9idGVuaXIuIFZvdXMgcG91dmV6IHNhY3JpZmllciBkZSBjZXR0ZSBmYcOnb24gdW4gbm9tYnJlIHRvdGFsIGRlIGQ2IMOpZ2FsIGF1IG1heGltdW0gw6Agdm90cmUgYm9udXMgZGUgbWHDrnRyaXNlIGVudHJlIGRldXggIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ2VyZXItbGEtc2FudGUtZHUtcGVyc29ubmFnZS8jcmVwb3MtY291cnQiIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInJlcG9zIGNvdXJ0IildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJzIG91IGxvbmdzLlxuQ2V0dGUgdXRpbGlzYXRpb24gZXN0IGRhbmdlcmV1c2UgY2FyIGxlcyBkw6lzIHNvbnQgZXhwbG9zaWZzIGV0IGlsIGVzdCBhcnJpdsOpIHF14oCZdW4gQW1iZWFuYW1vcyBwZXJkZSBsYSB2aWUgbG9ycyBkZSBjZXQgdXNhZ2UgZGUgbGEgbWFnaWUuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNoYXJtZS1pbnRlbnNlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkNoYXJtZSBpbnRlbnNlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2NoYXJtZS1pbnRlbnNlIiB9IH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBNZWxkw6h0ZSA6IFNldW5kaWFuIildKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG5BdSBuaXZlYXUgMTQsIGxvcnNxdWUgdm91cyBsYW5jZXogdW4gc29ydCBkZSBsJ8OpY29sZSBkJ2VuY2hhbnRlbWVudCwgdm91cyBwb3V2ZXogdXRpbGlzZXIgdm90cmUgcsOpYWN0aW9uIHBvdXIgb2J0ZW5pciAxZDYgcG9pbnQgZGUgbWFnaWUgKFBNKSBxdWUgdm91cyBkZXZleiBvYmxpZ2F0b2lyZW1lbnQgZMOpcGVuc2VyIHN1ciBjZSBzb3J0LiBWb3VzIHBvdXZleiB5IGFqb3V0ZXIgZCdhdXRyZXMgcG9pbnRzIGRlIHNvcmNlbGxlcmllIHF1ZSB2b3VzIGTDqXBlbnNleiBkZSBmYcOnb24gb3JkaW5haXJlIHBhciB1bmUgYWN0aW9uIGJvbnVzLlxuRGUgcGx1cywgdm91cyBiw6luw6lmaWNpZXogZCd1bsKgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86ICIvdXRpbGlzZXItbGVzLWNhcmFjdGVyaXN0aXF1ZXMvI2F2YW50YWdlLWV0LWRlc2F2YW50YWdlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoImF2YW50YWdlIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICLCoGF1eCBqZXRzIGRlIHNhdXZlZ2FyZGUgY29udHJlIHRvdXMgbGVzIHNvcnRzIGV0IGxlcyBwb3V2b2lycyBkZSBjaGFybWUgb3UgZCdlbmNoYW50ZW1lbnQuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInNlY29uZC1jb21wYWdub24tYW5pbWFsIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlNlY29uZCBjb21wYWdub24gYW5pbWFsICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NlY29uZC1jb21wYWdub24tYW5pbWFsIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBNZWxkw6h0ZSA6IENvbXBhYmVhdGgiKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbsOAIHBhcnRpciBkdSBuaXZlYXUgMTYsIGzigJlBbWJlYW5hbW9zIHNlIGxpZSB1bmUgc2Vjb25kZSBjaG91ZXR0ZSBxdWkgdmllbnQgYWluc2kgZm9ybWVyIHVuIGNvdXBsZSBhdSBzZXJ2aWNlIGR1IG1hZ2UuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAicHJlc2VuY2UtcHVpc3NhbnRlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlByw6lzZW5jZSBwdWlzc2FudGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjcHJlc2VuY2UtcHVpc3NhbnRlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gTWVsZMOodGUgOiBMw6B0aGFpcmN1bWRhY2giKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbsOAIHBhcnRpciBkdSBuaXZlYXUgMTgsIHZvdXMgcG91dmV6IGludm9xdWVyIGxhIHJlZG91dGFibGUgcHLDqXNlbmNlIGRlIHZvdHJlIGFuY8OqdHJlLCBjYXVzYW50IGZhc2NpbmF0aW9uIG91IHRlcnJldXIgcGFybWkgbGVzIGNyw6lhdHVyZXMgcXVpIHZvdXMgZW50b3VyZW50LiBWb3VzIHBvdXZleiB1dGlsaXNlciB1bmUgYWN0aW9uIGFmaW4gZGUgcHVpc2VyIGRhbnMgY2UgcG91dm9pciBldCBkw6lnYWdlciB1bmUgYXVyYSBkZSBmYXNjaW5hdGlvbiBvdSBkZSB0ZXJyZXVyICjDoCB2b3VzIGRlIGNob2lzaXIpIGRhbnMgdW4gcmF5b24gZGUgMTggbcOodHJlcy4gUGVuZGFudCAxIG1pbnV0ZSwgb3UganVzcXUnw6AgY2UgcXVlIHZvdXMgcGVyZGlleiB2b3RyZSBjb25jZW50cmF0aW9uIChhdmVjIGxlcyBtw6ptZXMgcsOoZ2xlcyBxdWUgc2kgdm91cyBsYW5jaWV6IHVuIHNvcnQgcmVxdcOpcmFudCB2b3RyZSBjb25jZW50cmF0aW9uKSwgY2hhcXVlIGNyw6lhdHVyZSBob3N0aWxlIHF1aSBkw6lidXRlIHNvbiB0b3VyIGRhbnMgbGEgem9uZSBkJ2VmZmV0IGRlIGNldHRlIGF1cmEgZG9pdCByw6l1c3NpciB1bsKgamV0IGRlIHNhdXZlZ2FyZGXCoGRlIFNhZ2Vzc2Ugb3UgYmllbiBkZXZlbmlywqAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyNjaGFybWUiIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoImNoYXJtw6llIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIsKgKHNpIHZvdXMgY2hvaXNpc3NleiBsYSBmYXNjaW5hdGlvbikgb3XCoCIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyN0ZXJyb3Jpc2UiIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInRlcnJvcmlzw6llIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICLCoChzaSB2b3VzIGNob2lzaXNzZXogbGEgdGVycmV1cikganVzcXUnw6AgY2UgcXVlIGwnYXVyYSBzZSBkaXNzaXBlLiBVbmUgY3LDqWF0dXJlIHF1aSByw6l1c3NpdCBzb27CoGpldCBkZSBzYXV2ZWdhcmRlwqBlc3QgaW1tdW5pc8OpZSDDoCB2b3RyZSBhdXJhIHBlbmRhbnQgMjQgaGV1cmVzLiBWb3VzIG5lIHBvdXZleiB1dGlsaXNlciBjZSBwb3V2b2lyIHVuIG5vbWJyZSBkZSBmb2lzIG1heGltdW0gw6lnYWwgw6Agdm90cmUgYm9udXMgZOKAmUludGVsbGlnZW5jZSBlbnRyZSBkZXV4IFsiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyNyZXBvcy1sb25nIiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJyZXBvcyBsb25nIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoInNdKC9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyNyZXBvcy1sb25nKS4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInZlcml0YWJsZS1hbWJlYW5hbW9zIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlbDqXJpdGFibGUgQW1iZWFuYW1vcyAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN2ZXJpdGFibGUtYW1iZWFuYW1vcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gTWVsZMOodGUgOiBBbWJlYW5hbW9zIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5BdSBuaXZlYXUgMjAsIGwnQW1iZWFuYW1vcyBlc3QgYWNjb21wbGkgZXQgYXVnbWVudGUgc2VzIGNhcmFjdMOpcmlzdGlxdWVzIGRlIFNhZ2Vzc2UgZXQgZGUgQ2hhcmlzbWUgZGUgMiBwb2ludHMgc2FucyBwb3V2b2lyIGTDqXBhc3NlciAyMi4iCiAgICAgICAgKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}