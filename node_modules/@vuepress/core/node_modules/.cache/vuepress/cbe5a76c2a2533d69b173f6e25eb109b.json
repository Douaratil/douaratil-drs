{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/archives/README.md?vue&type=template&id=6bc540d7&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/archives/README.md","mtime":1638967336076},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c(
        "div",
        { staticClass: "text-center" },
        [
          _c("h1", { attrs: { id: "archives" } }, [
            _vm._v("Archives "),
            _c(
              "a",
              { staticClass: "header-anchor", attrs: { href: "#archives" } },
              [
                _c("i", {
                  staticClass: "v-icon notranslate mdi mdi-link-variant"
                })
              ]
            )
          ]),
          _vm._v(" "),
          _c(
            "v-row",
            [
              _c("v-col", { attrs: { cols: "12", md: "6" } }, [
                _c("h2", { attrs: { id: "mise-a-jour-62" } }, [
                  _vm._v("Mise à jour 62 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-62" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v(
                      "Le jeu Douaratil est toujours en phase de test et la dernière partie m'a permis de penser à certains ajustements qui permettront d'atténuer certaines inégalités sans modifier complètement le système. Les dés de dégâts sont réintroduits mais prennent tout de même en compte la \"marge\" du jet d'attaque avec un bonus pour les 6 obtenus (en plus de la possibilité de faire des jets critiques dans certaines conditions)."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v(
                      "Les triple 6 ne peuvent plus être parés (ce sont les joueurs qui ne vont pas être contents)."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v(
                      "J'en profite pour modifier le menu dans la section équipement et le rendre plus lisible."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v(
                      "Mise à jour du bestiaire en cours (Lettre A et B faites)."
                    )
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 30 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-61" } }, [
                  _vm._v("Mise à jour 61 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-61" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/lochetos-vlatcano" } },
                      [_vm._v("Lochetos Vlatcano")]
                    ),
                    _vm._v(" au niveau 13.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/rudolf-bernsen" } }, [
                      _vm._v("Rudolf Bernsen")
                    ]),
                    _vm._v(" au niveau 11.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/sawrina-semiramis" } },
                      [_vm._v("Sawrina Semiramis")]
                    ),
                    _vm._v(" au niveau 15.")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 28 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-60" } }, [
                  _vm._v("Mise à jour 60 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-60" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c(
                    "li",
                    [
                      _vm._v("Modification de la compétence "),
                      _c(
                        "RouterLink",
                        {
                          attrs: { to: "/archetypes/seibahkami/#coup-parfait" }
                        },
                        [_vm._v("Coup parfait du Seibahkami")]
                      ),
                      _vm._v(
                        " prenant désormais en compte les règles du coup critique."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout des illustrations du "),
                    _c("a", { attrs: { href: "/bestiaire/kakishikh" } }, [
                      _vm._v("Kakishikh")
                    ]),
                    _vm._v(" et du "),
                    _c("a", { attrs: { href: "/bestiaire/diadebaide" } }, [
                      _vm._v("Diadebaide")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour des Chroniques d'"),
                    _c("a", { attrs: { href: "/chroniques/miz-okther-721" } }, [
                      _vm._v("Okther")
                    ]),
                    _vm._v(" et de de "),
                    _c("a", { attrs: { href: "/chroniques/miz-du-721" } }, [
                      _vm._v("Du")
                    ]),
                    _vm._v(" avec les liens.")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 27 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-59" } }, [
                  _vm._v("Mise à jour 59 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-59" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c(
                    "li",
                    [
                      _vm._v("Modification de la compétence "),
                      _c(
                        "RouterLink",
                        { attrs: { to: "/archetypes/skell/#critique-brutal" } },
                        [_vm._v("Critique brutal du Skell")]
                      ),
                      _vm._v(
                        " prenant désormais en compte les règles du coup critique."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout des illustrations du "),
                    _c("a", { attrs: { href: "/bestiaire/scorpion" } }, [
                      _vm._v("Scorpion")
                    ]),
                    _vm._v(", "),
                    _c("a", { attrs: { href: "/bestiaire/scorpion-geant" } }, [
                      _vm._v("Scorpion géant")
                    ]),
                    _vm._v(", "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/scorpion-nocturne" } },
                      [_vm._v("Scorpion nocturne")]
                    ),
                    _vm._v(", "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/scorpion-stygien" } },
                      [_vm._v("Scorpion stygien")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout des illustrations section règle "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/tables-de-degats-et-de-coups-critiques/"
                          }
                        },
                        [_vm._v("Coups critiques")]
                      ),
                      _vm._v("].")
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour des Chroniques d'"),
                    _c("a", { attrs: { href: "/chroniques/miz-okther-721" } }, [
                      _vm._v("Okther")
                    ]),
                    _vm._v(" et de de "),
                    _c("a", { attrs: { href: "/chroniques/miz-du-721" } }, [
                      _vm._v("Du")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Mise à jour de la carte de "),
                      _c(
                        "RouterLink",
                        { attrs: { to: "/atlas-du-monde/shahia/" } },
                        [_vm._v("Shahia")]
                      ),
                      _vm._v("."),
                      _c("br"),
                      _vm._v("\nBon jeu.")
                    ],
                    1
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 24 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-58" } }, [
                  _vm._v("Mise à jour 58 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-58" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Ajout de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/alf-swenbjornson" } },
                      [_vm._v("Alf Swenbjörnson")]
                    ),
                    _vm._v(" au niveau 9.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Description de l'Archétype "),
                    _c("a", { attrs: { href: "/archetypes/holtseidar" } }, [
                      _vm._v("Holtseidar")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour des Chroniques d'"),
                    _c("a", { attrs: { href: "/chroniques/miz-okther-721" } }, [
                      _vm._v("Okther")
                    ]),
                    _vm._v(" par Georges alias "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/lochetos-vlatcano" } },
                      [_vm._v("Lochetos Vlatcano")]
                    ),
                    _vm._v(
                      ", l'un de nos deux chroniqueurs (Elric étant le second actuellement)."
                    )
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 23 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-57" } }, [
                  _vm._v("Mise à jour 57 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-57" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _c("a", { attrs: { href: "/colonie" } }, [
                      _vm._v("Colonie")
                    ]),
                    _vm._v(
                      " mise à jour progressive des tableaux d'évènements."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour des personnages avec le système de "),
                    _c("a", { attrs: { href: "/colonie" } }, [
                      _vm._v("Colonie")
                    ]),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 19 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-56" } }, [
                  _vm._v("Mise à jour 56 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-56" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _c("a", { attrs: { href: "/colonie" } }, [
                      _vm._v("Colonie")
                    ]),
                    _vm._v(
                      " modification mineure des règles avec système de recrutement de colons modulables."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour des personnages avec le système de "),
                    _c("a", { attrs: { href: "/colonie" } }, [
                      _vm._v("Colonie")
                    ]),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 14 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-55" } }, [
                  _vm._v("Mise à jour 55 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-55" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Une nouvelle option de gameplay voit le jour. Il s'agit d'une amélioration des règles de la gestion des domaines mais ave des aspects stratégiques et coopératifs. Il s'agit de développer une ville entre les joueurs et de la faire prospérer. Il s'agit donc des règles de la "
                  ),
                  _c("a", { attrs: { href: "/colonie" } }, [_vm._v("colonie")]),
                  _vm._v(
                    ". Les règles sont susceptibles d'évoluer dans le temps mais cela donne déjà une bonne base pour comprendre de quoi il s'agit."
                  ),
                  _c("br"),
                  _vm._v("\nLes évènements seront complétés ultérieurement.")
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/voie-de-la-magie-novice" } },
                      [_vm._v("Voie de la magie (Novice)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      {
                        attrs: { href: "/bestiaire/voie-de-la-magie-disciple" }
                      },
                      [_vm._v("Voie de la magie (Disciple)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      {
                        attrs: { href: "/bestiaire/voie-de-la-magie-apprenti" }
                      },
                      [_vm._v("Voie de la magie (Apprenti)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/voie-de-la-magie-adepte" } },
                      [_vm._v("Voie de la magie (Adepte)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/voie-de-la-magie-expert" } },
                      [_vm._v("Voie de la magie (Expert)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/voie-de-la-magie-maitre" } },
                      [_vm._v("Voie de la magie (Maître)")]
                    ),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 13 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-54" } }, [
                  _vm._v("Mise à jour 54 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-54" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Les plantes dynamisantes sont terminées, passons à celles qui ont une utilisation plus générales:"
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Changement de la couleur des icones et liens Kofi.")
                  ]),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de l'"),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/utilisations-generales/#akhase"
                          }
                        },
                        [_vm._v("Akhase")]
                      ),
                      _vm._v(
                        ", une plante de grande taille qui pousse dans les zones tempérées et herbeuses parmis les hautes herbes."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de d'"),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/utilisations-generales/#alenas"
                          }
                        },
                        [_vm._v("Alenas")]
                      ),
                      _vm._v(
                        ", une plante de petite taille qui pousse dans les zones tempérées sous des forêts de conifères."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de l'"),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/utilisations-generales/#arlanne"
                          }
                        },
                        [_vm._v("Arlanne")]
                      ),
                      _vm._v(
                        ", une plante de petite taille qui pousse dans les zones froides et montagneuses."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de l'"),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/utilisations-generales/#atanath"
                          }
                        },
                        [_vm._v("Atanath")]
                      ),
                      _vm._v(
                        ", une mousse qui pousse dans les zones tempérées au bord des rivières."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/utilisations-generales/#dherene"
                          }
                        },
                        [_vm._v("Dherene")]
                      ),
                      _vm._v(
                        ", un arbre qui pousse dans les zones tempérées et océaniques."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/utilisations-generales/#felmeter"
                          }
                        },
                        [_vm._v("Felmeter")]
                      ),
                      _vm._v(
                        ", un arbre qui pousse dans les zones tempérées et océaniques."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de la "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/utilisations-generales/#latha"
                          }
                        },
                        [_vm._v("Latha")]
                      ),
                      _vm._v(
                        ", une plante qui pousse dans les zones tempérées et côtes froides."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de la "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/utilisations-generales/#thurd"
                          }
                        },
                        [_vm._v("Thurd")]
                      ),
                      _vm._v(
                        ", une mousse qui pousse dans les zones froide et côtes froides."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de la "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/utilisations-generales/#ubhar"
                          }
                        },
                        [_vm._v("Ubhar")]
                      ),
                      _vm._v(
                        ", une plante qui pousse dans les zones froide et près des glaciers."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Apprentissage de l'Ashkhème et de l'Askheth pour "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/lochetos-vlatcano" } },
                      [_vm._v("Lochetos Vlatcano")]
                    ),
                    _vm._v(" auprès de son esclave Kahina ult Bouhen.")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 4 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-53" } }, [
                  _vm._v("Mise à jour 53 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-53" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("les modifications et ajouts sur le site:")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v(
                      "Transferts de plantes dans la section des plantes "
                    ),
                    _c(
                      "a",
                      { attrs: { href: "/herbier/utilisations-generales" } },
                      [_vm._v("Utilisations Générales")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#myhnerre"
                          }
                        },
                        [_vm._v("Myhnerre")]
                      ),
                      _vm._v(
                        ", un arbuste qui pousse dans les zones froides et montagneuses."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de l'"),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to:
                              "/herbier/soins-dynamisants-excitants/#erhegelth"
                          }
                        },
                        [_vm._v("Erhegelth")]
                      ),
                      _vm._v(
                        ", un arbuste qui pousse dans les zones tempérées et montagneuses."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#rawekh"
                          }
                        },
                        [_vm._v("Rawekh")]
                      ),
                      _vm._v(
                        ", un parasite nodulaire d’écorce qui pousse dans les zones tempérées et forestières."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#touroulh"
                          }
                        },
                        [_vm._v("Touroulh")]
                      ),
                      _vm._v(
                        ", petite plante qui pousse dans les zones tempérées et forestières."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to:
                              "/herbier/soins-dynamisants-excitants/#vicalmyrh"
                          }
                        },
                        [_vm._v("Vicalmyrh")]
                      ),
                      _vm._v(
                        ", petite plante qui pousse dans les zones tempérées et forestières de conifères."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#yaveth"
                          }
                        },
                        [_vm._v("Yaveth")]
                      ),
                      _vm._v(
                        ", petit arbuste qui pousse dans les zones tempérées et océaniques."
                      )
                    ],
                    1
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 3 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-52" } }, [
                  _vm._v("Mise à jour 52 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-52" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("les modifications et ajouts sur le site:")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v(
                      "Modification dans le bestiaire des Guerriers (Novice, disciple...) et renommé en Voie des Armes (ex: "
                    ),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/voie-des-armes-novice" } },
                      [_vm._v("Voie des Armes (Novice)")]
                    ),
                    _vm._v(").")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/voie-de-l-ombre-novice" } },
                      [_vm._v("Voie de l'ombre (Novice)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      {
                        attrs: { href: "/bestiaire/voie-de-l-ombre-disciple" }
                      },
                      [_vm._v("Voie de l'ombre (Disciple)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      {
                        attrs: { href: "/bestiaire/voie-de-l-ombre-apprenti" }
                      },
                      [_vm._v("Voie de l'ombre (Apprenti)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/voie-de-l-ombre-adepte" } },
                      [_vm._v("Voie de l'ombre (Adepte)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/voie-de-l-ombre-expert" } },
                      [_vm._v("Voie de l'ombre (Expert)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout dans le bestiaire de la "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/voie-de-l-ombre-maitre" } },
                      [_vm._v("Voie de l'ombre (Maître)")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("La réorganisation de l'"),
                      _c("RouterLink", { attrs: { to: "/herbier/" } }, [
                        _vm._v("herbier")
                      ]),
                      _vm._v(" se poursuit.")
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#drafa"
                          }
                        },
                        [_vm._v("Drafa")]
                      ),
                      _vm._v(
                        ", un arbuste qui pousse dans les zones arides au bord des océans."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#doughmou"
                          }
                        },
                        [_vm._v("Doghmou")]
                      ),
                      _vm._v(
                        ", un arbuste qui pousse dans les zones tempérées et montagneuses."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to:
                              "/herbier/soins-dynamisants-excitants/#farighath"
                          }
                        },
                        [_vm._v("Farighath")]
                      ),
                      _vm._v(
                        ", un cactus qui pousse dans les zones désertiques arides."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#geafnoth"
                          }
                        },
                        [_vm._v("Geafnoth")]
                      ),
                      _vm._v(
                        ",  un lichen qui pousse dans les zones de permafrost au pied de volcans en activités.\nBon jeu."
                      )
                    ],
                    1
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 1 novembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-51" } }, [
                  _vm._v("Mise à jour 51 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-51" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Updates du jour:")]),
                _vm._v(" "),
                _c("ul", [
                  _c(
                    "li",
                    [
                      _vm._v(
                        "Changement du menu des plantes avec une grosse réorganisation et une classification de l'"
                      ),
                      _c("RouterLink", { attrs: { to: "/herbier/" } }, [
                        _vm._v("herbier")
                      ]),
                      _vm._v(".")
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout des règles d'"),
                      _c(
                        "RouterLink",
                        { attrs: { to: "/herbier/#facteur-d-intoxication" } },
                        [_vm._v("intoxication")]
                      ),
                      _vm._v(" aux plantes ingérées (ou inhalées).")
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de l'"),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#akubege"
                          }
                        },
                        [_vm._v("Akubege")]
                      ),
                      _vm._v(
                        ", un arbre qui pousse dans les zones semi-aride océanique."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de l'"),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#arlath"
                          }
                        },
                        [_vm._v("Arlath")]
                      ),
                      _vm._v(
                        ", un arbuste qui pousse dans les zones herbeuse tempérées."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#cuzama"
                          }
                        },
                        [_vm._v("Cuzama")]
                      ),
                      _vm._v(
                        ", une plante qui pousse dans les zones arides chaudes."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout du "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-dynamisants-excitants/#darssur"
                          }
                        },
                        [_vm._v("Darssur")]
                      ),
                      _vm._v(
                        ", une plante qui pousse dans les zones arides chaudes.\nBon jeu."
                      )
                    ],
                    1
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 28 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-50" } }, [
                  _vm._v("Mise à jour 50 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-50" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Updates du jour:")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Précisions des règles sur les "),
                    _c("a", { attrs: { href: "/langues" } }, [
                      _vm._v("langues")
                    ]),
                    _vm._v(
                      "avec spécificité des apprentissages et utilisation des langues communes, ajustements des niveaux de difficulté."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jours des sorts "),
                    _c(
                      "a",
                      {
                        attrs: { href: "/grimoire/comprehension-des-langues" }
                      },
                      [_vm._v("compréhension des langues")]
                    ),
                    _vm._v(" et "),
                    _c("a", { attrs: { href: "/grimoire/langues" } }, [
                      _vm._v("langues")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Correction du montant de point d'expérience de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/tiberius-don-alonzo" } },
                      [_vm._v("Tiberius Don ALonzo")]
                    ),
                    _vm._v(" au niveau 13.")
                  ]),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de la "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-brulures-gelures/#coulhas"
                          }
                        },
                        [_vm._v("Coulhas")]
                      ),
                      _vm._v(
                        ", plante grasse désertique pour guérir les brûlures."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de la "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-brulures-gelures/#joloh"
                          }
                        },
                        [_vm._v("Joloh")]
                      ),
                      _vm._v(
                        ", plante se développant dans les montagnes éternellement gelées pour guérir les gelures."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de la "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-brulures-gelures/#kelthary"
                          }
                        },
                        [_vm._v("Kheltary")]
                      ),
                      _vm._v(
                        ", plante herbacée des zones tempérées pour guérir les brûlures."
                      )
                    ],
                    1
                  ),
                  _vm._v(" "),
                  _c(
                    "li",
                    [
                      _vm._v("Ajout de la "),
                      _c(
                        "RouterLink",
                        {
                          attrs: {
                            to: "/herbier/soins-brulures-gelures/#weltouragh"
                          }
                        },
                        [_vm._v("Weltourahg")]
                      ),
                      _vm._v(
                        ", algue se développant dans les océans chauds pour guérir les gelures."
                      )
                    ],
                    1
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 27 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-49" } }, [
                  _vm._v("Mise à jour 49 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-49" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Ajout des règles de langues avec les degrés et leur utilisation :"
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Ajout des "),
                    _c("a", { attrs: { href: "/langues" } }, [
                      _vm._v("Langues")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/lochetos-vlatcano" } },
                      [_vm._v("Lochetos Vlatcano")]
                    ),
                    _vm._v(" au niveau 12.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/margs-maenkalon" } }, [
                      _vm._v("Margs Maenkalon")
                    ]),
                    _vm._v(" au niveau 14.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/sawrina-semiramis" } },
                      [_vm._v("Sawrina Semiramis")]
                    ),
                    _vm._v(" au niveau 14.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/tiberius-don-alonzo" } },
                      [_vm._v("Tiberius Don ALonzo")]
                    ),
                    _vm._v(" au niveau 13.")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 24 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-48" } }, [
                  _vm._v("Mise à jour 48 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-48" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v("Mise à jour des chroniques par Georges alias "),
                  _c("a", { attrs: { href: "/bestiaire/lochetos-vlatcano" } }, [
                    _vm._v("Lochetos Vlatcano")
                  ]),
                  _vm._v(", barde et chansonnier.")
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/chroniques/miz-gwendel-721" } },
                      [_vm._v("Gwendel 721")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/chroniques/miz-okther-721" } }, [
                      _vm._v("Okther 721")
                    ]),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 23 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-47" } }, [
                  _vm._v("Mise à jour 47 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-47" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Préparation et conversion de quelques nouvelles créatures:"
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Ajout de l'"),
                    _c("a", { attrs: { href: "/bestiaire/anubien" } }, [
                      _vm._v("Anubien")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout de l'"),
                    _c("a", { attrs: { href: "/bestiaire/assoiffeur-gris" } }, [
                      _vm._v("Assoiffeur gris")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout de la "),
                    _c("a", { attrs: { href: "/bestiaire/dau" } }, [
                      _vm._v("Dau")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout de l'"),
                    _c("a", { attrs: { href: "/bestiaire/efrit" } }, [
                      _vm._v("Efrit")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout de l'"),
                    _c(
                      "a",
                      {
                        attrs: {
                          href: "/bestiaire/elementaire-mineur-de-glace"
                        }
                      },
                      [_vm._v("Elémentaire mineur de glace")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout de l'"),
                    _c(
                      "a",
                      {
                        attrs: {
                          href: "/bestiaire/elementaire-mineur-de-magma"
                        }
                      },
                      [_vm._v("Elémentaire mineur de magma")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout de l'"),
                    _c(
                      "a",
                      {
                        attrs: {
                          href: "/bestiaire/elementaire-mineur-de-poussiere"
                        }
                      },
                      [_vm._v("Elémentaire mineur de poussière")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout de l'"),
                    _c(
                      "a",
                      {
                        attrs: {
                          href: "/bestiaire/elementaire-mineur-de-vapeur"
                        }
                      },
                      [_vm._v("Elémentaire mineur de vapeur")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout de la "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/silhouette-de-sable" } },
                      [_vm._v("Silhouette de sable")]
                    ),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 21 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-46" } }, [
                  _vm._v("Mise à jour 46 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-46" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v("Aujourd'hui, ajout d'un peu de magie domestique:")
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/ambiance-lumineuse" } },
                      [_vm._v("Ambiance lumineuse")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/ambiance-sinistre" } },
                      [_vm._v("Ambiance sinistre")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/assaisonnement" } }, [
                      _vm._v("Assaisonnement")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/bougie-de-meditation" } },
                      [_vm._v("Bougie de méditation")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/coiffure" } }, [
                      _vm._v("Coiffure")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/courant-d-air" } }, [
                      _vm._v("Courant d'air")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/eclairage" } }, [
                      _vm._v("Eclairage")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/epilation" } }, [
                      _vm._v("Epilation")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/manucure" } }, [
                      _vm._v("Manucure")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/nettoyage" } }, [
                      _vm._v("Nettoyage")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/polissage" } }, [
                      _vm._v("Polissage")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/repassage" } }, [
                      _vm._v("Repassage")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/teinte" } }, [
                      _vm._v("Teinte")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/sechage" } }, [
                      _vm._v("Séchage")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/tonte" } }, [
                      _vm._v("Tonte")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/sentinelle" } }, [
                      _vm._v("Sentinelle")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/serviteurs-de-fumee" } },
                      [_vm._v("Serviteurs de fumée")]
                    ),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Avec ceci un peu de magie curative :")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/accouchement-indolore" } },
                      [_vm._v("Accouchement indolore")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/anti-parasite" } }, [
                      _vm._v("Anti-parasite")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/avortement" } }, [
                      _vm._v("Avortement")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/definir-le-sexe" } }, [
                      _vm._v("Définir le sexe")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/diagnostique-foetal" } },
                      [_vm._v("Diagnostique foetal")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/fertilite" } }, [
                      _vm._v("Fertilité")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/frigidite" } }, [
                      _vm._v("Frigidité")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/orgasme" } }, [
                      _vm._v("Orgasme")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c(
                      "a",
                      {
                        attrs: {
                          href: "/grimoire/puissance-impuissance-sexuelle"
                        }
                      },
                      [_vm._v("Puissance/impuissance sexuelle")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/rotation-foetal" } }, [
                      _vm._v("Rotation foetal")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/soin-animalier" } }, [
                      _vm._v("Soin animalier")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/soin-dentaire" } }, [
                      _vm._v("Soin dentaire")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/soin-dermique" } }, [
                      _vm._v("Soin dermique")
                    ]),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Voici donc pourquoi les mages et les guérisseurs sont indispensables dans les communautés avec ces 30 nouveaux sorts."
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 21 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-45" } }, [
                  _vm._v("Mise à jour 45 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-45" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/tentacules-noires" } },
                      [_vm._v("Tentacules noires")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/tuer" } }, [
                      _vm._v("Tuer")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/tueur-mental" } }, [
                      _vm._v("Tueur mental")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/tueur-sonique" } }, [
                      _vm._v("Tueur sonique")
                    ]),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 20 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-44" } }, [
                  _vm._v("Mise à jour 44 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-44" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Ajout des illustrations pour l'"),
                    _c("a", { attrs: { href: "/bestiaire/acolyte" } }, [
                      _vm._v("acolyte")
                    ]),
                    _vm._v(", l'"),
                    _c(
                      "a",
                      {
                        attrs: {
                          href: "/bestiaire/acolyte-du-cercle-de-la-nuit"
                        }
                      },
                      [_vm._v("acolyte du cercle de la nuit")]
                    ),
                    _vm._v(",l'"),
                    _c("a", { attrs: { href: "/bestiaire/inexorable" } }, [
                      _vm._v("inéxorable")
                    ]),
                    _vm._v(", l'"),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/inexorable-superieur" } },
                      [_vm._v("inéxorable supérieur")]
                    ),
                    _vm._v("\net de l'archétype de l'"),
                    _c("a", { attrs: { href: "/archetypes/astartes" } }, [
                      _vm._v("Astartes")
                    ]),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 19 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-43" } }, [
                  _vm._v("Mise à jour 43 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-43" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v("Le lien concernant "),
                  _c("a", { attrs: { href: "/bestiaire/knut-svenson" } }, [
                    _vm._v("Knut Svenson")
                  ]),
                  _vm._v(" a été réparé.")
                ]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Ajout du PNJ "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/shamreta-la-rouge" } },
                      [_vm._v("Shamreta la rouge")]
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v(
                      "Ajout des illustrations pour l'Azer, l'élémentaire de feu, l'élémentaire de l'eau, l'élémentaire de l'air, l'élémentaire de la terre, l'élémentaire mineur de feu et l'esprit du feu."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Abandon du système de colonnes pour le bestiaire.")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 18 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-42" } }, [
                  _vm._v("Mise à jour 42 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-42" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Gros travail sur le site ce week end en prévision de la prochaine partie de jeu de rôle. Clovis rejoint nos rangs pour jouer Knut, un guerrier protecteur du village de Thorleik. Des illustrations et des icones ont été rajoutés pour une meilleure lisibilité. Le site s'enrichira régulièrement d'illustrations que je pioche ça et là sur pinterest. La richesse de ce site est impressionnante et les dernières productions de séries fournissent de nombreux visuels et sources d'inspiration."
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Les modifications sur le site sont les suivantes (liste non exhaustive):"
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Personnages:")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Création de "),
                    _c("a", { attrs: { href: "/bestiaire/knut-svenson" } }, [
                      _vm._v("Knut Svenson")
                    ]),
                    _vm._v(
                      " au niveau 5 avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/gwion-gornoc" } }, [
                      _vm._v("Gwion Gornoc")
                    ]),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/lochetos-vlatcano" } },
                      [_vm._v("Lochetos Vlatcano")]
                    ),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/margs-maenkalon" } }, [
                      _vm._v("Margs Maenkalon")
                    ]),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/pywed-vecconos" } }, [
                      _vm._v("Pywed Vecconos")
                    ]),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/rudolf-bernsen" } }, [
                      _vm._v("Rudolf Bernsen")
                    ]),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/sawrina-semiramis" } },
                      [_vm._v("Sawrina Semiramis")]
                    ),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/shine-hame" } }, [
                      _vm._v("Shine Hame")
                    ]),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/taron-vecconos" } }, [
                      _vm._v("Taron Vecconos")
                    ]),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/tiberius-don-alonzo" } },
                      [_vm._v("Tiberius Don Alonzo")]
                    ),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/thorleik-aevarson" } },
                      [_vm._v("Thorleik Aevarson")]
                    ),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/yan-zin" } }, [
                      _vm._v("Yan Zin")
                    ]),
                    _vm._v(
                      " avec ajouts d'icônes de paragraphes, mise en deux colonnes et illustration."
                    )
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v(
                      "Ajout d'illustrations aux objets magiques (masse d'arme vicieuse, épée courte +2 et dague assassyr'him)"
                    )
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("C'est tout pour l'instant.")]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 17 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-41" } }, [
                  _vm._v("Mise à jour 41 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-41" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Les modifications sur le site sont les suivantes (liste non exhaustive):"
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Personnages:")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Création de "),
                    _c("a", { attrs: { href: "/bestiaire/taron-vecconos" } }, [
                      _vm._v("Taron Vecconos")
                    ]),
                    _vm._v(" au niveau 9.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/margs-maenkalon" } }, [
                      _vm._v("Margs Maenkalon")
                    ]),
                    _vm._v(" au niveau 12.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/lochetos-vlatcano" } },
                      [_vm._v("Lochetos Vlatcano")]
                    ),
                    _vm._v(" au niveau 11.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/pywed-vecconos" } }, [
                      _vm._v("Pywed Vecconos")
                    ]),
                    _vm._v(" au niveau 5.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/shine-hame" } }, [
                      _vm._v("Shine Hame")
                    ]),
                    _vm._v(" au niveau 5.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/yan-zin" } }, [
                      _vm._v("Yan Zin")
                    ]),
                    _vm._v(" au niveau 6.")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 14 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-40" } }, [
                  _vm._v("Mise à jour 40 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-40" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Les modifications sur le site sont les suivantes (liste non exhaustive):"
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Personnages:")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/rudolf-bernsen" } }, [
                      _vm._v("Rudolf Bernsen")
                    ]),
                    _vm._v(" au niveau 10.")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 6 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-39" } }, [
                  _vm._v("Mise à jour 39 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-39" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Les modifications sur le site sont les suivantes (liste non exhaustive):"
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Personnages:")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/thorleik-aevarson" } },
                      [_vm._v("Thorleik Aevarson")]
                    ),
                    _vm._v(" au niveau 10.")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 3 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-38" } }, [
                  _vm._v("Mise à jour 38 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-38" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Les archétypes ont été corrigés en de nombreux endroits grâce à une relecture de Bastian pour "
                  ),
                  _c("a", { attrs: { href: "/archetypes/bhegelm" } }, [
                    _vm._v("Bhegelm")
                  ]),
                  _vm._v(", le "),
                  _c("a", { attrs: { href: "/archetypes/drodan" } }, [
                    _vm._v("Drodan")
                  ]),
                  _vm._v(", le "),
                  _c("a", { attrs: { href: "/archetypes/jorghal" } }, [
                    _vm._v("Jorghal")
                  ]),
                  _vm._v(", le "),
                  _c("a", { attrs: { href: "/archetypes/legatos" } }, [
                    _vm._v("Legatos")
                  ]),
                  _vm._v(" et le "),
                  _c("a", { attrs: { href: "/archetypes/vitnar" } }, [
                    _vm._v("Vitnar")
                  ]),
                  _vm._v(
                    ". Le site est plein d'erreur et nous en corrigeons régulièrement."
                  ),
                  _c("br"),
                  _vm._v(
                    "\nLa campagne est arrivée à un tournant et les joueurs ont gagné en puissance. La deuxième partie va pouvoir commencer. Je vous invite à lire "
                  ),
                  _c("a", { attrs: { href: "/chroniques" } }, [
                    _vm._v("les chroniques")
                  ]),
                  _vm._v(" pour découvrir leurs aventures."),
                  _c("br"),
                  _vm._v(
                    "\nLa prochaine partie de la campagne se déroulera en grande partie dans les terres du Sud, aux royaumes de Shahia et plus loin encore dans les terres Sooghaï. Ce sera l'occasion de décrire toutes ces parties du monde."
                  ),
                  _c("br"),
                  _vm._v(
                    "\nLes modifications sur le site sont les suivantes (liste non exhaustive):"
                  )
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Personnages:")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/gwion-gornoc" } }, [
                      _vm._v("Gwion Gornoc")
                    ]),
                    _vm._v(" au niveau 12.")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/sawrina-semiramis" } },
                      [_vm._v("Sawrina Semiramis")]
                    ),
                    _vm._v(" au niveau 13.")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bestiaire:")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Mise à jour de "),
                    _c("a", { attrs: { href: "/bestiaire/inexorable" } }, [
                      _vm._v("l'Inéxorable")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajour de "),
                    _c(
                      "a",
                      { attrs: { href: "/bestiaire/inexorable-superieur" } },
                      [_vm._v("l'Inéxorable supérieur")]
                    ),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Grimoire:")]),
                _vm._v(" "),
                _c("ul", [
                  _c("li", [
                    _vm._v("Correction des sorts "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/coercition-mystique" } },
                      [_vm._v("Coercition mystique")]
                    ),
                    _vm._v(", "),
                    _c("a", { attrs: { href: "/grimoire/coquille-antivie" } }, [
                      _vm._v("Coquille antivie")
                    ]),
                    _vm._v(", "),
                    _c("a", { attrs: { href: "/grimoire/nuage-puant" } }, [
                      _vm._v("Nuage puant")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/aiguiser" } }, [
                      _vm._v("Aiguiser")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/esclave" } }, [
                      _vm._v("Esclave")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/fissure" } }, [
                      _vm._v("Fissure")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/fissure-majeure" } }, [
                      _vm._v("Fissure majeure")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/fracassement" } }, [
                      _vm._v("Fracassement")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/haine" } }, [
                      _vm._v("Haine")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/jalousie" } }, [
                      _vm._v("Jalousie")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/malediction-funeste" } },
                      [_vm._v("Malédiction funeste")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/omnipresent" } }, [
                      _vm._v("Omniprésent")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/obligation-de-verite" } },
                      [_vm._v("Obligation de vérité")]
                    ),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/oubli" } }, [
                      _vm._v("Oubli")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/saignee" } }, [
                      _vm._v("Saignée")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/sombre-tentation" } }, [
                      _vm._v("Sombre tentation")
                    ]),
                    _vm._v(".")
                  ]),
                  _vm._v(" "),
                  _c("li", [
                    _vm._v("Ajout du sort "),
                    _c("a", { attrs: { href: "/grimoire/suicide" } }, [
                      _vm._v("Suicide")
                    ]),
                    _vm._v(".")
                  ])
                ]),
                _vm._v(" "),
                _c("p", [_vm._v("Bon jeu.")]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 2 octobre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-37" } }, [
                  _vm._v("Mise à jour 37 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-37" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v("Ajout des sorts "),
                  _c("a", { attrs: { href: "/grimoire/brume-d-antre" } }, [
                    _vm._v("Brume d'antre")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/grimoire/chanceux" } }, [
                    _vm._v("Chanceux")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/grimoire/etouffement" } }, [
                    _vm._v("Etouffement")
                  ]),
                  _vm._v(" et "),
                  _c("a", { attrs: { href: "/grimoire/force-des-noyes" } }, [
                    _vm._v("Force des noyés")
                  ]),
                  _vm._v(" d'après les idées d'Elric."),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 2 septembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-36" } }, [
                  _vm._v("Mise à jour 36 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-36" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v("Ajout de l'"),
                  _c("a", { attrs: { href: "/bestiaire/azer" } }, [
                    _vm._v("Azer")
                  ]),
                  _vm._v(" et de l'"),
                  _c("a", { attrs: { href: "/bestiaire/esprit-du-feu" } }, [
                    _vm._v("Esprit du feu")
                  ]),
                  _vm._v(" dans le bestiaire à la demande d'Elric."),
                  _c("br"),
                  _vm._v("\nAjout des sorts "),
                  _c("a", { attrs: { href: "/grimoire/amphore-magique" } }, [
                    _vm._v("Amphore magique")
                  ]),
                  _vm._v(" et "),
                  _c(
                    "a",
                    { attrs: { href: "/grimoire/ataxie-desafferentation" } },
                    [_vm._v("Ataxie-désafférentation")]
                  ),
                  _vm._v(" d'après les idées d'Elric."),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 1 septembre 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-35" } }, [
                  _vm._v("Mise à jour 35 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-35" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Suite à la règle du 1 qui améliore la narration du jeu, les règles des coups critiques ont été ajouté et les tables mises à jour. Nous testerons cela en réel dés demain avec le groupe.\nD'autres plantes seront ajoutées prochainement."
                  ),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 27 août 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-34" } }, [
                  _vm._v("Mise à jour 34 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-34" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c(
                  "p",
                  [
                    _vm._v(
                      "Depuis que le système des blessures graves et de leur guérison a été amélioré dans la partie "
                    ),
                    _c(
                      "RouterLink",
                      {
                        attrs: {
                          to: "/gerer-la-sante-du-personnage/#blessures-graves"
                        }
                      },
                      [_vm._v("gérer la santé du personnage")]
                    ),
                    _vm._v(
                      " , l'usage des plantes deviendra indispensable. La règle du 1 s'améliore avec l'application automatique de l'annulation du 6 en cas de 1 sur le jet d'un adversaire. Concernant le bestiaire, les valeurs de "
                    ),
                    _c(
                      "strong",
                      [
                        _c("v-icon", [_vm._v("mdi-skull-crossbones")]),
                        _vm._v(" Seuil de critique")
                      ],
                      1
                    ),
                    _vm._v(" et de "),
                    _c(
                      "strong",
                      [
                        _c("v-icon", [_vm._v("mdi-shield")]),
                        _vm._v("Valeur offensive globale")
                      ],
                      1
                    ),
                    _vm._v(
                      " sont ajoutées au fur et à mesure. L'application des blessures graves en cas de critique se précise (se référer au tableau dans la section "
                    ),
                    _c(
                      "RouterLink",
                      {
                        attrs: {
                          to: "/gerer-la-sante-du-personnage/#blessures-graves"
                        }
                      },
                      [_vm._v("gérer la santé du personnage")]
                    ),
                    _vm._v(
                      ") et désormais une condition supplémentaire apparait pour le coup critique, les trois 6 sur un jet d'attaque. D'autres plantes ont été ajoutées pour soigner les brûlures : "
                    ),
                    _c(
                      "RouterLink",
                      {
                        attrs: {
                          to: "/herbier/soins-brulures-gelures/#athalas"
                        }
                      },
                      [_vm._v("Athalas")]
                    ),
                    _vm._v(" & "),
                    _c(
                      "RouterLink",
                      {
                        attrs: { to: "/herbier/soins-brulures-gelures/#aloa" }
                      },
                      [_vm._v("Aloa")]
                    ),
                    _vm._v(".\nBon jeu.")
                  ],
                  1
                ),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 12 août 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-33" } }, [
                  _vm._v("Mise à jour 33 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-33" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c(
                  "p",
                  [
                    _vm._v(
                      "Depuis que le système des blessures graves et de leur guérison a été amélioré dans la partie "
                    ),
                    _c(
                      "RouterLink",
                      {
                        attrs: {
                          to: "/gerer-la-sante-du-personnage/#blessures-graves"
                        }
                      },
                      [_vm._v("gérer la santé du personnage")]
                    ),
                    _vm._v(
                      " , l'usage des plantes prend un peu plus son sens pour améliorer la guérison de certains maux.\nAjout dans l'herbier de plantes traitant les fractures osseuses avec l'"
                    ),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/soins-fractures/#afana" } },
                      [_vm._v("afana")]
                    ),
                    _vm._v(", roseau des zones froides, le "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/soins-fractures/#balahm" } },
                      [_vm._v("balahm")]
                    ),
                    _vm._v(", roseau des zones chaudes et humides, la "),
                    _c(
                      "RouterLink",
                      {
                        attrs: { to: "/herbier/soins-fractures/#boursselath" }
                      },
                      [_vm._v("boursselath")]
                    ),
                    _vm._v(", herbe à ingérer des zones tempérées,  l'"),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/soins-fractures/#ederlane" } },
                      [_vm._v("ederlane")]
                    ),
                    _vm._v(", plante moussue des régions froides et la "),
                    _c(
                      "RouterLink",
                      {
                        attrs: { to: "/herbier/soins-fractures/#gourthamelle" }
                      },
                      [_vm._v("gourthamelle")]
                    ),
                    _vm._v(", herbacée des zones tempérées."),
                    _c("br"),
                    _vm._v(
                      "\nJe m'inspire fortement des ressources de rolemaster qui font Référence dans le domaine."
                    ),
                    _c("br"),
                    _vm._v("\nBon jeu.")
                  ],
                  1
                ),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 06 août 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-32" } }, [
                  _vm._v("Mise à jour 32 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-32" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c(
                  "p",
                  [
                    _vm._v(
                      "Le développement du site se poursuit avec principalement la correction de liens cassés. J'ai rajouté plusieurs rubriques qui sont actuellement en test. Dans le menu, il y a désormais une rubrique "
                    ),
                    _c("a", { attrs: { href: "/inspimusic" } }, [
                      _vm._v("Inspiration musicale")
                    ]),
                    _vm._v(" et une "),
                    _c("a", { attrs: { href: "/chronologie" } }, [
                      _vm._v("chronologie")
                    ]),
                    _vm._v(
                      ".\nLe système des blessures graves et de leur guérison a été amélioré dans la partie "
                    ),
                    _c(
                      "RouterLink",
                      {
                        attrs: {
                          to: "/gerer-la-sante-du-personnage/#blessures-graves"
                        }
                      },
                      [_vm._v("gérer la santé du personnage")]
                    ),
                    _vm._v(". Les "),
                    _c("a", { attrs: { href: "/poisons" } }, [
                      _vm._v("poisons")
                    ]),
                    _vm._v(
                      " ont aussi été revisités et seront complétés dans les jours à venir.\nBon jeu."
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 30 juillet 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-31" } }, [
                  _vm._v("Mise à jour 31 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-31" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c(
                  "p",
                  [
                    _vm._v("Le développement de l'Archétype du "),
                    _c("RouterLink", { attrs: { to: "/archetypes/sorser/" } }, [
                      _vm._v("Sorser")
                    ]),
                    _vm._v(
                      " se poursuit doucement et les idées viennent se rajouter progressivement. Elric travaille sur des sorts et a proposé un nouvel Archétype très intéressant mais que je dois ajuster. Georges amène son renfort pour la rédaction de la chronique qui me prenait vraiment beaucoup de temps. Quant à la version papier, je ne désespère pas. J'ai même repris espoir grâce aux compétences de Jordan qui a rédigé un script qui va me permettre d'extraire les pages de mon site. Le gain de temps et la maintenance des versions s'en trouveront facilités."
                    ),
                    _c("br"),
                    _vm._v("\nAjout des sorts  "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/convocation-aigle" } },
                      [_vm._v("Convocation d'un aigle")]
                    ),
                    _vm._v(", "),
                    _c(
                      "a",
                      { attrs: { href: "/grimoire/convocation-chouette" } },
                      [_vm._v("Convocation d'une chouette")]
                    ),
                    _vm._v(", "),
                    _c("a", { attrs: { href: "/grimoire/convocation-rat" } }, [
                      _vm._v("Convocation d'un rat")
                    ]),
                    _vm._v(".\nAjout dans le bestiaire du "),
                    _c("a", { attrs: { href: "/bestiaire/ver-piqueur" } }, [
                      _vm._v("Ver piqueur")
                    ]),
                    _vm._v(
                      ".\nAjout dans l'herbier d'une liste d'antidote comme l'"
                    ),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/antidotes/#asgarbie" } },
                      [_vm._v("asbargie")]
                    ),
                    _vm._v(
                      ", un puissant antidote contre les poisons musculaires,  l'"
                    ),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/antidotes/#elheanung" } },
                      [_vm._v("elheanung")]
                    ),
                    _vm._v(", antidote contre les poisons de réduction, le "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/antidotes/#menelath" } },
                      [_vm._v("menelath")]
                    ),
                    _vm._v(", antidote contre les poisons circulatoirs, la "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/antidotes/#mokht" } },
                      [_vm._v("baie de mokht")]
                    ),
                    _vm._v(", antidote contre les poisons respiratoires, la "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/antidotes/#quilum" } },
                      [_vm._v("racine de quilum")]
                    ),
                    _vm._v(
                      ", antidote contre les poisons de conversion et le "
                    ),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/antidotes/#ul-thazah" } },
                      [_vm._v("ul'thazah")]
                    ),
                    _vm._v(", antidote universel à haute capacité addictive."),
                    _c("br"),
                    _vm._v(
                      "\nAjout dans l'herbier de plantes qui soignent les os avec  "
                    ),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/soins-fractures/#afana" } },
                      [_vm._v("la tige d'afana")]
                    ),
                    _vm._v(", la "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/herbier/soins-fractures/#balahm" } },
                      [_vm._v("mixture de balahm")]
                    ),
                    _vm._v(".\nAjout des règles d'"),
                    _c("RouterLink", { attrs: { to: "/herbier/#addiction" } }, [
                      _vm._v("addiction")
                    ]),
                    _vm._v(" aux plantes."),
                    _c("br"),
                    _vm._v("\nBon jeu.")
                  ],
                  1
                ),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 29 juillet 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-30" } }, [
                  _vm._v("Mise à jour 30 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-30" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "En cette période si particulière, avec les contraintes sanitaires et les aléas climatiques, je vous souhaite tout de même un bel été. De nombreux ajustements au jeu ont été effectués et des corrections apportées au fur et à mesure de la découvertes d'erreur.La voie de la magie a été remaniée pour une plus grande cohérence avec l'usage de la magie et insister sur la différence entre les utilisateurs de la magie de cette voie et de celles des autres voies."
                  ),
                  _c("br"),
                  _vm._v(
                    "\nLa campagne de jeu continue et je souhaite remercier mes joueurs pour leur investissement, particulièrement Bastian, Georges et Elric qui m'aident à ajouter des contenus régulièrement."
                  ),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 25 juillet 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-29" } }, [
                  _vm._v("Mise à jour 29 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-29" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Voici les derniers ajouts dont le Sorser qui avance doucement mais qui n'est pas du tout terminé.\nAjout dans le bestiaire de l'"
                  ),
                  _c("a", { attrs: { href: "/bestiaire/ame-en-peine" } }, [
                    _vm._v("âme en peine")
                  ]),
                  _vm._v(","),
                  _c("a", { attrs: { href: "/bestiaire/goule" } }, [
                    _vm._v("Goule")
                  ]),
                  _vm._v(" et le "),
                  _c("a", { attrs: { href: "/bestiaire/fantome" } }, [
                    _vm._v("Fantome")
                  ]),
                  _vm._v(" et dans le grimoire le sort "),
                  _c("a", { attrs: { href: "/grimoire/douleur-nerveuse" } }, [
                    _vm._v("Douleur nerveuse")
                  ]),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 18 juin 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-28" } }, [
                  _vm._v("Mise à jour 28 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-28" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Je travaille actuellement sur un nouvel Archétype magique puissant, le Sorser, dont l'un des plus connus a été Morringer."
                  ),
                  _c("br"),
                  _vm._v("\nDans le bestiaire, ajout du "),
                  _c("a", { attrs: { href: "/bestiaire/spectre" } }, [
                    _vm._v("Spectre")
                  ]),
                  _vm._v("."),
                  _c("br"),
                  _vm._v("\nJ'ai aussi ajouté de nouveaux sorts : "),
                  _c(
                    "a",
                    { attrs: { href: "/grimoire/invoquer-les-fantomes" } },
                    [_vm._v("invoquer les fantômes")]
                  ),
                  _vm._v(", "),
                  _c(
                    "a",
                    { attrs: { href: "/grimoire/puissance-guerriere" } },
                    [_vm._v("Puissance guerrière")]
                  ),
                  _vm._v(","),
                  _c("a", { attrs: { href: "/grimoire/brise-os" } }, [
                    _vm._v("Brise os")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/grimoire/brulure-de-l-ame" } }, [
                    _vm._v("Brûlure de l'âme")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/grimoire/brulure-de-la-peau" } }, [
                    _vm._v("Brûlure de la peau")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/grimoire/cauchemars" } }, [
                    _vm._v("Cauchemars")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/grimoire/chaines-mentales" } }, [
                    _vm._v("Chaînes mentales")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/grimoire/crainte" } }, [
                    _vm._v("Crainte")
                  ]),
                  _vm._v(",\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 14 juin 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-27" } }, [
                  _vm._v("Mise à jour 27 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-27" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Vous trouverez en mise à jour l'ajout de l'Archétype du "
                  ),
                  _c("a", { attrs: { href: "/archetypes/jorghal" } }, [
                    _vm._v("Jörghal")
                  ]),
                  _vm._v(
                    ", un terrible champion melg au service de son Rolf. La chronique a aussi été mise à jour depuis la dernière partie du 5 juin.\nBon jeu."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 11 juin 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-26" } }, [
                  _vm._v("Mise à jour 26 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-26" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "J'ai ajouté la description de Dinas Mor-leidr dans la section de l'atlas de Douaratil. Les chroniques ont été mises aussi à jour, nous voici désormais en Miz Even. Les terribles Ur'hs sont venus garnir le bestiaire. Les joueurs ne tarderont pas à rencontrer ces étranges tribus primitives des forêts profondes et des monts du Menezlatar."
                  ),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 2 juin 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-25" } }, [
                  _vm._v("Mise à jour 25 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-25" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "J'ai ajouté quelques nouveaux sorts forts utiles qui sont "
                  ),
                  _c("a", { attrs: { href: "/grimoire/murmure-aquatique" } }, [
                    _vm._v("Murmure aquatique")
                  ]),
                  _vm._v(", "),
                  _c(
                    "a",
                    {
                      attrs: { href: "/grimoire/sacrement-de-l-arbre-fruitier" }
                    },
                    [_vm._v("Sacrement de l'arbre fruitier")]
                  ),
                  _vm._v(", "),
                  _c(
                    "a",
                    { attrs: { href: "/grimoire/souffle-du-messager" } },
                    [_vm._v("Souffle du messager")]
                  ),
                  _vm._v("."),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 2 juin 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-24" } }, [
                  _vm._v("Mise à jour 24 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-24" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Le panthéon des dieux primaires, inventés par Elric, est enfin terminé avec l'arrivée de son dernier bébé "
                  ),
                  _c("a", { attrs: { href: "/bestiaire/emhyhruigdrux" } }, [
                    _vm._v("Emhyhruigdrux")
                  ]),
                  _vm._v(". J'en ai profité pour réorganiser la pages des "),
                  _c("a", { attrs: { href: "/dieux-divinites" } }, [
                    _vm._v("dieux et des divnités")
                  ]),
                  _vm._v(
                    " et y déplacer les mythes khernaës et Oynours. Je décrierai leurs divinité techniquement plus tard."
                  ),
                  _c("br"),
                  _vm._v("\nJ'ai rajouté une page "),
                  _c("a", { attrs: { href: "/FAQ" } }, [
                    _vm._v("questions fréquentes")
                  ]),
                  _vm._v(". Je la complèterai au fur et à mesure."),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 1 juin 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-23" } }, [
                  _vm._v("Mise à jour 23 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-23" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Le panthéon des dieux primaires, inventés par Elric, a été complété en ligne avec l'ajout du dieu "
                  ),
                  _c("a", { attrs: { href: "/bestiaire/lhaothlastholo" } }, [
                    _vm._v("Lhaothlastholo")
                  ]),
                  _vm._v(
                    ", Dieu des prophéties, des malédictions, des bénédictions et des secrets et de la déesse "
                  ),
                  _c("a", { attrs: { href: "/bestiaire/vhaxrrixz" } }, [
                    _vm._v("Vhaxrrixz")
                  ]),
                  _vm._v(
                    ", Déesse de la vérité, des rêves et des choix.\nL'herbier (section plantes) a été aussi complétée en ajoutant une modulation des DD de difficulté de cueillette suivant les saisons."
                  ),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 31 mai 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-22" } }, [
                  _vm._v("Mise à jour 22 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-22" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c(
                  "p",
                  [
                    _vm._v(
                      "Voici les en gros les dernières nouvelles. Je vais sûrement en oublier car il y a eu beaucoup de choses ce mois-ci."
                    ),
                    _c("br"),
                    _vm._v(
                      "\nCréation d'une page de règles optionnelles sur le "
                    ),
                    _c("RouterLink", { attrs: { to: "/commerce/" } }, [
                      _vm._v("commerce")
                    ]),
                    _vm._v(" d'après une idée de Georges."),
                    _c("br"),
                    _vm._v("\nCréation d'une page sur les "),
                    _c("RouterLink", { attrs: { to: "/dieux-divinites/" } }, [
                      _vm._v("Dieux, divinités & autres forces")
                    ]),
                    _vm._v(
                      " et dans le bestiaire avec l'arrivée de puissantes (divine?) aberrations telle "
                    ),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/bestiaire/darthentrhui/" } },
                      [_vm._v("Darthentrhui")]
                    ),
                    _vm._v(", "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/bestiaire/khoulggotateelle/" } },
                      [_vm._v("Khoulggotateelle")]
                    ),
                    _vm._v(", "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/bestiaire/sathyakurm-de/" } },
                      [_vm._v("Sathyakurm’de")]
                    ),
                    _vm._v(",  "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/bestiaire/shandoth/" } },
                      [_vm._v("Shandoth")]
                    ),
                    _vm._v(" et  "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/bestiaire/sheggothlil/" } },
                      [_vm._v("Sheggothlil")]
                    ),
                    _vm._v("."),
                    _c("br"),
                    _vm._v(
                      "\nUne nouvelle section est apparue dans le menu du monde de douaratil pour décrire les peuples, avec la description du peuple "
                    ),
                    _c("RouterLink", { attrs: { to: "/peuples/oynours/" } }, [
                      _vm._v("Oynours")
                    ]),
                    _vm._v(
                      " d'après une libre interprétation des peuples des steppes de David et la description du peuple "
                    ),
                    _c("RouterLink", { attrs: { to: "/peuples/khernaes/" } }, [
                      _vm._v("Khernaë")
                    ]),
                    _vm._v("."),
                    _c("br"),
                    _vm._v(
                      "\nSur le front des Archétypes de personnages, la description du "
                    ),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/archetypes/sohoten/" } },
                      [_vm._v("Sohoten")]
                    ),
                    _vm._v(" et la révision en profondeur du "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/archetypes/dall-dawnser/" } },
                      [_vm._v("Dall Dawnser")]
                    ),
                    _vm._v(". J'ai procédé aussi à quelques retouches du "),
                    _c(
                      "RouterLink",
                      { attrs: { to: "/archetypes/seibahkami/" } },
                      [_vm._v("Seibahkami")]
                    ),
                    _vm._v("."),
                    _c("br"),
                    _vm._v(
                      '\nEt pour rendre à César ce qui lui revient, Em-squared est intervenu sur le site (après des essais infructueux de ma part) pour permettre d\'afficher les "sources" sur les pages standards. Les auteurs qui sont publiés ne seront plus oubliés.'
                    ),
                    _c("br"),
                    _vm._v("\nBon jeu.")
                  ],
                  1
                ),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 27 mai 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-21" } }, [
                  _vm._v("Mise à jour 21 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-21" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Le site avance régulièrement même si je ne communique pas forcément sur chaque détail. Les règles de patrimoine et de gestion des familles sont maintenant bien intégrées par mes joueurs et cela rajoute vraiment dans les projets et les plans qu'ils élaborent. La campagne continue son cours et prend des allures dramatiques.\nCôté des règles, vous trouverez sous peu l'archétype Yotakaï du Sohoten et Khernaëe de la Sermazloth.\nBon jeu."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(",\n"),
                    _c("em", [_vm._v("le 16 mai 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-20" } }, [
                  _vm._v("Mise à jour 20 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-20" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Des semaines plus chargées et le retour des beaux jours laissent moins de temps pour le site. Je travaille (enfin surtout lui pour l'instant) avec le joueur de Rudolf pour la création d'une feuille de personnage éditable. J'ai mis en ligne une feuille de personnage réellement vide car elle n'était pas utilisable en l'espèce."
                  ),
                  _c("br"),
                  _vm._v(
                    "\nDans la section de la gestion de la santé des personnages, la section localisation des blessures a été réorganisée en tableau."
                  ),
                  _c("br"),
                  _vm._v(
                    "\nEnfin, côté vie privée, les cookies de navigation google analytics ont été retirés. Seuls les cookies nécessaire à la navigation du site on été gardé et le message d'accueil a été mis à jour en ce sens."
                  ),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 27 mars 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-19" } }, [
                  _vm._v("Mise à jour 19 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-19" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Une nouvelle page est en cours de construction et proposera des règles pour gérer les "
                  ),
                  _c("a", { attrs: { href: "/batailles" } }, [
                    _vm._v("batailles")
                  ]),
                  _vm._v(
                    ". Parmi les ajouts, un nouvel Archétype de la culture alcante est désormais disponible : le "
                  ),
                  _c("a", { attrs: { href: "/archetypes/legatos" } }, [
                    _vm._v("Legatos")
                  ]),
                  _vm._v(
                    ". Ce type de personnage aura une grande influence et parlera avec autorité."
                  ),
                  _c("br"),
                  _vm._v("\nCôté PJ, le personnage "),
                  _c("a", { attrs: { href: "/bestiaire/malala-soa" } }, [
                    _vm._v("Malala Soa")
                  ]),
                  _vm._v(" a été enfin décrit.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 14 mars 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-18" } }, [
                  _vm._v("Mise à jour 18 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-18" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "La page de gestion des domaines est désormais en ligne. Elle permettra aux joueurs qui le désirent, d'approfondir le background et l'enracinement dans le monde de Douaratil. Evidemment, ce type de mécanisme de jeu s'intègre parfaitement dans une campagne. Elle est particulièrement adaptée pour intriguent politiques et donnera plus de profondeur au personnage du joueurs. Bonne découverte et bon jeu."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 6 mars 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-17" } }, [
                  _vm._v("Mise à jour 17 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-17" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "J'ai fait le compte. Le site contient désormais 342 sorts avec la fournée de Gwion, très inspiré en se moment. Je vais mettre à jour la Chronique (j'ai pris un peu de retard) mais le mois de Favros est fini. Je terminerai la section sur la gestion des domaines demain. En attendant : Bon jeu."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 4 mars 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-16" } }, [
                  _vm._v("Mise à jour 16 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-16" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "L'ajout de tous les sorts \"classiques\" est désormais terminé. Les suivants seront réellement des nouveautés. J'ai rajouté sur certains sorts une option \"sources\" pour y mettre le nom des auteurs car jusqu'à maintenant, ils étaient anonymes alors que Gwion a beaucoup participé, ainsi que Lôchetos pour un sort. C'est chose réparée. La Chronique de Favros se termine et s'ouvre sur un nouveau mois : Miz Morz.\nBon jeu."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 2 mars 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-15" } }, [
                  _vm._v("Mise à jour 15 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-15" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v("Les "),
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "/passion-honneur-et-interactions-sociales"
                      }
                    },
                    [_vm._v("règles d'honneur")]
                  ),
                  _vm._v(
                    ' ont été complétées afin de pouvoir engager enfin des affrontements sociaux et introduisant ainsi de nouvelles mécaniques de gameplay. Les règles de gestion du Domaine, du "Housing" devraient suivre. Les chroniques ont d\'autre part été mises à jour avec les évènements de '
                  ),
                  _c("a", { attrs: { href: "/chroniques/miz-favros-721" } }, [
                    _vm._v("Miz Favros")
                  ]),
                  _vm._v(". C'est aussi l'arrivée d'un nouvel archétype : la "),
                  _c("a", { attrs: { href: "/archetypes/furtane" } }, [
                    _vm._v("Fürtane")
                  ]),
                  _vm._v(". La description d'un nouveau PNJ, "),
                  _c("a", { attrs: { href: "/bestiaire/shamash-eriba" } }, [
                    _vm._v("Shamash Eriba")
                  ]),
                  _vm._v(
                    " a été ajoutée au Bestiaire:  un futur adversaire ou allié?"
                  ),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 27 février 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-14" } }, [
                  _vm._v("Mise à jour 14 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-14" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Le menu de gauche du site a été réorganisé et de sliens manquant ont été rajoutés. J'ai souhaité regrouper certaines catégories pour plus de lisibilité."
                  ),
                  _c("br"),
                  _vm._v("\nDu côté des règles, une page sur la gestion de l'"),
                  _c("a", { attrs: { href: "/experience" } }, [
                    _vm._v("expérience")
                  ]),
                  _vm._v(
                    " a été rédigée. D'autre part, grâce à l'oeil attentif de "
                  ),
                  _c("a", { attrs: { href: "/bestiaire/gwion-gornoc" } }, [
                    _vm._v("Gwion")
                  ]),
                  _vm._v(
                    ", de nombreuses erreurs du grimoire ont été corrigées, notamment dans la classification de certains sorts et leur coût en Magie ou en Foi. Dans les heures qui viennent, les chroniques devraient être mises à jour."
                  ),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 19 février 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-13" } }, [
                  _vm._v("Mise à jour 13 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-13" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Un mois beaucoup plus calme qui a aussi permis de faire une petite pause. jous avons appris avec tristesse la fin de la gamme H&D suite à un conflit commercial avec Wotc. Le projet n'est pas impacté normalement et je continuerais, avec mes joueurs, de développer le monde de Douaratil.  De nouveaux personnages sont intégrés dans le bestiaire. je vous invite ainsi à chercher "
                  ),
                  _c("a", { attrs: { href: "/bestiaire/gwion-gornoc" } }, [
                    _vm._v("Gwion")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/bestiaire/lochetos-vlatcano" } }, [
                    _vm._v("Lôchetos")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/bestiaire/margs-maenkalon" } }, [
                    _vm._v("Margs")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/bestiaire/rudolf-fareg" } }, [
                    _vm._v("Rudolf")
                  ]),
                  _vm._v(", "),
                  _c("a", { attrs: { href: "/bestiaire/sawrina-semiramis" } }, [
                    _vm._v("Sawrina")
                  ]),
                  _vm._v(", "),
                  _c(
                    "a",
                    { attrs: { href: "/bestiaire/tiberius-don-alonzo" } },
                    [_vm._v("Tiberius")]
                  ),
                  _vm._v(" & "),
                  _c("a", { attrs: { href: "/bestiaire/yan-zin" } }, [
                    _vm._v("Yan Zin")
                  ]),
                  _vm._v(", dans la barre des tâches."),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 18 février 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-12" } }, [
                  _vm._v("Mise à jour 12 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-12" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Cette semaine a été chargée et la mise à jour du site en a un peu souffert. Le 23 janvier, une partie de Douaratil s'est déroulée avec mon groupe de joueur habituel. Cela a été l'occasion d'explorer de nouveaux mécanismes de jeu. Le bestiaire va s'enrichir des PNJ qui apparaissent dans la chronique mais aussi des PJ qui seront mis à jour au fur et à mesure de leur progression. Des exemples sont disponibles dans le bestiaire avec la belle "
                  ),
                  _c("a", { attrs: { href: "/bestiaire/morwenna-moisan" } }, [
                    _vm._v("Morwena Moisan")
                  ]),
                  _vm._v(" et le beau "),
                  _c("a", { attrs: { href: "/bestiaire/owain-macaro" } }, [
                    _vm._v("Owain Macaro")
                  ]),
                  _vm._v(". Le village de "),
                  _c(
                    "a",
                    { attrs: { href: "/atlas-du-monde/douaratil/caohaydhan" } },
                    [_vm._v("caohaydhan")]
                  ),
                  _vm._v(" a été détaillé."),
                  _c("br"),
                  _vm._v("\nDe nouvelles règles de "),
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "/passion-honneur-et-interactions-sociales"
                      }
                    },
                    [_vm._v("passion, honneur & interactions sociales")]
                  ),
                  _vm._v(" sont en cours d'élaboration."),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 30 janvier 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-11" } }, [
                  _vm._v("Mise à jour 11 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-11" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "La conversion des sorts continue et c'est désormais 181 sorts qui sont disponibles. Certains choix sont délicats car je dois évincer certains sorts amusants mais qui ne sont pas dans l'esprit du monde de Douaratil. Un nouvel Archétype est désormais aussi disponible : Le Ior. Il s'agit d'un guerrier berserk du peuple meldète. Ce sera un allié ou un adversaire redoutable."
                  ),
                  _c("br"),
                  _vm._v("\nBon jeu.")
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 20 janvier 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-10" } }, [
                  _vm._v("Mise à jour 10 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-10" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "J'ai rajouté quelques sorts aux site pour un total désormais de 77 et trois nouvelles bêtes (le Malaak, le Mandrill des Montagnes & l'ours charognard) pour un total de 97 adversaires.\nBon jeu."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 15 janvier 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-9" } }, [
                  _vm._v("Mise à jour 9 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-9" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Le site continue progressivement de s'enrichir. Les règles des sorts ont été précisées. Désormais, 59 sorts sont convertis pour les rats de bibliothèque. Pour les défis, c'est aussi 94 adversaires (des bêtes et des monstres pour le moment) qui ont été convertis avec l'ajout pour certains de descriptions."
                  ),
                  _c("br"),
                  _vm._v(
                    "\nC'est aussi l'ajout de la carte du monde de Douaratil : en 8K s'il vous plait. Cette carte est amenée à être complétée, elle sera mise à jour régulièrement.\nA bientôt pour plus de nouvelles et prenez soin de vous."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 7 janvier 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-8" } }, [
                  _vm._v("Mise à jour 8 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-8" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "En ce début d'année, les bonnes résolutions sont de mises. En ce sens, j'ai bien l'intention de continuer à m'investir pour ce site, pour mes joueurs et pour toutes les personnes qui pourraient être intéressées par le monde de Douaratil. Je dois aussi terminer le 4° roman de Douaratil. J'avais repris l'écriture de ce projet qui a une allure de serpent de mer (on en parle mais on ne le voit jamais) et je devais terminer fin 2020. Ce sera pour 2021.\nCe matin, sur les explications judicieuses d'Em-squared, j'ai pu régler un point bloquant pour le bestiaire. Les créatures vont donc commencer à arriver sur le site et de nouveaux sorts seront ajoutés prochainement.\nA bientôt."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 7 janvier 2021")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-7" } }, [
                  _vm._v("Mise à jour 7 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-7" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Le projet de ce site est encore jeune mais permet déjà d'être utilisé. Je remercie encore Em-squared pour le travail effectué et je vous invite évidemment à visiter le site original "
                  ),
                  _c(
                    "a",
                    {
                      attrs: {
                        href: "https://heros-et-dragons.fr/",
                        target: "_blank",
                        rel: "noopener noreferrer"
                      }
                    },
                    [_vm._v("Héros & Dragons DRS"), _c("OutboundLink")],
                    1
                  ),
                  _vm._v("."),
                  _c("br"),
                  _vm._v(
                    "\nLe site de Douaratil s'est étoffé de nombreux Archétypes et de Sorts. Chaque nouvelle rubrique est l'occasion de faire des ajustements, des modifications aussi dans le code des pages. Je remercie d'ailleurs toujours le même,  Em-squared pour le support régulier qu'il m'accorde pour compenser les lacunes informatiques."
                  ),
                  _c("br"),
                  _vm._v(
                    "\nLa prochaine grande étape est la modification du bestiaire, car les règles modifient quelques mécanismes et je dois pour cela une nouvelle fois retourner dans le code. Je vous souhaite donc une bonne fin d'année, avec plein d'espérance pour la nouvelle année qui se prépare. A l'année prochaine."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 31 décembre 2020")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-6" } }, [
                  _vm._v("Mise à jour 6 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-6" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c(
                  "p",
                  [
                    _vm._v(
                      "Ces derniers jours ont été l'occasion d'ajouter des "
                    ),
                    _c("RouterLink", { attrs: { to: "/archetypes/" } }, [
                      _vm._v("archétypes")
                    ]),
                    _vm._v(
                      " sur le site (Astartes, Bhaner, Bhegelm & Gwylwir). Dans la rubrique "
                    ),
                    _c("RouterLink", { attrs: { to: "/grimoire/" } }, [
                      _vm._v("grimoire")
                    ]),
                    _vm._v(
                      " ont été ajoutés treize nouveaux sorts mineurs originaux inventés par Elric (Air magique, appel de la pluie, atmosphère électrique, atmosphère vertueuse, boussole mentale, charge d'épée, coup de poing de cuivre, déperlance, main au fer blanc, main de l'air, miroir du Douargwar, poing purificateur & torche). Enfin, une rubrique "
                    ),
                    _c("RouterLink", { attrs: { to: "/chroniques/" } }, [
                      _vm._v("chroniques")
                    ]),
                    _vm._v(
                      " a été ajoutée et raconte les aventures des aventuriers qui parcourent actuellement le monde de Douaratil dans une partie maîtrisée par votre serviteur."
                    )
                  ],
                  1
                ),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 22 décembre 2020")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-5" } }, [
                  _vm._v("Mise à jour 5 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-5" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v("Les rubrique "),
                  _c("a", { attrs: { href: "/voies" } }, [
                    _vm._v("Les trois Voies")
                  ]),
                  _vm._v(" sont maintenant complètes et la description des "),
                  _c("a", { attrs: { href: "/archetypes" } }, [
                    _vm._v("Archétypes")
                  ]),
                  _vm._v(
                    " a débuté pour une plus grande personnalisation des personnages au-delà du niveau 3. Globalement, toute la section joueur est désormais utilisable et des éléments comme les sorts seront ajoutées au fur et à mesure. Il a fallut faire quelques aménagements sur le site, particulièrement concernant le grimoire et je n'y serais pas arrivé sans l'aide du créateur de ce site Em-Squared, l'auteur du site Héros & Dragons DRS https://heros-et-dragons.fr . Il m'a aidé sur le plan technique et je profite pour le remercier de son temps et de sa patience."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 20 décembre 2020")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-4" } }, [
                  _vm._v("Mise à jour 4 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-4" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v("La rubrique "),
                  _c("a", { attrs: { href: "/personnalite-et-historique" } }, [
                    _vm._v("personnalités & historiques")
                  ]),
                  _vm._v(
                    " est maintenant complète avec l'ajout de: Mercenaire, Militaire, Miséreux, Noblesse d'épée, Noblesse de robe, Offcier, Orphelin, Palefrenier, Patrouilleur, Précepteur, Pilleur de ruines, Pirates, Prédicateur, Rebouteux, Repenti, Saltimbanque, Sang-bleu, Serveur, Solitaire, Trappeur, Vagabond, Villageois et voleur à la tire.\nLa rubrique "
                  ),
                  _c("a", { attrs: { href: "/voies" } }, [
                    _vm._v("Les trois Voies")
                  ]),
                  _vm._v(
                    "présente les voies de départ des personnages qui vont profondément influer sur le style de jeu du personnage avec le choix de son Archétype au niveau 3."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 13 décembre 2020")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-3" } }, [
                  _vm._v("Mise à jour 3 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-3" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v("La rubrique "),
                  _c("a", { attrs: { href: "/personnalite-et-historique" } }, [
                    _vm._v("personnalités & historiques")
                  ]),
                  _vm._v(
                    " continue de s'étoffer avec l'ajout de : Bandit de grand chemin, Bâtard, du Brigand, Cambrioleur, Chasseur, Colporteur, Commerçant, Cuisinier, Crapule, Dévot, Eclaireur"
                  ),
                  _c("br"),
                  _vm._v(
                    "\nErmite, Erudit, Escroc, Explorateur, Garde, Gardien tribal, Gens du voyage, Guide, Homme de loi, Homme-médecine, Initié, Inquisiteur, Itinérant, Journalier, Juriste, Laboureur, Limier, Manouvrier, Matelot, Médecin, Membre de guilde, Mendiant.\nLa rubrique va être rapidement complétée et finalisée."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 12 décembre 2020")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-2" } }, [
                  _vm._v("Mise à jour 2 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-2" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Le site se met lentement en place. Le spremières partie concernant la création du personnage, au delà du niveau 1 sont disponibles. Je travaille actuellement sur la partie des "
                  ),
                  _c("a", { attrs: { href: "/personnalite-et-historique" } }, [
                    _vm._v("personnalités & historiques")
                  ]),
                  _vm._v(
                    ". Ont été ajoutés l'Artisan, l'artisan local et l'assassin."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 11 décembre 2020")])
                  ])
                ]),
                _vm._v(" "),
                _c("h2", { attrs: { id: "mise-a-jour-1" } }, [
                  _vm._v("Mise à jour 1 "),
                  _c(
                    "a",
                    {
                      staticClass: "header-anchor",
                      attrs: { href: "#mise-a-jour-1" }
                    },
                    [
                      _c("i", {
                        staticClass: "v-icon notranslate mdi mdi-link-variant"
                      })
                    ]
                  )
                ]),
                _vm._v(" "),
                _c("p", [
                  _vm._v(
                    "Voici que je me lance dans ce grand projet de mettre en ligne les règles du jeu de Douaratil. C'est pour moi un défi technique et l'occasion de partager mon jeu et mon univers. Tout d'abord, je dois préciser que le jeu Douaratil est l'adaptation de mes romans Douaratil et de son univers de jeu. Il est basé sur le corpus de DD5 et de sa version française H&D. Cependant, de profond changement du système et des mécaniques de jeu ne permet pas de rendre compatible avec ce qui existe déjà. Je dois donc suivre mon propre chemin et renoncer à une communauté sympathique et active qui existe déjà. Je ne prétend pas inventer un système original car c'est le résultat de mon expérience de joueur et des jeux que j'ai pu pratiquer ou lire: rolemaster, D&D, Pendragon, H&D, Les 5 royaumes et autres.\nCe site est surtout possible grâce au travail d'Em-squared qui l'a construit de toutes pièces, je ne fais que modifier la structure."
                  )
                ]),
                _vm._v(" "),
                _c("div", { staticClass: "text-right" }, [
                  _c("p", [
                    _c("em", [_c("strong", [_vm._v("Olivier")])]),
                    _vm._v(","),
                    _c("br"),
                    _vm._v(" "),
                    _c("em", [_vm._v("le 8 décembre 2020")])
                  ])
                ])
              ])
            ],
            1
          )
        ],
        1
      )
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}