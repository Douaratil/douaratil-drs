{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/archetypes/sohoten/README.md?vue&type=template&id=0916958a&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/archetypes/sohoten/README.md","mtime":1640161622040},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":1640785878621},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640785880897},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":1640785878621},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":1640785880897},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":1640785878349}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJzb2hvdGVuIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlNvaG90ZW4gIiksCiAgICAgICAgX2MoImEiLCB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjc29ob3RlbiIgfSB9LCBbCiAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZXZvbHV0aW9uLWR1LXNvaG90ZW4iIH0gfSwgWwogICAgICAgIF92bS5fdigiw4l2b2x1dGlvbiBkdSBTb2hvdGVuICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2V2b2x1dGlvbi1kdS1zb2hvdGVuIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0YWJsZSIsIFsKICAgICAgICBfYygidGhlYWQiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0aCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIk5pdmVhdSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiQXB0aXR1ZGVzIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInRib2R5IiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjMiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI211ci1kZS1ib2lzIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiTXVyIGRlIGJvaXMiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjQiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2NvdXJzZS1kYW5zLWxlcy1hcmJyZXMiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDb3Vyc2UgZGFucyBsZXMgYXJicmVzIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCI1IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNlc3F1aXZlLWludHVpdGl2ZSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkVzcXVpdmUgaW50dWl0aXZlICgxKSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiNyIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjY291cC1kaXN0YW50IiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiQ291cCBkaXN0YW50IChwb3J0w6llIGRvdWJsw6llKSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiOSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjbWFpdHJpc2UtZGUtbGEtY29uY2VudHJhdGlvbiIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIk1hw650cmlzZSBkZSBsYSBjb25jZW50cmF0aW9uIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIxMCIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjZXNxdWl2ZS1pbnR1aXRpdmUiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJFc3F1aXZlIGludHVpdGl2ZSAoMikiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjEzIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNmZXUtaW50ZXJpZXVyIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiRmV1IGludMOpcmlldXIiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjE0IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNjb3VwLWRpc3RhbnQiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDb3VwIGRpc3RhbnQgKHBvcnTDqWUgdHJpcGzDqWUpIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIxNSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjZXNxdWl2ZS1pbnR1aXRpdmUiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJFc3F1aXZlIGludHVpdGl2ZSAoMykiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjE5IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNlc3F1aXZlLWludHVpdGl2ZSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkVzcXVpdmUgaW50dWl0aXZlICg0KSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMjAiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3Zlcml0YWJsZS1zb2hvdGVuIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiVsOpcml0YWJsZSBTb2hvdGVuIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhcHRpdHVkZXMtZC1hcmNoZXR5cGUiIH0gfSwgWwogICAgICAgIF92bS5fdigiQXB0aXR1ZGVzIGQnQXJjaMOpdHlwZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhcHRpdHVkZXMtZC1hcmNoZXR5cGUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkVuIHRhbnQgcXVlIFNvaG90ZW4sIHZvdXMgYsOpbsOpZmljaWV6IGRlcyBhcHRpdHVkZXMgZCdBcmNow6l0eXBlIHN1aXZhbnRlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJtYWl0cmlzZXMiIH0gfSwgWwogICAgICAgIF92bS5fdigiTWHDrnRyaXNlcyAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNtYWl0cmlzZXMiIH0gfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQXJtdXJlcyIpXSksCiAgICAgICAgX3ZtLl92KCIgOiBhcm11cmVzIGzDqWfDqHJlcyIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJBcm1lcyIpXSksCiAgICAgICAgX3ZtLl92KCIgOiBCw6J0b24gKEJvdGVuICYgTmFjaG90ZW4pIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk91dGlscyIpXSksCiAgICAgICAgX3ZtLl92KCIgOiBDYWxsaWdyYXBoaWUuIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkpldHMgZGUgc2F1dmVnYXJkZSIpXSksCiAgICAgICAgX3ZtLl92KCIgOiBEZXh0w6lyaXTDqSwgQ29uc3RpdHV0aW9uLiIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJDb21ww6l0ZW5jZXMiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgOiBjaG9pc2lzc2V6IHRyb2lzIGNvbXDDqXRlbmNlcyBwYXJtaSBsZXMgc3VpdmFudGVzIDogQWNyb2JhdGllLCBBcmNhbmVzLCBBdGhsw6l0aXNtZSwgRHJlc3NhZ2UsIGVzY2Ftb3RhZ2UsIFBlcmNlcHRpb24sIFJlbGlnaW9uIGV0IFJlcHLDqXNlbnRhdGlvbi4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ29uZGl0aW9ucyBkJ2FjY2Vzc2liaWxpdMOpIildKSwKICAgICAgICBfdm0uX3YoIjogw4p0cmUgZGUgY3VsdHVyZSBZb3Rha2HDry4iKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiUG9pbnRzIGRlIE1hZ2llIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiwqA6IExlIFNvaG90ZW4gZmFpdCBwYXJ0aWUgZOKAmXVuZSB2b2llIGh5YnJpZGUgKG15c3RpcXVlICYgRm9pKSBkdSBndWVycmllciwgZGUgY2UgZmFpdCwgaWwgZMOpdmVsb3BwZSBsZXMgcG9pbnRzIGRlIEZvaSAoUEYpIGV0IGxlcyBwb2ludHMgZGUgTWFnaWUgKFBNKS4gUG91ciBsZXMgdm9pZSBkZSBsYSBNYWdpZSwgbGEgcHJvZ3Jlc3Npb24gbuKAmWVzdCBxdWUgZGUgZGV1eCBwb2ludHMgbWFpcyBkYW5zIGxlcyBQRiBldCBsZXMgUE0uIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTGVzIFlvdGFrYcOvcyBmb3JtZW50IGRlcyB0cmlidXMgc8OpZGVudGFpcmVzIGV0IG5vbWFkZXMgZGUgbOKAmUVzdCBsb2ludGFpbi4gSWxzIHBvc3PDqGRlbnQgdW5lIGZvcm1lIG1hcnRpYWxlIGRlIHNwaXJpdHVhbGl0w6kuIEVuIGVmZmV0LCBwb3VyIGV1eCwgbGEgcGVyZmVjdGlvbiBlc3QgZGFucyB0b3V0ZXMgY2hvc2VzIGV0IGxlIGdlc3RlIGxlIHBsdXMgc2ltcGxlIG3DqXJpdGUgZOKAmcOqdHJlIGNvbnRyw7Rsw6lzLiBQYXJtaSBsZXMgQXJjaMOpdHlwZSBleGlzdGFudCwgbGUgU29ob3RlbiBlc3QgdW4gZXhlbXBsZSBkZSBjZXR0ZSByZWNoZXJjaGUgZGUgbGEgcGVyZmVjdGlvbi4gSWxzIGNvbmNlbnRyZW50IHRvdXRlcyBsZXVycyByZWNoZXJjaGVzIHN1ciBsZSBjb250csO0bGUgZGUgbOKAmWVzcHJpdCBldCBkdSBjb3JwcyBwb3VyIG1hw650cmlzZXIgbGVzIMOpbmVyZ2llcyBzdWJ0aWxlcyBldCBuZSBmYWlyZSBxdeKAmXVuIGF2ZWMgbGV1cnMgYXJtZXMgZGUgcHLDqWRpbGVjdGlvbiBxdWUgc29udCBsZSDCq8KgQm90ZW7CoMK7LCBiw6J0b24gZGUgbGEgdGFpbGxlIGR1IGNvbWJhdHRhbnQgZXQgbGUgwqvCoE5hbnNob3RlbsKgwrssIGFybWUgY29uc3RpdHXDqWUgZGUgZGV1eCBiw6J0b25zIGTigJl1bmUgbG9uZ3VldXIgY29ycmVzcG9uZGFudCDDqWdhbGUgw6AgbGEgZGlzdGFuY2UgZHUgY291ZGUgw6AgbGEgam9uY3Rpb24gZGUgbOKAmWFubnVsYWlyZSBkdSBjb21iYXR0YW50LCBqb2ludCBwYXIgdW5lIGNvcmRlIHRyZXNzw6llLiBMZSBTaG9ob3RlbiBwcsOpZsOocmUgY29tYmF0dHJlIGF2ZWMgY2VzIGFybWVzIMOgIGTDqWZhdXQgZGUgdG91dCBhdXRyZXMuXG5MZXMgU29ob3RlbnMgZGUgbGEgdm9pZSBkZXMgQXJtZXMgc29udCBhcHBlbMOpcyBTb2hvaGl0dG9zLCBsaXR0w6lyYWxlbWVudCDCq2ZyYXBwZSB2aWdvdXJldXNlwrsuIFbDqXJpdGFibGVzIGZ1cmV1ciBhdSBjb21iYXQsIGxlcyBTb2hvaGl0dG9zIHNvbnQgcmVkb3V0w6lzIGRlIGxldXJzIGFkdmVyc2FpcmVzIHBvdXIgbGEgcHLDqWNpc2lvbiBkZSBsZXVycyBmcmFwcGVzIGV0IGxldXIgZMOpdGVybWluYXRpb24gYXUgY29tYmF0LiBTb3V2ZW50LCBpbHMgc2UgcmVuZGVudCB1dGlsZXMgYXVwcsOocyBkZSBsYSBwb3B1bGF0aW9uIG91IGR1IHNlaWduZXVyIGxvY2FsIGVuIMOpY2hhbmdlIGR1IGfDrnRlIGV0IGR1IGNvdXZlcnQuIExlcyBTb2hvdGVucyBkZSBsYSB2b2llIGRlIGzigJlPbWJyZSBzb250IGFwcGVsw6lzIFNvaG9oYWlidXMsIGxpdHTDqXJhbGVtZW50IMKrY2FyZXNzZSB2aWdvdXJldXNlwrsuIERhbnMgbGVzIGzDqWdlbmRlcyBwb3B1bGFpcmVzIGxlcyBTb2hvaGFpYnVzIHNvbnQgYXNzaW1pbMOpcyDDoCBkZXMgaG9tbWVzIGFuaW1hdXguXG5MZXMgU29ob3RlbnMgZGUgbGEgdm9pZSBkZSBsYSBNYWdpZSBzb250IGFwcGVsw6lzIFNvaG9tYWluZHVzLCBsaXR0w6lyYWxlbWVudCDCqyBlc3ByaXQgdmlnb3VyZXV4wrsuIElscyBzb250IGxlcyBwbHVzIMOpdHJhbmdlcyBldCBsZXVycyBzb3J0aWzDqGdlcyBzb250IHJlZG91dMOpcyBhdXRhbnQgcXVlIGxldXIgbWFuacOocmUgZGUgY29tYmF0dHJlLiBMZXMgU29ob21haW5kdXMgc29udCBkZXMgbWFnZXMvcHLDqnRyZXMuIENldHRlIGFwcHJvY2hlIGh5YnJpZGUgZGVzIGFydHMgbWFnaXF1ZXMgbGVzIHJlbmRlbnQgcGx1cyBwb2x5dmFsZW50cyBxdWUgbGV1cnMgaG9tb2xndWVzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm11ci1kZS1ib2lzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIm11ciBkZSBib2lzICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI211ci1kZS1ib2lzIiB9IH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBZb3Rhw68gOiBLYWJlIE1va3V6YWkiKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbsOAIHBhcnRpciBkdSBuaXZlYXUgMywgdm91cyBmYWl0ZXMgdG91cm5veWVyIHZvdHJlIGFybWUgc2hvaG90ZW4gYXV0b3VycyBkZSB2b3VzIGFmaW4gZGUgdnVzIHByb3TDqWdlci4gUG91ciB1bmUgYWN0aW9uIGJvbnVzLCB2b3VzIHBvdXZleiBhdm9pciB1biBlZmZldCDDqXF1aXZhbGVudCBhdSBzb3J0IFtib3VjbGllcl0gKC9ncmltb2lyZS9ib3VjbGllcikgZXhjZXB0w6kgcXVlIGxhIGNhcGFjaXTDqSBk4oCZYXJyw6p0ZXIgZGVzIHByb2plY3RpbGVzIG5lIGNvbmNlcm5lIHF1ZSBsZXMgcHJvamVjdGlsZXMgbm9ybWF1eCAoZmzDqGNoZXMsIGZsw6ljaGV0dGVzLCBqYXZlbG90cyBldGPigKYpLiBJbCBmYXV0IHVuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2dlcmVyLWxhLXNhbnRlLWR1LXBlcnNvbm5hZ2UvI3JlcG9zLWNvdXJ0IiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJyZXBvcyBjb3VydCIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgcG91ciBwb3V2b2lyIHV0aWxpc2VyIGRlIG5vdXZlYXUgY2V0dGUgY2FwYWNpdMOpLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiY291cnNlLWRhbnMtbGVzLWFyYnJlcyIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJDb3Vyc2UgZGFucyBsZXMgYXJicmVzICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NvdXJzZS1kYW5zLWxlcy1hcmJyZXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBZb3Rhw68gOiBKaW5zaHUgS2kiKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbsOAIHBhcnRpciBkdSBuaXZlYXUgNCwgdm91cyBwb3V2ZXogdXRpbGlzZXIgdm90cmUgZMOpcGxhY2VtZW50IHBvdXIgcHJlbmRyZSBhcHB1aWUgc3VyIHVuZSBzdXJmYWNlIHZlcnRpY2FsZSAobXVyLCB0cm9uYywgYmFtYm91ZSwgbcOidCBldGMuLi4pIGV0IHZvdXMgZMOpcGxhY2VyIHVuZSBub3V2ZWxsZSBmb2lzIGRlIHZvdHJlIGRpc3RhbmNlIG1heGltYWxlLCBwYXIgdHJhbmNoZSBkZSAzIG3DqHRyZXMsIHNvdXMgcsOpc2VydmUgZCdhdm9pciB1bmUgZGlzdGFuY2UgbWF4aW11bSBkZSAzIG3DqHRyZXMgZW50cmUgY2hhcXVlIHBvaW50cyBkJ2FwcHVpZS4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbkMnZXN0IHBvdXIgY2V0dGUgcmFpc29uIHF1ZSBsZSBTaG9ob3RlbiBzZSBkw6lwbGFjZSBzb3V2ZW50IGRlIGNldHRlIG1hbmnDqHJlIGVuIGNvbWJhdCBkYW5zIGRlcyBiYW1ib3VzZXJhaWVzIG91IGRlcyBmb3LDqnRzLiBTJ2lsIG4nYSBwYXMgZCdhcHB1aWUgYXUgZGVsw6AgZHUgcHJlbWllciwgaWwgbmUgcmFqb3V0ZSBxdWUgMyBtw6h0cmVzLiIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxuQ2UgZMOpcGxhY2VtZW50LCBwZXV0LcOqdHJlIGV4w6ljdXTDqSBlbiB0YW50IHLDqWFjdGlvbi4gTG9ycyBkZSBjZSBkw6lwbGFjZW1lbnQsIGxlIFNob2hvdGVuIG5lIHBldXQgcGFzIHN1YmlyIGQnYXR0YXF1ZSBkJ29wcG9ydHVuaXTDqS4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbkNldHRlIHRlY2huaXF1ZSBlc3QgdHLDqHMgw6lwcm91dmFudGUgZXQgZGVtYW5kZSB1bmUgdHLDqHMgYm9ubmUgY29uZGl0aW9uIHBoeXNpcXVlLiBMZSBTaG9ob3RlbiBuZSBwZXV0IHV0aWxpc2VyIGNldHRlIHRlY2huaXF1ZSBkJ3VuIG5vbWJyZSBkZSBmb2lzIGNvcnJlc3BvbmRhbnQgw6Agc29uIGJvbnVzIGRlIGNvbnN0aXR1dGlvbiAobWluaW11bSAxKS4gSWwgZG9pdCBhdHRlbmRyZSB1biAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyNyZXBvcy1jb3VydCIgfSB9LAogICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigicmVwb3MgY291cnQiKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGVuc3VpdGUgcG91ciAgcG91dm9pciByw6l1dGlsaXNlciBsZXMgZMOpcGxhY2VtZW50cyB1dGlsaXPDqXMuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJlc3F1aXZlLWludHVpdGl2ZSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJFc3F1aXZlIEludHVpdGl2ZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNlc3F1aXZlLWludHVpdGl2ZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gWW90YcOvOiBEaGthbi10ZWtpIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG7DgCBwYXJ0aXIgZHUgbml2ZWF1IDUsIHZvdXMgw6p0ZXMgdGVsbGVtZW50IGFnaWxlIGV0IHJhcGlkZSBxdWUgdm91cyDDqnRlcyB0csOocyBkaWZmaWNpbGUgw6AgdG91Y2hlci4gVm91cyBnYWduZXogdW4gYm9udXMgZGUgVkQgcGVybWFuZW50IGTDqXBlbmRhbnQgZGUgdm90cmUgbml2ZWF1LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRhYmxlIiwgWwogICAgICAgIF9jKCJ0aGVhZCIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRoIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiTml2ZWF1IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJCb251cyBkZSBWRCIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ0Ym9keSIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCI1IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFtfdm0uX3YoIjEiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjEwIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFtfdm0uX3YoIjIiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjE1IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFtfdm0uX3YoIjMiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjE5IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFtfdm0uX3YoIjQiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNvdXAtZGlzdGFudCIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJDb3VwIGRpc3RhbnQgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjY291cC1kaXN0YW50IiB9IH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuIFlvdGHDryA6IE7FjXPFjXRjaMWrIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG7DgCBwYXJ0aXIgZHUgbml2ZWF1IDcsIHZvdXMgYXZleiBwb3V2ZXogcG9ydGVyIHVuZSBhdHRhcXVlLCBwb3VyIHVuZSBhY3Rpb24gYm9udXMsIMOgIGRpc3RhbmNlIGF2ZWMgdW5lIGFybWUgZGUgY29udGFjdC4gTGEgcG9ydMOpZSBkZSB2b3MgYXJtZXMgZGUgY29ycHMgw6AgY29ycHMgZXN0IGRvdWJsw6llLiBBdSBuaXZlYXUgMTQsIGVsbGUgZXN0IHRyaXBsw6llLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1haXRyaXNlLWRlLWxhLWNvbmNlbnRyYXRpb24iIH0gfSwgWwogICAgICAgIF92bS5fdigiTWHDrnRyaXNlIGRlIGxhIGNvbmNlbnRyYXRpb24gIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbWFpdHJpc2UtZGUtbGEtY29uY2VudHJhdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuIFlvdGHDryA6IFNoxatqdWt1IE7FjWRvIildKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG7DgCBwYXJ0aXIgZHUgbml2ZWF1IDksIHZvdXMgcG91dmV6IG3DqWRpdGVyIGF1IGxpZXUgZGUgZG9ybWlyLiBWb3RyZSB0ZW1wcyBuw6ljZXNzYWlyZSBwb3VyIHLDqWN1cMOpcmVyIGxvcnMgZCd1biAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyNyZXBvcy1jb3VydCIgfSB9LAogICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigicmVwb3MgY291cnQiKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIG91IGQndW4gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2dlcmVyLWxhLXNhbnRlLWR1LXBlcnNvbm5hZ2UvI3JlcG9zLWxvbmciIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInJlcG9zIGxvbmciKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBlc3QgZGl2aXPDqSBwYXIgZGV1eC4gVm91cyBuZSBwb3V2ZXogY2VwZW5kYW50IHBhcyBiw6luw6lmaWNpZXIgZGUgcGx1cyBkZSByZXBvcyBxdWUgY2UgcXUnaWwgZXN0IHBvc3NpYmxlIGVuIDI0aC4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibWlsbGUtbWFpbnMiIH0gfSwgWwogICAgICAgIF92bS5fdigiTWlsbGUgbWFpbnMgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbWlsbGUtbWFpbnMiIH0gfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuIFlvdGHDryA6IFNlbiBUZSIpXSksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxuQSBwYXJ0aXIgZHUgbml2ZWF1IDEwLCBsYSBtYcOudHJpc2UgZGVzIG1vdXZlbWVudHMgcGVybWV0IGRlIHBvcnRlciBhdXRhbnQgZCdhdHRhcXVlIHF1J2lsIGEgZCdhZHZlcnNhaXJlLiBJbCBwZXV0IHBvcnRlciB1bmUgYXR0YXF1ZSBlbiBsaWV1IGV0IHBsYWNlIGRlIGwnYWN0aW9uICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvY29tYmF0dHJlLyNhdHRhcXVlciIgfSB9LCBbCiAgICAgICAgICAgIF9jKCJlbSIsIFtfdm0uX3YoImF0dGFxdWVyIildKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgZXQgZG9uYyBkZXMgw6l2ZW50dWVsbGVzIGF0dGFxdWVzIG11bHRpcGxlcy4gQSBhdHRhcXVlciB1biBTb2hvdGVuIGVuIHN1cm5vbWJyZSBuJ2VzdCBkb25jIHBhcyBmb3Jjw6ltZW50IHVuZSBib25uZSB0YWN0aXF1ZSBxdWUgc2VzIGFkdmVyc2FpcmVzIGFwcHJlbmVudCBzb3V2ZW50IMOgIGxldXJzIGTDqXBlbmRzLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJmZXUtaW50ZXJpZXVyIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkZldSBpbnTDqXJpZXVyICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2ZldS1pbnRlcmlldXIiIH0gfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuIFlvdGHDryA6IEhpIE5pIildKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG5BIHBhcnRpciBkdSBuaXZlYXUgMTMsIGxlIFNvaG90ZW4gZXN0IGNhcGFibGUgZGUgcHVpc2VyIGRhbnMgc2VzIHJlc3NvdXJjZXMgaW50w6lyaWV1cmVzLiBEYW5zIGxlIGNhZHJlIGQndW4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ2VyZXItbGEtc2FudGUtZHUtcGVyc29ubmFnZS8jcmVwb3MtY291cnQiIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInJlcG9zIGNvdXJ0IildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiwgbGUgU29ob3RlbiBsZSBjb25zaWTDqHJlIGNvbW1lIHVuICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyNyZXBvcy1sb25nIiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJyZXBvcyBsb25nIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi4gSWwgcydhZ2l0IHVuaXF1ZW1lbnQgZCd1biAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ2VyZXItbGEtc2FudGUtZHUtcGVyc29ubmFnZS8jcmVwb3MtY291cnQiIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInJlcG9zIGNvdXJ0IildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiwgbGVzIGF1dHJlcyBzb250IGNvbnNpZMOpcsOpcyBub3JtYWxlbWVudC4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInZlcml0YWJsZS1zb2hvdGVuIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlbDqXJpdGFibGUgU29ob3RlbiAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiN2ZXJpdGFibGUtc29ob3RlbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gWW90YcOvIDogU29ob3RlbiIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuQXUgbml2ZWF1IDIwLCBsZSBTb2hvdGVuIGVzdCBhY2NvbXBsaSBldCBhdWdtZW50ZSBzZXMgY2FyYWN0w6lyaXN0aXF1ZXMgZGUgZGV4dMOpcml0w6kgZXQgZGUgY29uc3RpdHV0aW9uIGRlIDIgcG9pbnRzIHNhbnMgcG91dm9pciBkw6lwYXNzZXIgMjIuIgogICAgICAgICkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}