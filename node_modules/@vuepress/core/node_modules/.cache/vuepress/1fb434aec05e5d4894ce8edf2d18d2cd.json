{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/personnalite-et-historique/README.md?vue&type=template&id=763d202a&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/personnalite-et-historique/README.md","mtime":1634294763329},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "personnalite-historique" } }, [
        _vm._v("Personnalité & Historique "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#personnalite-historique" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "alignement" } }, [
        _vm._v("Alignement "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#alignement" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Une créature typique de l'univers du jeu a un alignement qui permet de donner une idée générale de son point de vue moral et de ce qui dicte son attitude. L'alignement est une combinaison de deux facteurs : l'un identifie la morale (Bon, Mauvais ou Neutre) et l'autre son positionnement par rapport à la société et à l'ordre (Loyal, Chaotique ou Neutre). Il existe neuf combinaisons de ces deux critères, et donc neuf alignements possibles."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Voici ci-dessous un bref résumé du comportement typique que l'on peut attendre d'une créature en fonction de son alignement. Chaque individu peut avoir un comportement très différent des exemples proposés. Il se trouve en effet peu de créatures qui adhèrent et correspondent parfaitement à leur alignement."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "loyal-bon-lb" } }, [
        _vm._v("Loyal Bon (LB). "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#loyal-bon-lb" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "On peut compter sur cet alignement pour faire ce qui est considéré comme bien en société."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "neutre-bon-nb" } }, [
        _vm._v("Neutre Bon (NB). "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#neutre-bon-nb" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ceux de cet alignement font de leur mieux pour aider les autres en fonction de leurs besoins."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "chaotique-bon-cb" } }, [
        _vm._v("Chaotique Bon (CB). "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#chaotique-bon-cb" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ceux de cet alignement agissent en suivant leur conscience, sans tenir compte des attentes des autres, tout en conservant un grand respect pour la vie."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "loyal-neutre-ln" } }, [
        _vm._v("Loyal Neutre (LN). "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#loyal-neutre-ln" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ces individus sont respectueux de la loi, d'une tradition ou de leur code de conduite personnel. C'est le cas de nombreux moines et magiciens."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "neutre-n" } }, [
        _vm._v("Neutre (N). "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#neutre-n" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "C'est l'alignement de ceux qui préfèrent se tenir à distance des dilemmes moraux et n'aiment pas prendre parti. Ils font ce qui leur paraît approprié sur le moment. La plupart des druides et de nombreux humains sont d'alignement Neutre."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "chaotique-neutre-cn" } }, [
        _vm._v("Chaotique Neutre (CN). "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#chaotique-neutre-cn" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ceux de cet alignement écoutent leurs désirs et font passer leur propre liberté avant tout. On trouve parmi ceux d'alignement Chaotique Neutre de nombreux barbares et roublards et quelques bardes."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "neutre-mauvais-nm" } }, [
        _vm._v("Neutre Mauvais (NM) "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#neutre-mauvais-nm" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "C'est l'alignement des créatures qui font ce qu'elles veulent tant qu'elles peuvent s'en tirer."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "chaotique-mauvais-cm" } }, [
        _vm._v("Chaotique Mauvais (CM) "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#chaotique-mauvais-cm" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ces personnes n'hésitent pas à être violentes de manière arbitraire. Elles se laissent mener par leur cupidité, leur haine ou leur soif de sang."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "langues" } }, [
        _vm._v("Langues "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#langues" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "L'ethnie d'un personnage détermine la langue qu'il parle par défaut et son historique peut lui permettre de parler une ou deux langues supplémentaires au choix. Ces langues doivent être notées sur la fiche de personnage."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Choisissez vos langues dans le tableau ci-dessous, ou une langue couramment utilisée dans la campagne à laquelle vous participez. Si votre MJ vous en donne la permission, vous pouvez choisir à la place une langue sacrée ou un langage secret, comme l'argot des voleurs."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Certaines de ces langues sont en réalité une famille de langues comportant plusieurs dialectes."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "langues-imperiales" } }, [
        _vm._v("Langues impériales "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#langues-imperiales" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Langue")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Parlée par...")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Alphabet")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Alcane")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Ethnies impériales")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Alcath")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Avalinae")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Avalin")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Alcath")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Alcante")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Alycante")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Alcath")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Courdote")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Courdo")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Alcath")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Cyrynith")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Lacède")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Cyrynith")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Athos")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Lacède")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Cyrynith")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Mécède")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Lacède")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Cyrynith")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Thessal")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Lacède")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Cyrynith")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Saramath")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Saramath")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Saramath")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "langues-nordiques" } }, [
        _vm._v("Langues Nordiques "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#langues-nordiques" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Langue")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Parlée par...")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Alphabet")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Weslèdh")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Ethnies Nordiques")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Weslèdh")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Khern")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple khernaë")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Weslèdh")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Bena'ch")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple khernaë")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Weslèdh")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Mor'vron")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple khernaë")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Weslèdh")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Mèlde")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Meldète")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Weslèdh")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Brèdète")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Meldète")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Weslèdh")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Dorodane")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Meldète")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Weslèdh")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Mèldon")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Meldète")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Weslèdh")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Nordhème")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Meldète")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Weslèdh")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Melg")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Melg")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Bergaf")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Draükarn")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Melg")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Bergaf")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Welkarn")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Melg")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Bergaf")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Znorkarn")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Melg")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Bergaf")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "langues-asiatiques" } }, [
        _vm._v("Langues Asiatiques "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#langues-asiatiques" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Langue")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Parlée par...")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Alphabet")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Minghour")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Ethnies Asiatiques")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Mingath")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Oynote")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Oynour")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Oynote")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Ygouthy")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Ygouth")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [_vm._v("Ygh")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Yotaï")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Yotakaï")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Yohaï")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Athaï")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Yotakaï")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Yohaï")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Yoth")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Meldète")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Yohaï")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "langues-des-royaumes-de-shahia" } }, [
        _vm._v("Langues des Royaumes de Shahia "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#langues-des-royaumes-de-shahia" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Langue")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Parlée par...")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Alphabet")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Shahim")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Ethnies Shahimas")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Shahiate")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Assyrhiote")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Assyrhim")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Syride")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Assyrith")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Assyrhim")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Syride")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Cyrènide")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Assyrhim")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Syride")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Syrioth")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Assyrhim")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Syride")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Lassym")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Lassymide")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Lassyth")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Shèmide")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Shème")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Shèm")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Ptolémique")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Ptolème")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Ptolh")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "langues-sacrees-anciennes-et-secretes" } }, [
        _vm._v("Langues sacrées, anciennes et secrètes "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#langues-sacrees-anciennes-et-secretes" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Langue")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Parlée par...")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Alphabet")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("-")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Bhegelm")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Omath")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("-")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Drodan")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Oghen")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("-")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Melg")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Holtar")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("-")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Mages, Sorcer")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Magus")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Nayanide")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Nayane")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Naya")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Selmh")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Selmonite")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Selmh")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Sogh")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Peuple Sooghaï")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [_vm._v("-")])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "inspiration" } }, [
        _vm._v("Inspiration "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#inspiration" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "L'inspiration est une règle que le Narrateur peut utiliser pour récompenser un joueur qui interprète son personnage de manière particulièrement juste, en restant fidèle à ses traits de personnalité, ses Idéaux, ses liens et ses défauts. L'inspiration vous permet par exemple d'exploiter la compassion dont fait preuve votre personnage pour les plus démunis pour avoir un ascendant lors d'une négociation avec le prince mendiant, ou encore d'utiliser votre promesse de défendre votre village natal pour vous délivrer des effets d'un sort qui vous a été lancé."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "gagner-de-l-inspiration" } }, [
        _vm._v("Gagner de l'inspiration "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#gagner-de-l-inspiration" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Votre Narrateur a de nombreuses excuses pour vous permettre d'utiliser l'inspiration. Généralement, il vous récompense ainsi quand vous avez su jouer les traits de personnalité de votre personnage, les inconvénients liés à ses défauts ou son lien, ou plus généralement si vous avez réussi à l'interpréter de manière convaincante. Il y a des façons différentes de gagner de l'inspiration pendant le jeu."
        ),
        _c("br"),
        _vm._v(
          "\nVous êtes soit inspiré, soit vous ne l'êtes pas. Ils est possible d'emmagasiner des « inspirations » que vous pourrez utiliser plus tard à votre convenance."
        ),
        _c("br"),
        _vm._v(
          "\nIl est distingué les inspirations « bardiques » qui sont gagnées grâce aux capacités des bardes (Bhaner, Llawenos…)."
        ),
        _c("br"),
        _vm._v(
          "\nL’une des autres méthodes est la pratique religieuse en vénérants ses dieux. Une fois par tranche de 24h, cycle de jour et de la nuit, il est possible de prier pour un minimum de 10 minutes. Ainsi, le personnage dépense 5 points de Foi et gagne une inspiration de Foi. Il peut en avoir plusieurs pour un maximum de 1 par tranche de 5 points de sagesse soit 1 à 5, 2 à 10, 3 à 15 et 4 à 20. Les points de Foi se restaurent comme il est expliqué dans la section Repos ci-avant."
        ),
        _c("br"),
        _vm._v(
          "\nCes inspirations sont conférées en échanges de prières et d’offrandes. La valeur moyenne pour obtenir une inspiration est de 5po d’offrandes (en valeur)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "utiliser-l-inspiration" } }, [
        _vm._v("Utiliser l'inspiration "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#utiliser-l-inspiration" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Si vous êtes sous le coup de l'inspiration, vous pouvez l'utiliser pour faire un "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(", un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(" ou un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(". Si vous utilisez votre inspiration, vous obtenez l'"),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" sur ce lancer de dés.")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "De plus, si vous êtes sous le coup de l'inspiration, vous pouvez récompenser un autre joueur pour son jeu, sa perspicacité, ou simplement pour avoir rendu la partie plus intéressante par ses actions. Quand le personnage de ce joueur fait quelque chose qui contribue à l'histoire de manière intéressante et drôle, vous pouvez décider de lui céder votre inspiration."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "historique" } }, [
        _vm._v("Historique "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#historique" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous trouverez dans ce chapitre des exemples d'historiques de personnages concrets (aptitudes, maîtrises et langues) et des suggestions d'interprétation."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "maitrises" } }, [
        _vm._v("Maîtrises "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#maitrises" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Chaque historique confère à un personnage la maîtrise de deux compétences. Ces compétences sont décrites dans le "
          ),
          _c("a", { attrs: { href: "/utiliser-les-caracteristiques" } }, [
            _vm._v("Utiliser les caractéristiques")
          ]),
          _vm._v(
            ". En plus de cela, la plupart des historiques permettent à un personnage d'acquérir la maîtrise d'un ou plusieurs outils. Ces outils sont décrits dans le chapitre "
          ),
          _c("RouterLink", { attrs: { to: "/outils/" } }, [
            _vm._v("Équipement - Outils")
          ]),
          _vm._v(
            ". Si un personnage gagne une même maîtrise de deux sources différentes, il peut choisir une maîtrise différente du même type (compétence ou outil) à la place."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "langues-2" } }, [
        _vm._v("Langues "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#langues-2" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Le passé de certains personnages leur donne la capacité de pratiquer des langues supplémentaires à celles accordées par leur race. Reportez-vous à la section "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#langues" } },
            [_vm._v("Langues")]
          ),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "equipement" } }, [
        _vm._v("Équipement "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#equipement" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Chaque historique donne accès à un équipement de départ. Si vous utilisez la règle optionnelle qui vous permet à la place d'acheter votre propre équipement, vous ne recevez aucun équipement lié à votre historique. Cette option est décrite dans le chapitre "
          ),
          _c(
            "RouterLink",
            {
              attrs: { to: "/creation-du-personnage/#_5-equiper-le-personnage" }
            },
            [_vm._v("Création du personnage")]
          ),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "personnaliser-votre-historique" } }, [
        _vm._v("Personnaliser votre historique "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#personnaliser-votre-historique" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Vous voudrez peut-être adapter certains détails d'un historique pour qu'il corresponde mieux à votre personnage ou au cadre de la campagne. Afin de le personnaliser, vous pouvez remplacer une aptitude par une autre, choisir deux compétences et un total de deux maîtrises d'outils ou de deux langues parmi les historiques qui vous sont proposés ici. Vous pouvez choisir d'utiliser l'équipement de départ proposé ou d'acheter vous-même votre équipement, comme expliqué au chapitre "
          ),
          _c(
            "RouterLink",
            {
              attrs: { to: "/creation-du-personnage/#_2-choisir-un-historique" }
            },
            [_vm._v("Création du personnage")]
          ),
          _vm._v(
            ". Enfin, vous pouvez choisir deux traits de personnalité, un idéal, un lien et un défaut."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h1", { attrs: { id: "les-historiques-de-douaratil" } }, [
        _vm._v("Les historiques de Douaratil "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#les-historiques-de-douaratil" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Voici les historiques proposés dans "),
        _c("em", [_c("strong", [_vm._v("Douaratil")])]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "artisan" } }, [
        _vm._v("Artisan "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#artisan" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous pouvez sélectionner ou déterminer au hasard le type d'artisanat dans lequel vous vous êtes spécialisé."
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("2D6")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Artisanat")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("2")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v(
                "Travail du bois (charpentier, menuisier, tonnelier, etc.)"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("3")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Travail de la pierre (maçon, tailleur de pierre, etc.)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("4-5")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Travail du cuir (maroquinier, tanneur, cordonnier, etc.)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("6-7")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Travail du tissu (tisserand, teinturier, etc.)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("8-9")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Travail du métal (armurier, forgeron, rétameur, etc.)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("10")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Travail du verre (vitrier, verrier, etc.)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("11")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v(
                "Travail de précision (orfèvre, joaillier, enlumineur, etc.)"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("12")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Autre (potier, peintre, boulanger, apothicaire, etc.)")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Perspicacité."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Deux ensembles d'outils d'artisan au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits de bonne qualité, insigne, emblème ou lettre de marque prouvant votre appartenance à votre guilde, deux ensembles d'outils d'artisan correspondant à votre métier, sceau de la guilde, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#reseau-de-guilde" } },
            [_vm._v("Réseau de guilde")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "artisan-local" } }, [
        _vm._v("Artisan local "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#artisan-local" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Nature."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Deux ensembles d'outils d'artisan au choix parmi les outils de forgeron, de menuisier, de maçon, de bricoleur, ou de charpentier."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits courants, deux ensembles d'outils d'artisan que vous maîtrisez, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#solidarite-populaire" }
            },
            [_vm._v("Solidarité populaire")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "assassin" } }, [
        _vm._v("Assassin "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#assassin" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Discrétion, Investigation ou Perspicacité."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Matériel d'empoisonneur."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Vêtements discrets, cape ou manteau à capuche, insigne, emblème ou lettre de marque prouvant votre appartenance à votre guilde, matériel d'empoisonneur, bourse contenant 20 po.\n"
          ),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#marque-de-la-mort" } },
            [_vm._v("Marque de la mort")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "bandit-de-grand-chemin" } }, [
        _vm._v("Bandit de grand chemin "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#bandit-de-grand-chemin" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Intimidation, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Couverture, vêtements de voyageur, quelques chausse-trappes, boîte à amadou, outre d'eau, bourse contenant 10 po.\n"
          ),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#signes-de-piste" } },
            [_vm._v("Signes de piste")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "batard" } }, [
        _vm._v("Bâtard "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#batard" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Histoire, Supercherie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Véhicules (terrestres), un ensemble d'outils d'artisan au choix."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits de bonne qualité, outils d'artisan, objet ou symbole appartenant à la famille de votre parent noble, bourse contenant 20 po.\n"
          ),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/personnalite-et-historique/#Ni-noble,-ni-homme-du-peuple"
              }
            },
            [_vm._v("Ni noble, ni homme du peuple")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "brigand" } }, [
        _vm._v("Brigand "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#brigand" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Discrétion, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres), un type de jeu au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Couverture, vêtements de voyageur, piège à mâchoires, boîte à amadou, matériel de pêche, outre d'eau, bourse contenant 10 po.\n"
          ),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#signes-de-piste" } },
            [_vm._v("Signes de piste")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "cambrioleur" } }, [
        _vm._v("Cambrioleur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#cambrioleur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Acrobaties ou Athlétisme, Discrétion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Outils de voleur, accessoires de déguisement."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Vêtements discrets équipés d'une capuche, pied-de-biche, corde en soie (15 m), grappin, bourse contenant 10 po.\n"
          ),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#enfant-de-la-rue" } },
            [_vm._v("Enfant de la rue")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "chasseur" } }, [
        _vm._v("Chasseur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#chasseur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Discrétion, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Un type de jeu au choix, véhicules (terrestres)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Couverture, tenue de voyageur, quelques pièges, peau tannée d'un animal que vous avez tué de vos mains, sacoche contenant des pierres précieuses ou des morceaux d'ivoire pour une valeur de 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#fils-de-la-nature" } },
            [_vm._v("Fils de la nature")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "colporteur" } }, [
        _vm._v("Colporteur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#colporteur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Persuasion, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres) ou véhicules (marins)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur équipés d'une capuche, panier, tente pour une personne et couverture, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#voyageur" } },
            [_vm._v("Voyageur")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "commercant" } }, [
        _vm._v("Commerçant "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#commercant" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "En accord avec votre MJ, sélectionnez ou déterminez au hasard une des catégories suivantes pour déterminer le négoce principal de votre guilde."
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("2d6")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Négoce")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("2-3")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v(
                "Matériaux de construction (bois, pierres, fer, marbre, etc.)"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("4-5")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v(
                "Aliments de première nécessité (céréales, viande, sel, etc.)"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("6-7")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Vin, bière et autres alcools")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("8")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v(
                "Cuirs, peaux et tissus (laine, coton, soie, étoffes, etc.)"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("9")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Métaux précieux et joaillerie (or, gemmes, bijoux, etc.)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("10")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Curiosités (porcelaine, fourrures, œuvres d'art, etc.)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("11")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v(
                "Aliments exotiques (cacao, thé, poivre, sucre, épices, etc.)"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("12")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Esclaves, contrebande, recel, produits interdits")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Perspicacité, Persuasion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Deux langues au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits de bonne qualité, insigne, emblème ou lettre de marque prouvant votre appartenance à votre guilde, sceau de la guilde, balance de marchand, livre de comptes, plume et encre, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#reseau-de-guilde" } },
            [_vm._v("Réseau de guilde")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "cuisinier" } }, [
        _vm._v("Cuisinier "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#cuisinier" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Discrétion, Perspicacité."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Ustensiles de cuisinier."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits courants, ustensiles de cuisinier, colifichet signe de l'affection que vous portait votre employeur, outre de bon vin, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#reconfort-du-foyer" }
            },
            [_vm._v("Réconfort du foyer")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "crapule" } }, [
        _vm._v("Crapule "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#crapule" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Escamotage, Intimidation."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Outils de voleur, un type de jeu au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Vêtements discrets équipés d'une capuche, quelques chausse-trappes, objet brillant mais de peu de valeur volé il y a longtemps à une personne importante, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#enfant-de-la-rue" } },
            [_vm._v("Enfant de la rue")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "devot" } }, [
        _vm._v("Dévot "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#devot" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Perspicacité, Religion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Deux langues au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Symbole sacré (qui vous a été remis quand vous êtes entré dans les ordres), livre de prière ou moulin à prière, 5 bâtons d'encens, tenue de cérémonie, habits courants, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#refuge-du-pelerin" } },
            [_vm._v("Refuge du pèlerin")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "eclaireur" } }, [
        _vm._v("Éclaireur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#eclaireur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Discrétion, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Accessoires de déguisement."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur, sac contenant couverture et tente, outre d'eau, accessoires de déguisement, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#decouvreur" } },
            [_vm._v("Découvreur")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "ermite" } }, [
        _vm._v("Ermite "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#ermite" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Perspicacité ou Survie, Religion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Deux ensembles d'outils d'artisan au choix entre ustensiles de cuisinier, outils de tanneur, de potier, de forgeron, de tisserand ou de menuisier. Vous pouvez remplacer l'un de ces outils par un instrument de musique rituel ou du matériel d'herboriste."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits courants, ensemble d'outils ou instrument de musique parmi ceux maîtrisés, 5 bâtons d'encens, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#revelation" } },
            [_vm._v("Révélation")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "erudit" } }, [
        _vm._v("Érudit "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#erudit" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Arcanes, Histoire."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Un au choix parmi : matériel de calligraphie, outils de cartographe ou matériel d'alchimiste."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits de bonne qualité, deux bougies, matériel de calligraphie ou outils de cartographe ou matériel d'alchimiste, quelques lettres de correspondance avec un ou plusieurs confrères, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#culture-genérale" } },
            [_vm._v("Culture générale")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "escroc" } }, [
        _vm._v("Escroc "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#escroc" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Persuasion, Supercherie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Deux au choix parmi un type de jeu, accessoires de faussaire, accessoires de déguisement."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Accessoires de faussaire ou jeu, deux ensembles de d'habits courants, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#fausse-identite" } },
            [_vm._v("Fausse identité")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "explorateur" } }, [
        _vm._v("Explorateur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#explorateur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur, sac contenant couverture et tente, outre d'eau, corde en soie (15  m), bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#decouvreur" } },
            [_vm._v("Découvreur")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "garde" } }, [
        _vm._v("Garde "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#garde" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Intimidation, Perspicacité."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Un type de jeu au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Vêtements courants, paquet de cartes ou dés, insigne ou emblème de votre unité et de votre rang, pierre à affûter, outre de vin, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#freres-d'armes" } },
            [_vm._v("Frères d'armes")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "gardien-tribal" } }, [
        _vm._v("Gardien tribal "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#gardien-tribal" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Perspicacité, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Véhicules (terrestres), un instrument de musique au choix."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Sac contenant une tente et une couverture, bâton de marche, tenue de voyage grossiers, instrument de musique de votre tribu, amulette à l'effigie de votre gardien spirituel, sacoche contenant des pierres précieuses ou des fragments d'ivoire pour une valeur de 10 po.\n"
          ),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#esprit-protecteur" } },
            [_vm._v("Esprit protecteur")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "gens-du-voyage" } }, [
        _vm._v("Gens du voyage "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#gens-du-voyage" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(
            " : Deux au choix parmi Intimidation, Représentation, Supercherie."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres), instrument de musique au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur, instrument de musique, chien ou petit animal de compagnie, sac de voyage, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#voyageur" } },
            [_vm._v("Voyageur")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "guide" } }, [
        _vm._v("Guide "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#guide" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres), un type de jeu au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur, sac contenant tente et couverture, boîte à amadou, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#besoin-de-personne" }
            },
            [_vm._v("Besoin de personne")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "homme-de-loi" } }, [
        _vm._v("Homme de loi "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#homme-de-loi" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Investigation ou Persuasion, Perspicacité."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Matériel de calligraphie, véhicules (terrestres)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Épais journal vierge pour consigner ses investigations, matériel de calligraphie, tenue de voyageur, symbole (sceau ou médaillon) représentant son office, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#position-d'autorite" }
            },
            [_vm._v("Position d'autorité")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "homme-medecine" } }, [
        _vm._v("Homme-médecine "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#homme-medecine" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Médecine, Nature."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Matériel d'herboriste."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Sac contenant une tente et une couverture, bâton de marche, tenue de voyageur, matériel d'herboriste, bourse contenant des bijoux et des morceaux d'ivoire pour une valeur de 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#fils-de-la-nature" } },
            [_vm._v("Fils de la nature")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "initie" } }, [
        _vm._v("Initié "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#initie" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Investigation, Religion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Un instrument de musique (utilisé dans les cérémonies de votre religion) ou un ensemble d'outils d'artisan."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Symbole sacré (qui vous a été remis quand vous êtes entré dans les ordres), instrument de musique ou outils d'artisan, tenue de cérémonie, habits courants, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#refuge-du-pelerin" } },
            [_vm._v("Refuge du pèlerin")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "inquisiteur" } }, [
        _vm._v("Inquisiteur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#inquisiteur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Intimidation, Religion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Matériel de calligraphie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Insigne représentant sa religion et sa fonction, habits de bonne qualité, épais journal vierge pour consigner ses investigations, matériel de calligraphie, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#position-d'autorite" }
            },
            [_vm._v("Position d'autorité")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "itinerant" } }, [
        _vm._v("Itinérant "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#itinerant" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Représentation, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres) ou véhicules (marins)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur, costume ou vêtements tape-à-l'œil, tente pour une personne et couverture, sac de voyage, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#voyageur" } },
            [_vm._v("Voyageur")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "journalier" } }, [
        _vm._v("Journalier "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#journalier" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Véhicules (terrestres), un ensemble d'outils au choix parmi : outils de charpentier, outils de cordonnier, outils de tanneur, outils de maçon, matériel de peintre, outils de potier, outils de forgeron, outils de menuisier."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits courants, outre de vin, ensemble d'outils dépendant de son métier, couverture, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#communaute" } },
            [_vm._v("Communauté")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "juriste" } }, [
        _vm._v("Juriste "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#juriste" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Histoire ou Religion, Persuasion"),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Deux langues au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits de bonne qualité, symbole ou emblème attestant de votre charge ou vos compétences, étui à parchemins avec 10 feuilles, plume et encre, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/personnalite-et-historique/#rouages-de-la-justice"
              }
            },
            [_vm._v("Rouages de la justice")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "laboureur" } }, [
        _vm._v("Laboureur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#laboureur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Dressage."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Véhicules (terrestres), un ensemble d'outils d'artisan au choix entre des outils de forgeron, de cordonnier, de tanneur, de menuisier, de maçon, de potier, de bricoleur, de brasseur ou de charpentier."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Ensemble d'outils d'artisan, habits courants, objet hérité de l'un de vos parents dont la valeur est sentimentale, pelle, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#solidarite-populaire" }
            },
            [_vm._v("Solidarité populaire")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "limier" } }, [
        _vm._v("Limier "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#limier" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Investigation ou Perspicacité, Supercherie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Accessoires de déguisement, outils de voleur."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Accessoires de déguisement, outils de voleur, vêtements discrets, insigne officiel, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#entre-deux-mondes" } },
            [_vm._v("Entre deux mondes")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "manouvrier" } }, [
        _vm._v("Manouvrier "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#manouvrier" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Escamotage."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Un type de jeu au choix, un ensemble d'outils au choix parmi : outils de charpentier, outils de cordonnier, outils de tanneur, outils de maçon, matériel de peintre, outils de potier, outils de forgeron, outils de menuisier."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits courants, outre de vin, ensemble d'outils dépendant de son métier, pot en fer, lettres de recommandation d'anciens employeurs, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#communaute" } },
            [_vm._v("Communauté")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "matelot" } }, [
        _vm._v("Matelot "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#matelot" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Acrobaties, Athlétisme."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Véhicules (marins), ensemble d'outils au choix parmi outils de charpentier, outils de menuisier, instruments de navigation."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur, un ensemble d'outils parmi ceux maîtrisés, bouteille d'alcool fort, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#decouvreur" } },
            [_vm._v("Découvreur")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "medecin" } }, [
        _vm._v("Médecin "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#medecin" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Médecine, Nature."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Matériel d'herboriste, matériel d'empoisonneur."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits de bonne qualité, deux bougies, matériel d'herboriste, trousse de soins, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#culture-genérale" } },
            [_vm._v("Culture générale")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "membre-de-guilde" } }, [
        _vm._v("Membre de guilde "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#membre-de-guilde" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Perspicacité, Persuasion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Un ensemble d'outils d'artisan au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits de bonne qualité, insigne, emblème ou lettre de marque prouvant votre appartenance à votre guilde, outils d'artisan correspondant à votre métier, sceau de la guilde, étui avec quelques cartes terrestres ou maritimes, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#reseau-de-guilde" } },
            [_vm._v("Réseau de guilde")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "mendiant" } }, [
        _vm._v("Mendiant "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#mendiant" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Escamotage, Supercherie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Un instrument de musique (parmi tambours, flûte, chalumeau), un type de jeu au choix."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Couverture rapiécée, habits courants, instrument de musique parmi ceux maîtrisés, bourse contenant 5 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#refuge" } },
            [_vm._v("Refuge")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "mercenaire" } }, [
        _vm._v("Mercenaire "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#mercenaire" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Supercherie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres), un type de jeu au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits courants, paquet de cartes ou dés, objet de valeur récupéré sur un champ de bataille ou lors d'un siège, pierre à affûter, outre de vin, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#freres-d'armes" } },
            [_vm._v("Frères d'armes")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "militaire" } }, [
        _vm._v("Militaire "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#militaire" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Intimidation."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres), un type de jeu au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Couverture, habits courants, paquet de cartes ou dés, insigne ou emblème de votre unité et de votre rang, pierre à affûter, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#freres-d'armes" } },
            [_vm._v("Frères d'armes")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Unité")]),
        _vm._v(
          "\nVous avez passé une large part de votre temps dans une unité en particulier. Établissez avec votre MJ le type d'unité et son rôle, ainsi que d'éventuelles batailles ou sièges auxquels vous avez participé. Vous pouvez vous inspirer de la liste suivante, ou déterminer aléatoirement le rôle de votre unité."
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("D6")
            ]),
            _vm._v(" "),
            _c("th", [_vm._v("Type d'unité")])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("1")])
            ]),
            _vm._v(" "),
            _c("td", [_vm._v("Fantassins/Piquiers")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("2")])
            ]),
            _vm._v(" "),
            _c("td", [_vm._v("Archers/Arbalétriers")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("3")])
            ]),
            _vm._v(" "),
            _c("td", [_vm._v("Ravitaillement/Soutien")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("4")])
            ]),
            _vm._v(" "),
            _c("td", [_vm._v("Cavalerie légère")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("5")])
            ]),
            _vm._v(" "),
            _c("td", [_vm._v("Irréguliers/Éclaireurs")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("6")])
            ]),
            _vm._v(" "),
            _c("td", [_vm._v("Sapeurs/Ingénieurs")])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "misereux" } }, [
        _vm._v("Miséreux "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#misereux" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Discrétion, Escamotage."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Un type de jeu au choix, outils de voleur."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Couverture rapiécée, vêtements courants, paquet de cartes ou dés, bourse contenant 5 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#refuge" } },
            [_vm._v("Refuge")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "noblesse-d-epee" } }, [
        _vm._v("Noblesse d'épée "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#noblesse-d-epee" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme ou Dressage, Histoire."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langue")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Vêtements de qualité, monture, chevalière portant le sceau familial, pierre à affûter, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#de-la-haute" } },
            [_vm._v("De la haute")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "noblesse-de-robe" } }, [
        _vm._v("Noblesse de robe "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#noblesse-de-robe" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Histoire, Perspicacité ou Persuasion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Un instrument de musique au choix, un ensemble d'outils d'artisan au choix parmi matériel d'alchimiste, outils de cartographe, matériel de peintre et outils de tisserand."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Chaque outil peut être remplacé par une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits de bonne qualité, instrument de musique ou ensemble d'outils d'artisan, emblème ou symbole familial, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#de-la-haute" } },
            [_vm._v("De la haute")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "officier" } }, [
        _vm._v("Officier "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#officier" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme ou Dressage, Persuasion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Monture, habits de bonne qualité, insigne ou emblème de votre unité et de votre rang, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#position-d'autorite" }
            },
            [_vm._v("Position d'autorité")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "orphelin" } }, [
        _vm._v("Orphelin "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#orphelin" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Acrobaties ou Discrétion, Escamotage."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Un type de jeu au choix, accessoires de déguisement."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits courants, paquet de cartes ou dés, quelques chausse-trappes, colifichet vous rappelant votre enfance et – si vous les avez connus – vos parents, bourse contenant 5 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#mouches-des-rues" } },
            [_vm._v("Mouches des rues")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "palefrenier" } }, [
        _vm._v("Palefrenier "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#palefrenier" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Dressage, Perspicacité."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres), outils de tanneur."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits courants, outils de tanneur, colifichet signe de l'affection que vous portait votre employeur, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#domesticite" } },
            [_vm._v("Domesticité")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "patrouilleur" } }, [
        _vm._v("Patrouilleur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#patrouilleur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Perspicacité, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langue")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Monture, tenue de voyageur, tente, boîte à amadou, insigne officiel, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#position-d'autorite" }
            },
            [_vm._v("Position d'autorité")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "precepteur" } }, [
        _vm._v("Précepteur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#precepteur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Histoire, Perspicacité."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Deux langues au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits de bonne qualité, 2 bougies, livre d'histoire ou de langue ancienne, plume et encre, étui avec 10 feuilles de parchemin, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#domesticite" } },
            [_vm._v("Domesticité")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "pilleur-de-ruines" } }, [
        _vm._v("Pilleur de ruines "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#pilleur-de-ruines" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Histoire, Investigation."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Outils de voleur."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur, outre d'eau, pelle, pied-de-biche, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#estimation" } },
            [_vm._v("Estimation")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "pirate" } }, [
        _vm._v("Pirate "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#pirate" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Supercherie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Instruments de navigation, véhicules (marins)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Couverture, vêtements de voyageur, longue-vue, instruments de navigation, matériel de pêche, bouteille d'alcool fort, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#confrerie" } },
            [_vm._v("Confrérie")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "predicateur" } }, [
        _vm._v("Prédicateur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#predicateur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Religion, Représentation."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres) ou véhicules (marins)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Symbole sacré, livre de prière ou moulin à prière, 5 bâtons d'encens, tenue de cérémonie, fiole d'eau bénite, tenue de voyageur, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#refuge-du-pelerin" } },
            [_vm._v("Refuge du pèlerin")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "rebouteux" } }, [
        _vm._v("Rebouteux "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#rebouteux" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Médecine, Nature ou Religion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Deux au choix parmi matériel d'herboriste, d'empoisonneur et d'alchimiste."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits courants, bâton, des grisgris ou des fioles contenant d'étranges décoctions, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#aime-et-deteste" } },
            [_vm._v("Aimé et Détesté")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "repenti" } }, [
        _vm._v("Repenti "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#repenti" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Religion, Supercherie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Accessoires de déguisement, Véhicules (terrestres)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Symbole sacré (qui vous a été remis quand vous êtes entré dans les ordres), livre de prière ou moulin à prière, habits courants, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#ancienne-vie" } },
            [_vm._v("Ancienne vie")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "saltimbanque" } }, [
        _vm._v("Saltimbanque "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#saltimbanque" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Spécialité")]),
        _vm._v(
          "\nVous maîtrisez un art en particulier, avec lequel vous avez appris à gagner votre vie. Ce dernier vous ouvre l'accès à la maîtrise d'une compétence spécifique."
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("D6")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Spécialité")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("1")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Musicien/Conteur (Histoire ou Religion)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("2")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Acteur (Persuasion ou Supercherie)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("3")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Acrobate (Acrobaties)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("4")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Jongleur (Escamotage)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("5")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Montreur d'animaux (Dressage)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("6")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Diseuse de bonne aventure (Perspicacité)")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(
            " : Une compétence dépendant de la spécialité, Représentation."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Un instrument de musique au choix, véhicules (terrestres)."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(
            " : Vous pouvez remplacer l'instrument de musique par une langue au choix."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur, costume ou vêtements tape à l'œil, outils nécessaires à votre art (instrument, animal dressé, outils pour vos jongleries, etc.), sac de voyage, bourse contenant 15 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#spectacle-ambulant" }
            },
            [_vm._v("Spectacle ambulant")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "sang-bleu" } }, [
        _vm._v("Sang-bleu "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#sang-bleu" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Histoire, Persuasion."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Véhicules (terrestres)."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits de bonne qualité, monture, chevalière portant le sceau familial, bourse contenant 20 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#de-la-haute" } },
            [_vm._v("De la haute")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "serveur" } }, [
        _vm._v("Serveur "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#serveur" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Athlétisme, Représentation."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Ustensiles de cuisinier ou un type de jeu au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Habits courants, dés ou paquet de cartes ou ustensiles de cuisinier, bouteille d'alcool fort, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: {
                to:
                  "/personnalite-et-historique/#histoires-de-terres-lointaines"
              }
            },
            [_vm._v("Histoires de terres lointaines")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "solitaire" } }, [
        _vm._v("Solitaire "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#solitaire" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Nature, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Deux ensembles d'outils d'artisan au choix entre ustensiles de cuisinier, outils de tanneur, de potier, de forgeron, de tisserand ou de menuisier."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur, couverture, boîte à amadou, bout de bois taillé ou pierre étrange portée comme un talisman, matériel de pêche, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#besoin-de-personne" }
            },
            [_vm._v("Besoin de personne")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "trappeur" } }, [
        _vm._v("Trappeur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#trappeur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Discrétion, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Un type de jeu, un ensemble d'outils d'artisans au choix entre ustensiles de cuisinier, outils de tanneur, de potier, de forgeron, de tisserand ou de menuisier."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Tenue de voyageur, couverture, boîte à amadou, fourrure d'un animal que vous avez tué et qui vous sert de couverture, piège à mâchoires, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#besoin-de-personne" }
            },
            [_vm._v("Besoin de personne")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "vagabond" } }, [
        _vm._v("Vagabond "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#vagabond" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Escamotage, Survie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Matériel d'herboriste."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Une langue au choix."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Couverture, habits courants, matériel d'herboriste, bourse contenant 5 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#refuge" } },
            [_vm._v("Refuge")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "villageois" } }, [
        _vm._v("Villageois "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#villageois" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Dressage, Nature."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(
            " : Véhicules (terrestres), un ensemble d'outils d'artisan au choix entre des outils de forgeron, de cordonnier, de tanneur, de menuisier, de maçon, de potier, de bricoleur, de brasseur ou de charpentier."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Ensemble d'outils d'artisan, vêtements courants, objet hérité de l'un de vos parents et dont la valeur est sentimentale, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            {
              attrs: { to: "/personnalite-et-historique/#solidarite-populaire" }
            },
            [_vm._v("Solidarité populaire")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "voleur-a-la-tire" } }, [
        _vm._v("Voleur à la tire "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#voleur-a-la-tire" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Compétences")]),
          _vm._v(" : Escamotage, Supercherie."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Outils maîtrisés")]),
          _vm._v(" : Accessoires de déguisement."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Langues maîtrisées")]),
          _vm._v(" : Argot des voleurs."),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Équipement")]),
          _vm._v(
            " : Vêtements discrets équipés d'une capuche, objet brillant mais de peu de valeur volé il y a longtemps à une personne importante, bourse contenant 10 po."
          ),
          _c("br"),
          _vm._v(" "),
          _c("strong", [_vm._v("Aptitude")]),
          _vm._v(" : "),
          _c(
            "RouterLink",
            { attrs: { to: "/personnalite-et-historique/#enfant-de-la-rue" } },
            [_vm._v("Enfant de la rue")]
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "les-aptitudes" } }, [
        _vm._v("Les Aptitudes "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#les-aptitudes" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "aime-et-deteste" } }, [
        _vm._v("Aimé et Détesté "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#aime-et-deteste" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous exercez à la fois fascination et répulsion sur les gens du commun. Lorsque vous êtes en leur présence, vous avez la capacité d'attirer leur regard. Quand vous choisissez de le faire, vous êtes alors, l'espace d'un instant, le centre de l'attention. Les personnes réagissent en fonction de leurs personnalités respectives (pouvant ainsi vous rejeter, voire se montrer grossières ou violentes), mais, pendant un court moment, elles ne se préoccupent plus de ce qui les entoure (à moins qu'on les agresse ou leur porte ouvertement tort)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "ancienne-vie" } }, [
        _vm._v("Ancienne vie "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#ancienne-vie" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous étiez autre chose, avant. En plus de l'aptitude de dévot, choisissez l'aptitude d'un historique approprié à refléter votre passé. Quand vous le désirez, vous pouvez reprendre momentanément votre ancienne vie et votre ancienne identité afin de pouvoir l'utiliser en plus de l'aptitude de base de dévot. Mais si votre nouvelle vie devait être découverte par l'un de vos ennemis, ou si le temple qui vous a accueilli devait se rendre compte de votre rechute, vous ne pourriez plus utiliser cette aptitude. De plus, vous ne pourrez plus non plus utiliser votre aptitude de dévot tant que vous n'aurez pas fait sincère pénitence aux yeux de ceux qui ont accepté de vous accueillir pour que vous changiez de vie."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "besoin-de-personne" } }, [
        _vm._v("Besoin de personne "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#besoin-de-personne" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous avez appris à vous débrouiller seul. Vous savez toujours où trouver un abri discret où se reposer et faire du feu la nuit tombée. De plus, vous repérez facilement les zones contenant des herbes médicinales ou des champignons comestibles."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "confrerie" } }, [
        _vm._v("Confrérie "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#confrerie" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous appartenez à une confrérie universelle qui possède ses propres usages et ses propres codes. Quel que soit le port dans lequel vous vous trouvez, vous êtes capables de dénicher une auberge ou une taverne fréquentée par les vôtres, qui en cas de besoin peut servir de refuge ou d'endroit idéal pour dénicher des informations."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "communaute" } }, [
        _vm._v("Communauté "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#communaute" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les manouvriers et journaliers forment une communauté soudée qui se serre les coudes en période de vaches maigres, et qui sait que les quelques pièces obtenues du travail d'une journée peuvent parfois faire la différence entre la vie et la mort. En cas de besoin, vous savez faire appel à la solidarité de vos anciens collègues pour obtenir des informations, un peu d'aide ou l'hospitalité."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "culture-generale" } }, [
        _vm._v("Culture générale "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#culture-generale" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Même si vous avez une spécialité, vous avez dû appréhender de multiples sujets d'études pour atteindre votre niveau d'érudition actuel. Vous disposez de connaissances de base dans la plupart des domaines, même les plus inaccessibles. Et lorsque vous ne disposez pas vous-même d'une connaissance, vous savez où l'obtenir et êtes capables d'identifier une personne ou un lieu auprès duquel vous renseigner. Il peut s'agir d'une bibliothèque, d'un monastère, d'un autre érudit, mais aussi d'un endroit perdu ou inaccessible."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "decouvreur" } }, [
        _vm._v("Découvreur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#decouvreur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Même dans une région qui vous est inconnue, vous êtes capable de déterminer la meilleure route à suivre pour relier un point à un autre, en fonction du climat et du terrain. Toutefois, vos choix ne tiennent pas forcément compte des particularités locales, comme des prédateurs ou des tribus hostiles. Dans un territoire déjà visité, vous êtes capable de dénicher une solution de transport qui vous permet de rallier votre destination. Selon les cas, il peut s'agir d'une caravane, d'un bateau, ou d'un simple chariot emprunté à un paysan. Ce ne sera pas forcément la solution la plus rapide ou la plus confortable, mais elle sera généralement sûre et vous mènera à bon port."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "de-la-haute" } }, [
        _vm._v("De la haute "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#de-la-haute" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous êtes à l'aise dans les cercles de la haute société, et votre statut est aisément reconnaissable. Dès que l'on sait que vous êtes de noble lignage, les gens du peuple ont tendance à vous traiter avec déférence et respect, par devant tout du moins. Les miliciens et les gardes vous laissent tranquille, et les portes des grandes maisons et des cercles de pouvoir s'ouvrent plus facilement, pour peu que vous y mettiez les formes."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "domesticite" } }, [
        _vm._v("Domesticité "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#domesticite" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous avez l'habitude du fonctionnement général des maisons avec domestiques. De ce fait, vous êtes capable de dénicher facilement certaines informations à propos de la maîtresse ou du maître de maison sans alerter qui que ce soit sur vos intentions. De plus, dans votre région d'origine et le milieu social dans lequel vous travailliez, vous connaissez la plupart des individus importants, au moins de nom."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "enfant-de-la-rue" } }, [
        _vm._v("Enfant de la rue "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#enfant-de-la-rue" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous avez toujours évolué dans les rues des bas-fonds. Vous avez l'œil, vous savez reconnaître les lieux fréquentés par les personnes de votre genre. Si vous cherchez un lieu fréquenté par les crapules de la cité, vous arrivez toujours à le trouver sans trop d'effort. Vous ne pouvez découvrir automatiquement les lieux cachés et les bases d'opérations secrètes ou autres, mais vous trouvez toujours à qui poser la bonne question. Cette recherche ne vous prend jamais plus d'une ou deux heures. De plus, vous connaissez les codes et les manières des bas-fonds, et savez toujours comment vous comporter afin que l'on comprenne que vous appartenez au même milieu, ce qui rend votre intégration plus aisée."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "entre-deux-mondes" } }, [
        _vm._v("Entre deux mondes "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#entre-deux-mondes" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous évoluez autant au sein des cercles officiels qu'en dehors. Cela fait que les autorités de la ville vous voient comme un atout que l'on peut sacrifier. Vous avez accès aux locaux de votre organisation et on vous laisse tranquille quand on connaît votre véritable identité. Dans tout autre cas, vous êtes traité comme tout un chacun. Cependant, vous disposez d'un contact dans le monde de la pègre ou dans les bas-fonds capable de vous obtenir des renseignements et des services auxquels les autres n'ont pas accès. Et s'il ne peut vous aider, peut-être connaissez-vous l'un de ses amis, prêt à louer ses talents."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "esprit-protecteur" } }, [
        _vm._v("Esprit protecteur "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#esprit-protecteur" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous avez un gardien spirituel qui vous suit, invisible, et vous aide parfois. Il incarne la puissance naturelle et animale. Les animaux vous sont rarement hostiles, à moins que vous les menaciez. Au pire ils préfèrent vous éviter. Quand un animal sauvage se présente, il ne prend que rarement la peine de s'enfuir et ne vous agresse que dans des cas extrêmes. De plus, vous êtes toujours capable de retrouver votre chemin en pleine nature."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "estimation" } }, [
        _vm._v("Estimation "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#estimation" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous êtes capable d'évaluer en quelques secondes la valeur approximative d'un trésor, d'un artefact ancien ou de pierres précieuses. Vous ne disposez pas d'une évaluation précise, et il vous arrive exceptionnellement de vous tromper, mais vous avez assez l'habitude de ce genre de choses pour distinguer en très peu de temps les objets qui ont une réelle valeur, et séparer le bon grain de l'ivraie."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "fausse-identite" } }, [
        _vm._v("Fausse identité "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#fausse-identite" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous disposez d'une seconde identité afin d'éviter que l'on puisse vous retrouver. Vous possédez tous les documents et les objets nécessaires à l'entretenir et vous y recourez quand le besoin se fait sentir."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "fils-de-la-nature" } }, [
        _vm._v("Fils de la nature "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#fils-de-la-nature" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous savez survivre dans la nature. Vous trouvez toujours les points d'eau, les buissons de baies et les lieux propices à la chasse. Vous savez lire la nature et n'êtes jamais vraiment perdu. De plus, vous savez identifier les indices attestant de la présence d'autres clans primitifs : si un tel clan, ou une tribu (ou même un individu) est présent, vous savez remonter la trace jusqu'à son campement."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "freres-d-armes" } }, [
        _vm._v("Frères d'armes "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#freres-d-armes" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous avez une longue pratique des codes et du vocabulaire soldatesque, et vous savez intuitivement à qui vous adresser et de quelle manière au sein d'une unité militaire. Vous avez aussi une connaissance approfondie des rivalités seigneuriales dans votre région d'origine, et savez parfaitement reconnaître d'éventuels soldats « amis », auprès de qui vous pouvez solliciter de l'aide en cas de nécessité."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "histoires-de-terres-lointaines" } }, [
        _vm._v("Histoires de terres lointaines "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#histoires-de-terres-lointaines" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous ne comptez plus le nombre d'histoires de terres inconnues et lointaines que vous avez entendues alors que vous alliez et veniez entre les tables. Même si vous n'avez jamais vu aucune de ces régions mystérieuses, vous avez l'impression d'en connaître certaines intimement. Lorsque vous voyagez vers une contrée inconnue, vous pouvez demander au MJ de vous fournir des informations de base sur votre destination. De plus, lorsque vous et vos compagnons vous trouvez dans une taverne ou une auberge, vous pouvez vous attirer les faveurs du tenancier et de quelques clients en racontant vos histoires ou en profitant de votre expérience. Cela peut vous permettre de glaner quelques informations ou une aide ponctuelle."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "marque-de-la-mort" } }, [
        _vm._v("Marque de la mort "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#marque-de-la-mort" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Par le truchement de votre guilde, vous savez avec qui prendre contact dans la plupart des villes de votre région d'origine, au cas où vous voudriez vous débarrasser d'un indésirable pour une somme modique, ou bien si vous souhaitez vous procurer du poison. Votre guilde entretient en outre une aura de mystère et de menace par une subtile manipulation de l'information, qui vous permet de vous prévaloir, grâce à quelques menaces voilées, d'aide ou d'information auprès de la population des cités où la guilde opère."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "mouches-des-rues" } }, [
        _vm._v("Mouches des rues "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#mouches-des-rues" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous avez une connexion particulière avec les gamins des rues qui traînent dans toutes les cités et les villes du monde. Vous savez comment vous adresser à eux et les récompenser de quelques pièces pour obtenir de l'aide ou des informations. Ils ne risqueront pas leur peau pour vous, mais ils peuvent rendre de précieux services à qui sait utiliser leurs talents avec discernement."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "ni-noble-ni-homme-du-peuple" } }, [
        _vm._v("Ni noble, ni homme du peuple "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#ni-noble-ni-homme-du-peuple" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous êtes à l'aise auprès des gens du peuple, et savez comment vous faire passer pour l'un d'entre eux. Mais vous pouvez aussi vous faire passer pour un homme de noble lignage si nécessaire. Les gardes, soldats, miliciens et sous-fifres vous considèrent toujours comme un noble si vous le désirez. Mais vous savez aussi toujours où trouver une personne à qui parler parmi les serviteurs afin de découvrir l'information de votre choix (avec l'aval du MJ)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "position-d-autorite" } }, [
        _vm._v("Position d'autorité "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#position-d-autorite" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Votre rang dans les forces de l'ordre ou dans votre communauté vous accorde des privilèges tout particuliers. Ainsi, les forces de l'ordre des communautés alliées ou en bon terme avec la vôtre ont toujours un a priori positif sur vous (sauf cas particulier). De plus, si vous vous trouvez dans votre propre juridiction, vous exercez les droits et prérogatives liés à votre rang. Vous pouvez ainsi arrêter ou demander la détention d'un suspect, ou agir de la manière la plus appropriée à votre fonction. Vous avez aussi plus facilement accès aux bâtiments officiels liés à votre activité ainsi qu'aux archives et lieux de détention. De plus, dans votre juridiction, on vous offre le gîte et le couvert. Si vous n'occupez plus votre fonction, l'octroi de cette aide nécessitera peut-être de convaincre vos interlocuteurs, mais ils seront considérés comme neutres ou amicaux."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "reconfort-du-foyer" } }, [
        _vm._v("Réconfort du foyer "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#reconfort-du-foyer" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "À partir du moment où vous disposez d'un feu et de quelques aliments et ustensiles de base, vous êtes capable de préparer un repas revigorant qui saura contenter les estomacs vides et faire oublier les rigueurs d'un long voyage. Vous avez toujours sur vous les quelques épices indispensables pour ce faire."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "refuge" } }, [
        _vm._v("Refuge "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#refuge" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous avez une connaissance intime des zones urbaines, qui vous permet de dénicher un refuge sûr pour vous et vos compagnons. Ce n'est pas un endroit particulièrement confortable ou accueillant, mais vous pouvez gratuitement y trouver un peu de repos sans être inquiété par les intempéries ou les autorités."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "refuge-du-pelerin" } }, [
        _vm._v("Refuge du pèlerin "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#refuge-du-pelerin" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous êtes un acolyte et recevez le respect de ceux qui partagent votre foi. Vous pouvez accomplir les cérémonies religieuses liées à votre déité. Vous et vos compagnons d'aventure pouvez espérer recevoir des soins gratuits dans les temples, autels et autres endroits dédiés à la divinité que vous vénérez. Cela ne vous dispense par contre pas de fournir les ingrédients nécessaires au lancement des sorts. Ceux qui partagent votre religion peuvent aussi vous donner (mais seulement à vous) de quoi mener un train de vie modeste. Vous pouvez être lié à un temple spécifique dédié à votre déité ou votre panthéon et dans lequel vous avez un logement. Cela peut être le temple dans lequel vous officiez, si vous êtes resté en bons termes avec ses occupants, ou un temple qui est devenu votre nouvelle maison. Quand vous vous trouvez à proximité de votre temple, vous pouvez demander l'assistance des clercs qui s'y trouvent, dans la mesure où l'aide qu'ils vous apportent ne les met pas en danger et que vous êtes en bons termes avec eux."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "reseau-de-guilde" } }, [
        _vm._v("Réseau de guilde "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#reseau-de-guilde" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "En se positionnant comme intermédiaire privilégié dans une catégorie de biens ou de service, chaque guilde s'assure de contrôler au maximum le commerce et les échanges dans sa zone d'opération. De fait, les membres bénéficient d'un traitement de faveur partout où la guilde est installée. Outre des tarifs préférentiels pour le négoce, cela vous permet aussi d'accéder aux bâtiments de la guilde, d'y trouver éventuellement un abri confortable et de quoi vous approvisionner, ainsi que des informations via les membres locaux. Cela vous permet aussi d'accéder à certains services privilégiés, par des intermédiaires clandestins faisant affaire avec la guilde : contrebande, prostitution et trafics en tous genres."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "revelation" } }, [
        _vm._v("Révélation "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#revelation" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous avez eu une révélation. Votre vie solitaire et votre méditation vous ont donné les clés d'un secret dont vous ne comprenez pas encore tous les tenants et les aboutissants. Mais c'est elle qui vous a encouragé à sortir de votre réclusion volontaire. Déterminez un secret ou une révélation avec votre MJ. Il doit être assez flou pour vous pousser à l'aventure afin d'en savoir plus et, qui sait, de le contrer ou de le réaliser."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "rouages-de-la-justice" } }, [
        _vm._v("Rouages de la justice "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#rouages-de-la-justice" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous connaissez les rouages de la justice telle qu'elle est pratiquée dans votre région d'origine. Vous savez exploiter ces connaissances et votre propre influence pour garantir une peine réduite si jamais vous ou un de vos compagnons êtes la cible des foudres judiciaires."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "signes-de-piste" } }, [
        _vm._v("Signes de piste "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#signes-de-piste" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Lorsque vous évoluez dans votre milieu naturel de prédilection, vous savez lire les multiples signes de la nature qui sont invisibles à un œil moins averti que le vôtre. De plus, vous pratiquez un langage codé qui permet de laisser des indices à ceux qui, comme vous, ont embrassé le brigandage. Cela vous permet d'éviter la plupart des dangers et des embûches qui guettent souvent le voyageur dans les régions les moins civilisées du monde, et de communiquer avec d'autres brigands sans attirer l'attention."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "solidarite-populaire" } }, [
        _vm._v("Solidarité populaire "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#solidarite-populaire" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les gens du commun se reconnaissent facilement entre eux et se serrent les coudes. Dans n'importe quelle communauté rurale, vous recevez facilement le gîte et le couvert chez l'habitant, souvent en échange de menus travaux. De plus, quand vous en avez besoin, vous trouvez toujours une tâche pouvant vous rapporter quelques pièces durement gagnées dans une ferme des environs. vous savez aussi reconnaître des signes indiquant la proximité d'une ferme, d'un village ou d'un hameau à quelques kilomètres à la ronde, et pouvez le trouver sans effort."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "spectacle-ambulant" } }, [
        _vm._v("Spectacle ambulant "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#spectacle-ambulant" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Votre art vous apporte bien des inconvénients, mais il a aussi ses bénéfices. Vous trouvez toujours un lieu où l'on vous offre le gîte et le couvert en échange d'une représentation pour égayer l'ambiance. Tant que vous prenez la peine de vous produire au moins une fois par jour (quand les clients sont nombreux), on vous fournit un logement et une nourriture aussi décente que possible. De plus, vous vous attirez les bonnes grâces de la foule, qui vous perçoit avec un excellent a priori. Cependant, vous ne passez jamais vraiment inaperçu, et plus vous restez dans une ville, plus on vous reconnaît."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "voyageur" } }, [
        _vm._v("Voyageur "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#voyageur" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous connaissez les coutumes des petites communautés et des villages que vous traversez. Vous avez compris comment faire en sorte que l'on vous accepte sans pour autant vous imposer trop longtemps. Vous êtes capable de repérer la présence d'une communauté civilisée à plusieurs kilomètres, sachant où en trouver les traces. De plus, on vous offre toujours le gîte et le couvert, pour une nuit tout du moins."
        )
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}