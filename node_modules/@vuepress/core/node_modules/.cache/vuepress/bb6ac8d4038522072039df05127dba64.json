{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/herbier/README.md?vue&type=template&id=676fb89a&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/herbier/README.md","mtime":1634294763305},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "herbier" } }, [
        _vm._v("herbier "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#herbier" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "comment-utiliser-l-herbier" } }, [
        _vm._v("Comment utiliser l'herbier? "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#comment-utiliser-l-herbier" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("Chaque plante est présentée comme suit :")]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "nom" } }, [
        _vm._v("Nom "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#nom" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _vm._v(" Décrit sommairement la plante.\n"),
        _c("strong", [_vm._v("Localisation")]),
        _vm._v("  description des conditions de prospection."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD X"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD X"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD X"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD X"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera X doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : X pièces d'X la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(
          " : détermine les risques de devenir dépendant de la substance."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Utilisation")]),
        _vm._v(" : Décrit la méthode d'utilisation.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "facteur-d-addiction" } }, [
        _vm._v("Facteur d'addiction "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#facteur-d-addiction" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Certaines plantes ou substances peuvent entraîner des effets indésirables d'accoutumance qui peuvent modifier le comportement de celui qui en consomme. Chaque fois que le produit est utilisé un test d'addiction est fait. Chaque utilisation supplémentaire cumule les risques lorsqu'elles ont lieu dans le cour de la même demi lune après après la première prise."
        ),
        _c("br"),
        _vm._v(
          "\nPour ne pas devenir dépendant d'une substance, il suffit de réussir un JS de CON contre 1d6 + la valeur du facteur d'addiction."
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Facteur d'addiction")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Valeur")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Inexistant")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("0 (Aucun test nécessaire)")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Très faible")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [_vm._v("1")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Faibre")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [_vm._v("2")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Moyen")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [_vm._v("3")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Important")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [_vm._v("4")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Très important")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [_vm._v("5")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Irrésistible")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [_vm._v("6")])
          ])
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Une personne sous addiction a des troubles de comportement et subit les effets d'une "
          ),
          _c("RouterLink", { attrs: { to: "/folie/#folie-passagere" } }, [
            _vm._v("folie passagère")
          ]),
          _vm._v(
            ". Il faut résister 1d6 jours au manque pour être libéré de son addiction."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "plantes-curatives" } }, [
        _vm._v("Plantes curatives "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#plantes-curatives" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les plantes et les produits décrits ensuite sont rares et demandent souvent de longues recherches de la part de spécialistes pour en trouver des doses ou des spécimens suffisants. Les plantes, les champignons et les animaux qui produisent ces substances ne peuvent pas survivre en captivité. Tous les essais jusqu'à présent ont été voués à l'échec. Dans le meilleur des cas, les sujets sont devenus stériles. Ces plantes et ses substances sont souvent considérées magiques même si elles ne le sont pas intrinsèquement. Elles valent souvent extrêmement chères."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "afana" } }, [
        _vm._v("Afana "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#afana" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL'afana est une plante de la famille des roseaux qui pousse la plus part du temps dans des latitudes froides au bords des côtes. Sa tige est connue pour ses propriétés curatives pour traiter les fractures."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone côtière froide:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d'argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : très faible (1)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLa tige de l'afana est utilisée principalement pour ses vertues curatives."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Cataplasme")]),
        _vm._v(
          " (herboristerie/Survie DD 12, 1 dose) : Il faut 6 tiges (doses) d'afana pour créer un cataplasme. La préparation doit être appliquée sur la zone de la blessure. Le cataplasme permet de doubler la vitesse de guérison d'une fracture.\nValeur : 5 pièce d'argent la dose."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "aloa" } }, [
        _vm._v("Aloa "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#aloa" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL'Aloa est une plante de la famille des plantes grasses qui pousse dans les zones tempérées chaudes. La mixture issue de sa feuille est un gel appaisant connu pour ses propriétés curatives pour traiter les brûlures et les coupures."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone semi tempérée chaude:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 12"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 12"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 3d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièces d'argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : Inéxistant (0)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLes feuilles de l'Aloa sont utilisées pour ses vertues curatives."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Mixture")]),
        _vm._v(
          " (herboristerie/Survie DD 16, 1 dose) : Il faut 12 feuilles (doses) d'Aloa pour créer une mixture qui prend la forme d'un gel transparent. La préparation s'applique immédiatemement sur une zone brûlée ou une coupure. La mixture permet de doubler la vitesse de guérison des blessures par brûlure et peut stopper un saignement de 1 PA/round. D'autre part, sa première application restaure immédiatement 1d6 PA de brûlure."
        ),
        _c("br"),
        _vm._v("\nValeur : 5 pièces d'argent la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "asgarbie" } }, [
        _vm._v("Asgarbie "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#asgarbie" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL'asgarbie est une petite plante grasse qui ne dépasse jamais les quatre pouces. Elle reconnaissable par ses petites excroissances violettes qui pourraient rappeler des oursins. Il s'agit du fruit qui est comestible mais sans intérêt gustatif. L'asgarbie ne se trouve que dans des déserts arides. La fleure d'asgarbie a par contre des vertus d'antidote si elle est correctement préparée."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone désertique aride:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 1d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : moyen (3)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nL'asgarbie est utilisé principalement pour ses hautes qualités antitoxiques qui ont assurées sa réputation dans les zones où les serpents et les scorpions pullulent."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Antidote")]),
        _vm._v(
          " (herboristerie/Survie DD 28, 1 dose) : Il faut 12 fleurs (doses) d'asgarbies pour créer ce puissant antidote contre les poisons musculaires. La préapration doit être ingérée. L'antidote permet de guérir tout poison musculaire d'un DD inférieur à 16 et permet de résister aux poisons musculaires supérieurs avec un bonus au JS de +5."
        ),
        _c("br"),
        _vm._v("\nValeur : 38 pièces d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "athalas" } }, [
        _vm._v("Athalas "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#athalas" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL'Athalas est une plante de la famille des herbacée qui pousse dans les zones semi arides aux abords des océans et des mers intérieures. La mixture issue de sa feuille et de sa fleur est connue pour ses propriétés curatives pour traiter les brûlures."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone semi aride aux abords des océans:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 3 pièces d'argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : moyen (3)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLes feuilles et les fleurs de l'Athalas sont utilisées pour ses vertues curatives."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Mixture")]),
        _vm._v(
          " (herboristerie/Survie DD 16, 1 dose) : Il faut 8 fleurs ou feuilles (doses) d'Athalas pour créer une mixture. La préparation doit bouillir au moins 20 minutes avant application sur une zone brûlée. La mixture permet de réparer une zone brûlée d'une surface de 4 pouces en 3d6 heures.\nValeur : 66 pièces d'argent la dose."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "balahm" } }, [
        _vm._v("Balahm "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#balahm" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLe balahm est une plante de la famille des roseaux qui pousse dans des latitudes chaudes et humides, souvent dans des mangroves. La mixture issue de sa tige est connue pour ses propriétés curatives pour traiter les fractures."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone chaude et humide:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : très importante (5)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLa tige et les feuilles de balahm sont utilisées pour ses vertues curatives."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Mixture")]),
        _vm._v(
          " (herboristerie/Survie DD 22, 1 dose) : Il faut 6 tiges ou feuilles (doses) de balahm pour créer une mixture. La préparation doit bouillir au moins 20 minutes avant consommation. La mixture permet de réparer une fracture en 1d6 heures.\nValeur : 160 pièces d'or la dose."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "boursselath" } }, [
        _vm._v("Boursselath "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#boursselath" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLa Boursselath est une plante de la famille des herbacée qui pousse dans les zone tempérée herbeuse. La mixture issue de sa feuille et de sa fleur est connue pour ses propriétés curatives pour traiter les fractures."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone tempérée herbeuse:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 2 pièce d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : irrésistible (6)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLes feuilles et les fleurs de Boursselath sont utilisées pour ses vertues curatives."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Mixture")]),
        _vm._v(
          " (herboristerie/Survie DD 28, 1 dose) : Il faut 8 fleurs ou feuilles (doses) de Boursselath pour créer une mixture. La préparation doit bouillir au moins 20 minutes avant consommation. La mixture permet de réparer une fracture en 2d6 heures.\nValeur : 110 pièces d'or la dose."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "cepate" } }, [
        _vm._v("Cepate "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#cepate" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLe cèpate est un champignon qui apparaît après l’été à l’orée des bois et sur les coteaux des montagnes. Les cèpates présentent à l'état adulte, ils présentent une silhouette avec un chapeau convexe, souvent épais et en forme de coussin: ils sont dits pulvinés. Ils ont tous une surface comme une éponge sous le chapeau constituée de tubes au lieu de lames comme chez d’autres champignons. Ces tubes ont une variété de couleurs comme le rouge, le blanc, le marron le gris et le vert olive quand ils vieillissent. La marge ou bord du chapeau est enroulée. Ils ont pied ventru ou en forme de massue, il est parfois recouvert d'un réseau de mailles. Ils peuvent aussi développer une saveur amère ou poivrée et s'ils restent comestibles, ils sont immangeables."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v("\nLe prospecteur devra réussir un test en Survie:"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 12"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 1d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : très faible (1)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLe cèpate est utilisé principalement pour ses hautes qualités nutritives qui ont assurées sa réputation, particulièrement en période de mauvaises récoltes."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Alimentation")]),
        _vm._v(
          " (Cuisine/Survie DD 16, 1 dose) : Un champignon de bonne taille permet de nourrir un unique individu pour une journée complète à condition d’avoir suffisamment de boisson. Se nourrir de ce champignon permet de récupérer plus rapidement sa fatigue, sa surcharge mentale et ses blessures dans les mêmes conditions qu’un hébergement dans une auberge."
        ),
        _c("br"),
        _vm._v("\nValeur : 1 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Onguent")]),
        _vm._v(
          " (Herboristerie DD 16, 3 doses) : le cèpate peut-être préparé en onguent. Il est possible de créer une dose d’onguent de cèpate par trois doses de cèpate sous réserve de réussir (les tests s’effectuent par dose et la préparation prend une heure par dose). Cet onguent à la particularité de soigner 1d6 points d’action et peut se revendre 5 pièces d’argent auprès d’un apothicaire ou d’un soigneur."
        ),
        _c("br"),
        _vm._v("\nValeur : 4 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Potion")]),
        _vm._v(
          " ( Alchimie DD 22, 6 doses) : le cèpate peut-être préparé en potion. Il est possible de créer une dose de potion de cèpate par six doses de cèpate sous réserve de réussir (les tests s’effectuent par dose et la préparation prend une heure par dose). La potion permet de récupérer 1d6+2 points d’action et peut se vendre 1 pièce d’or par doses effectives."
        ),
        _c("br"),
        _vm._v("\nValeur : 5 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "coulemine" } }, [
        _vm._v("Coulemine "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#coulemine" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLa coulemine est un champignon ressemblant à une ombrelle, assez commun sur les sols bien drainés. C'est une espèce que l'on trouve solitaire, grégaire ou encore en rond de sorcière dans les pâturages et, parfois, dans les bois. Globalement, elle est très répandue dans les régions tempérées. Elle peut être confondue avec quelques espèces plus petites et toxiques."
        ),
        _c("br"),
        _vm._v(
          "\nLe chapeau, de quatre à douze pouces, est ovoïde puis convexe et enfin largement étalé en parasol, surmonté d'un mamelon, avec une cuticule sèche, gris-roux, couverte d'écailles brunes, plus denses vers le centre. Les lames sont blanches, serrées, molles. La sporée est blanche."
        ),
        _c("br"),
        _vm._v(
          "\nLe stipe; haut de de six à seize pouces, est élancé, creux, bulbeux à la base, brun tigré et de plus en plus écaillé en allant vers la base ; il est pourvu d'un anneau double, blanchâtre et coulissant. Le pied est fibreux. La chair est blanche, molle, avec une odeur et une saveur vaseuse désagréable. La coulemine présente pourtant de nombreuses propriétés bénéfiques. Il est particulièrement utilisé pour repousser les insectes et soulager les piqûres et les démangeaisons."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nAssez commune, la coulemine vient, parfois en grandes troupes, dans les sous-bois dégagés ou les clairières, plutôt sur terrains siliceux. Généralement précoce fin de l’été, début de l’automne, on la trouve jusqu'à l’hiver dans les régions alcantes."
        ),
        _c("br"),
        _vm._v("\nLe prospecteur devra réussir un test en Survie:"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 12"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : très faible (1)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Onguent")]),
        _vm._v(
          " ( Herboristerie DD 16, 3 doses): la coulemine peut-être préparé en onguent. Il est possible de créer une dose d’onguent de coulemine par trois doses de coulemine prélevée sous réserve de réussir le test d’alchimie approprié (les tests s’effectuent par dose et la préparation prend quinze minutes par dose). L’odeur très forte repousse les insectes qui doivent réussir un test de Sagesse DD 28 pour ne pas s’enfuir. L’efficacité est de 6 + 1d6 heures. L’odeur est persistante et peut s’avérer incommodante. Tous les DD de compétences persuasion mais aussi ceux de discrétion subissent un désavantage pour le porteur de l’onguent."
        ),
        _c("br"),
        _vm._v("\nValeur : 1 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "ederlane" } }, [
        _vm._v("Ederlane "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#ederlane" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL'éderlane est une plante moussue qui pousse dans les zone froide et côtière. Très verte à la saison chaude, elle devient de couleur rouille aux périodes froides. La mousse d'éderlane fleurit au plus fort de la saison froide. La mixture issue de la mousse est connue pour ses propriétés curatives pour traiter les fractures."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone froide et côtière:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : irrésisitible (6)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLa mousse d'éderlane est utilisées pour ses vertues curatives."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Mixture")]),
        _vm._v(
          " (herboristerie/Survie DD 22, 1 dose) : Il faut 10 mousses (doses) d'éderlane pour créer une mixture. La préparation doit être ingérée malgré sa très mauvaise odeur. La mixture permet de réparer une fracture en 3d6 heures.\nValeur : 31 pièces d'or la dose."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "eglantiane" } }, [
        _vm._v("Eglantiane "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#eglantiane" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL’églantiane est un rosier sous forme d’arbuste à feuilles caduques et à floraison non remontante. Il pousse dans les haies."
        ),
        _c("br"),
        _vm._v(
          "\nL’ églantiane a des tiges couvertes d'aiguillons recourbés en crochets, pourpres la première année, feuillues d'un vert mat ensuite, qui traînent au sol et marcottent (s'enracinent)."
        ),
        _c("br"),
        _vm._v(
          "\nLes fleurs sont de couleur blanc ivoire et la période de floraison s’étale sur tout l’été. Les fruits de l’ églantiane sont ovoïdes, rouges clairs."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v("\nL’ églantiane se trouve dans les fourrés arbustifs."),
        _c("br"),
        _vm._v("\nLe prospecteur devra réussir un test en Survie:"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Usage culinaire")]),
        _vm._v(
          " (Survie DD 16, 5 doses) : Ses baies rouges peuvent être séchées et enrobées de miel, puis caramélisé à la flamme. Chaque dose équivaut un repas."
        ),
        _c("br"),
        _vm._v("\nValeur : 2 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Potion")]),
        _vm._v(
          " ( Alchimie DD 28, 5 doses): Sous forme de potion, les extraits des a racine est un excellent tonique de l'état général, contre la fatigue, l'asthénie. l'églantiane permet d'ignorer une journée de fatigue ou le manque d'une nuit de sommeil, c’est à dire d’éviter un niveau d’épuisement Cette potion ne peut pas être utilisée deux jours d'affilée au risque d'avoir les effets inverses et de cumuler une grosse fatigue équivalente à deux niveau d’épuisement."
        ),
        _c("br"),
        _vm._v("\nValeur: 5 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Huile essentielle")]),
        _vm._v(
          " ( Herboristerie DD 35, 15 doses): Sous forme d'huile essentielle, l'églantiane permet de mieux se concentrer pendant 1d6 heures. L'utilisateur obtient un bonus de +2 aux JS de Sagesse et d’Intelligence ainsi qu'aux tests de compétences faisant appel à des capacités intellectuelles."
        ),
        _c("br"),
        _vm._v("\nValeur : 10 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : moyen (3)")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "elheanung" } }, [
        _vm._v("Elheanung "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#elheanung" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL'elheanung est une plante intéressante que l'on trouve dans les hauts fonds des mers froides. Cette algue qui peut atteindre jusqu'à 30 coudées possède des propriétés curatives qui ont été découvertes il y a fort longtemps par les peuples pêcheurs nordiques."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v("\nLe prospecteur devra réussir un test en Survie:"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 1d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièces d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : moyen (3)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nL'elheanung est utilisé principalement pour ses hautes qualités antitoxiques."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Antidote")]),
        _vm._v(
          " (herboristerie/Survie DD 28, 1 dose) : Il faut 12 feuilles (doses) d'elheanung pour créer ce puissant antidote contre les poisons de réduction. La préapration doit être bouillie pendant une durée de 20 minutes minimum. L'antidote permet de guérir tout poison de réduction d'un DD inférieur à 16 et permet de résister aux poisons musculaires supérieurs avec un bonus au JS de +6."
        ),
        _c("br"),
        _vm._v("\nValeur : 99 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "empeurine" } }, [
        _vm._v("Empeurine "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#empeurine" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL’Empeurine est une plantes cultivée comme plante condimentaire et médicinale pour ses pétioles, tiges et graines très aromatiques et stimulantes et pour sa racine utilisée en phytothérapie."
        ),
        _c("br"),
        _vm._v(
          "\nC'est une plante herbacée bisannuelle, très aromatique, mesurant de trois à sept pieds de haut. Les feuilles sont poilues sur la face inférieure, à long pétiole, finement divisées, avec le segment terminal trilobé."
        ),
        _c("br"),
        _vm._v(
          "\nL'inflorescence est une grande ombelle composée de fleurs verdâtres."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _vm._v(
          "\nOn la trouve notamment sur les berges de zones humides et sur les bords de fossés.\nLe prospecteur devra réussir un test en survie:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 3d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : important (4)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Patisserie & confiserie")]),
        _vm._v(
          " (Cuisine/Survie DD 16, 5 doses) : Pétioles et tiges sont utilisées en pâtisserie et confiserie sous forme de fruits confits, l'Empeurine . C'est une spécialité de la ville de Thaouet."
        ),
        _c("br"),
        _vm._v("\nValeur : 2 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Condiment")]),
        _vm._v(
          " (Cuisine/Survie DD 12, 1 dose): Les feuilles tendres peuvent servir de condiment pour aromatiser salades et potages."
        ),
        _c("br"),
        _vm._v("\nValeur : 2 pièces d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Liqueur")]),
        _vm._v(
          " (Cuisine/Survie DD 28, 10 doses): Graines et tiges servent à la préparation de liqueurs."
        ),
        _c("br"),
        _vm._v("\nValeur : 3 pièces d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Potion")]),
        _vm._v(
          " ( Alchimie DD 28, 6 doses): Sa racine utilisée en potion est un excellent tonique de l'état général, contre la fatigue, l'asthénie. Redonne 2d6 points d’action et enlève un niveau d’épuisement."
        ),
        _c("br"),
        _vm._v("\nValeur : 10 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Huile essentielle")]),
        _vm._v(
          " ( Herboristerie DD 28, 15 doses) qui est bénéfique pour tout le système digestif. L'Empeurine se révèle être un bon stimulant de l'appareil digestif. Indiquée en cas de douleurs et spasmes intestinaux et mauvaises digestions. L'Empeurine évite la formation de gaz intestinaux qui peuvent provoquer des problèmes de ballonnements et d'aérophagie."
        ),
        _c("br"),
        _vm._v(
          "\nOutre ses vertus carminatives, l'huile essentielle a également des propriétés sédatives, particulièrement indiquée en cas d'anxiété, de fatigue nerveuse, d'insomnie et de troubles du sommeil."
        ),
        _c("br"),
        _vm._v(
          "\nEnfin, l'huile essentielle est également citée pour ses propriétés anticoagulantes."
        ),
        _c("br"),
        _vm._v("\nValeur : 5 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Contre-indication et effets indésirables")]),
        _vm._v(
          " : La plante peut avoir une action abortive et elle est donc contre indiquée durant la grossesse. La présence de substances pigmentantes et photosensibilisante, peut favoriser des réactions lors de bains de soleil ou d'exposition intensive aux rayons."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("L'herbe aux anges")]),
        _vm._v(
          " : L’Empeurine, dite encore « herbe aux anges », doit son nom à ses vertus magiques et à l'odeur aromatique suave et musquée qu'elle répand. Cette ombellifère géante passe en effet pour conjurer les envoûtements et les sorciers ne résisteraient pas à sa bonne odeur. Accrochée au cou des enfants, elle les protégerait en particulier des maléfices de toute nature. Mais elle peut également servir d’amulette aux adultes."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "fortliane" } }, [
        _vm._v("Fortliane "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#fortliane" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _vm._v(
          "\nLa Fortliane est une liane hallucinogène utilisées dans la tradition chamanique. Les graines sont consommables pour différents effets. Il existe plusieurs manières d'ingérer les graines de Fortliane. La plus simple serait de mâcher les graines pendant une demi-heure et les ingérer. Cette méthode requiert d'être à jeun depuis au moins douze heures, car les graines sont recouvertes d'une fine pellicule blanche qui provoque douleurs au ventre, vomissements, et potentiellement un mauvais voyage. Bien qu'il soit possible de gratter la pellicule pour limiter cela, il est impossible d'être sûr de l'avoir entièrement enlevée. Une autre technique de consommation est de broyer les graines en une poudre très fine, de laisser cette poudre infuser (plus de 10h) dans un verre d'eau, puis de filtrer et de boire le liquide. Cette technique pourrait limiter les effets vomitifs en évitant l'ingestion de la couche supérieure. Elle compte parmi les remèdes traditionnels où elle est utilisée comme aphrodisiaque, tonique nerveux, dans le traitement du diabète et de l'arthrite. Les feuilles et les racines de Fortliane ne sont pas psychoactives mais sont traditionnellement utilisées pour leurs propriétés antiseptiques et anti-inflammatoires. Graines de Fortliane contiennent des alcaloïdespsychotropes : ses effets principaux sont les suivants : bien être, euphorie, changement de perceptions importantes, et en cas d'une ingestion massive, apparition de paternes de couleurs, hallucinations visuelles-sonores, expérience extra-corporelle, mystiques. Comme tout produit psychotrope la Fortliane peut être à l'origine de mauvaises expériences. Il est formellement déconseillé d'en consommer si l'on se trouve dans un état psychique difficile."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLa Fortliane se trouve en forêt ou contre des parois rocheuses orientées au sud car elle apprécie la lumière du soleil."
        ),
        _c("br"),
        _vm._v("\nLe prospecteur devra réussir un test en survie:\n"),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : très important (5)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Infusion")]),
        _vm._v(
          " ( Herboristerie DD 16) infusion, restitue 1d6 points de Magie et de Foi. Usage de 3 doses de récoltes pour une dose d’infusion."
        ),
        _c("br"),
        _vm._v("\nValeur : 3 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Effet psychotrope")]),
        _vm._v(
          " ( Herboristerie DD 22) pâte à mâcher. Permet d’obtenir les effets de sort de courage et de voyage astral cumulés."
        ),
        _c("br"),
        _vm._v("\nValeur : 8 pièces d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "fougerade" } }, [
        _vm._v("Fougerade "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#fougerade" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _vm._v(
          "\nLa Fougérade est une fougère peu commune, mais envahissante dans les lieux qu'elle colonise. On la retrouve jusqu'à six mille pieds d'altitude. Cette plante toxique a longtemps été utilisée à des fins alimentaires et médicinales."
        ),
        _c("br"),
        _vm._v(
          "\nLa Fougérade offre une bonne couverture au sol, ce qui permet la diminution de l'érosion des sols et d'offrir un abri à la faune, mais empêchent de nombreuses autres espèces végétales de se développer Les petits cervidés, les renards, de nombreux rongeurs et certaines espèces d'oiseaux utilisent la Fougérade pour se dissimuler et pour nicher. Elle se mélange aux fougères communes ce qui la rend très difficile à trouver."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLa Fougérade se développe en pleine lumière ou semi-ombragées, souvent sur des sols pierreux ou sableux et acides et assez profonds. Elle est indifférente à l'humidité du sol. Elle se développe depuis le niveau de la mer jusqu'à six mille pieds d'altitude, des étages collinéens à montagnards."
        ),
        _c("br"),
        _vm._v("\nLe prospecteur devra réussir un test en Survie:"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 5d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 5 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : inexistant (0)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _vm._v(" "),
        _c("em", [_vm._v("Paillage antifongique")]),
        _vm._v(
          " (Survie DD 16 2d6 doses) : La Fougérade peut être utilisée en jardinage. On la récolte de préférence sèche ou jaunissante, à l'automne. À cette époque de l'année, sa vocation première est de servir de protection contre le gel à toutes les plantes sensibles: mâches, chicorée sauvage, scarole, artichaut... Quand vient le printemps, la fougèrade se transforme en matériau idéal pour la couverture du sol. C'est dans les fraisiers qu'elle donne le meilleur d'elle-même grâce à son action antifongique contre la pourriture grise. Mais on peut également l'utiliser pour pailler toutes sortes de cultures dès lors que le sol s'est réchauffé, en guise d'assurances anti-sécheresse et anti- mauvaises herbes. En paillage frais ou sec, elle attire mais empoisonne les limaces."
        ),
        _c("br"),
        _vm._v(
          "\nValeur : 7 pièces d’or la dose pour un usage saisonnier dans un potager individuel."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Purin de fougèrade insecticide")]),
        _vm._v(
          " (Herboristerie/Survie DD 16, 2d6 doses): Le purin de Fougérade est également un insecticide puissant qui permet de détruire le puceron. Il serait également efficace contre le taupin et la cicadelle."
        ),
        _c("br"),
        _vm._v(
          "\nValeur : 8 pièces d’or la dose pour un usage saisonnier dans un potager individuel."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Pain de Fougérade")]),
        _vm._v(
          " (Cuisine/Survie DD 22, 5 doses) formait parfois la base de l'alimentation en cas de disette. On peut consommer ce mélange de rhizome moulu et de farine en bouillies."
        ),
        _c("br"),
        _vm._v("\nValeur : 2 pièces d’or la dose"),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Bière")]),
        _vm._v(
          " ( Alchimie/Cuisine/Herboristerie DD 28, 20 doses)Il est possible de mettre à fermenter ces rhizomes avec les 2/3 de leur poids en malt pour en faire une sorte de bière."
        ),
        _c("br"),
        _vm._v("\nValeur : 1 pièces d’or la dose"),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Gâteaux cuits")]),
        _vm._v(
          " (Cuisine/Survie DD 16, 5 doses) on en extrait la fécule par un long procédé qui servait à confectionner des gâteaux cuits à la vapeur . Les Urh'rs font cuire ce rhizome pendant des heures dans leur four souterrain (Cuisine/Survie DD 16). Ils en mange la partie comestible et recrachent les fibres. Chaque dose quelque soit son conditionnement permet de fournir l’équivalent d’une ration journalière d’alimentation."
        ),
        _c("br"),
        _vm._v("\nValeur : 9 pièces d’or la dose"),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Les jeunes pousses")]),
        _vm._v(
          " (Survie DD 16, 1d6 doses) : on peut donc s'en servir pour épaissir des préparations telles les soupes. Elles sont fréquemment utilisées comme légumes ou conservées au sel, à la lie de vin de seigle. Après avoir macéré vingt-quatre heures, les crosses peuvent être utilisées ou cuite à la vapeur ou même consommées crues. Elles sont alors croquantes.Elles font l'objet d'une cueillette printanière."
        ),
        _c("br"),
        _vm._v("\nValeur : 2 pièces d’or la dose"),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Sirop")]),
        _vm._v(
          " ( Herboristerie DD 28, 3d6 doses) :il est possible de consommer le rhizome cru de cette fougère pour lutter contre la bronchite."
        ),
        _c("br"),
        _vm._v("\nValeur : 7 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Poudre")]),
        _vm._v(
          " ( Herboristerie DD 28, 5d6 doses) de ce même rhizome a longtemps été considéré comme souverain contre les parasites intestinaux."
        ),
        _c("br"),
        _vm._v("\nValeur : 10 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "frambole" } }, [
        _vm._v("Frambole "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#frambole" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nC'est un arbrisseau à tiges dressées, cylindriques pouvant atteindre quatre à sept pieds de haut. Ses tiges sont bisannuelles et meurent la deuxième année après fructification. La souche vivace, émet de nouvelles tiges chaque année. Les tiges sont armées d'aiguillons peu piquants."
        ),
        _c("br"),
        _vm._v("\nLes fleurs blanches sont réunies par groupes d'une dizaine."),
        _c("br"),
        _vm._v(
          "\nLes fruits, composés, sont formés d'un ensemble de petites boules rouges. Non adhérentes au cône du réceptacle, elles s'en détachent facilement à maturité."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nSon habitat naturel se situe surtout dans les sous-bois montagneux, généralement en dessous de quatre mille cinq cent pieds, mais on la trouve aussi en plaine. Dans son milieu naturel, on observe que la frambole est souvent associé à d'autres plantes telles que le hêtre, le sorbier ou le sureau. Le prospecteur devra réussir un test en Survie:\n"
        ),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 12"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : inexistant (0)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Fruits frais")]),
        _vm._v(
          " (Cuisine/Survie DD 16) : Les fruits frais, les framboles, se consomment nature au miel, en salade de fruit, ou donnent lieu à des transformations en confiture, gelée, sirops, coulis ..."
        ),
        _c("br"),
        _vm._v("\nValeur : 2 pièces d’or la dose"),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Onguent")]),
        _vm._v(
          " (Alchimie DD 28 ): la frambole peut être préparée en onguent. Il est possible de créer une dose d’onguent de frambole par quatre doses de frambole sous réserve de réussir un test d’Alchimie DD 28 (les tests s’effectuent par dose et la préparation prend une heure par dose). L'onguent soigne les brûlures et les irritations. Il redonne 2d6 points d’action."
        ),
        _c("br"),
        _vm._v("\nValeur : 8 pièces d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "gourthamelle" } }, [
        _vm._v("Gourthamelle "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#gourthamelle" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLa gourthamelle est une plante herbacée qui pousse dans les zones tempérées et herbeuses. Très basse aux larges feuilles qui s'étalent, une tige pousse en son centre et peut atteindre 6 pieds de haut. Cette tige porte les fleurs qui se répartissent sur toute la longeur. Les fleurs sont très petites et d'une couleur mauve profond.  Le cataplasme issue de cette plante est connu pour ses propriétés curatives pour traiter les fractures."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone tempérée et herbeuse."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : moyen (3)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v("\nLa gourthamelle est utilisées pour ses vertues curatives."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Mixture")]),
        _vm._v(
          " (herboristerie/Survie DD 16, 1 dose) : Il faut 16 felurs ou feuilles ou morceau de tige verte (doses) de gourthamelle pour créer un cataplasme. La préparation doit être appliquée. La mixture permet de réparer une fracture en 6d6 heures.\nValeur : 30 pièces d'or la dose."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "herbefolle" } }, [
        _vm._v("Herbefolle "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#herbefolle" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL'Herbefolle est considérée depuis des temps reculés comme une plante magique associée à la magie noire.La pomme épineuse en onguent, en philtre ou en fumée provoque la déconnexion du réel, hallucinations et sommeil. Ses effets délétères l'ont fait surnommer l'herbe aux fous."
        ),
        _c("br"),
        _vm._v(
          "\nC'est une plante annuelle de un à sept pieds de haut, à odeur fétide, et à racine pivotante."
        ),
        _c("br"),
        _vm._v(
          "\nLes feuilles sont relativement grandes, jusqu'à huit pouces, ovales, fortement sinuées, portant des dents aiguës et à base asymétrique."
        ),
        _c("br"),
        _vm._v(
          "\nLes fleurs, solitaires, généralement blanches ou jaunâtres, de trois à six pouces de long à corolle soudée. Une variété porte des fleurs violacées."
        ),
        _c("br"),
        _vm._v(
          "\nLe fruit de forme ovoïde de la taille d'une noix, qui mûrit de l'été à l'automne, est dressé, couvert d'épines longues et robustes."
        ),
        _c("br"),
        _vm._v("\nLes graines réniformes sont noires.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nElle pousse dans les terres incultes : les champs, les friches, les décombres, les sables des cours d'eau, et aime les terres fraîchement retournées où elle est considérée comme une mauvaise herbe très envahissante."
        ),
        _c("br"),
        _vm._v("\nLe prospecteur devra réussir un test en survie:"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 12"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 3d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : important (4)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Jardinage")]),
        _vm._v(
          " (Survie DD 16, 2d6 doses) : Il est utile dans la lutte contre les parasite pour le maraichage."
        ),
        _c("br"),
        _vm._v("\nValeur : 2 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Rituels religieux")]),
        _vm._v(
          " ( Herboristerie DD 28, 1d6 doses) : Il est utilisé par certains peuples à des fins médicinales ou lors de rituels initiatiques. Il est notamment présent dans la composition du wysoccan, une préparation intervenant dans les rituels de passage à l'âge adulte des jeunes garçons chez les Uh'rs."
        ),
        _c("br"),
        _vm._v("\nValeur : 5 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Faiseur de zombi")]),
        _vm._v(
          " (Alchimie DD 30, 30 doses)L'Herbefolle entre dans les préparations utilisées par les faiseurs de zombis dans les royaumes Selmonites. Un zombi est une personne qui a été tuée puis réanimée par un sorcier.   Dans un premier temps, la victime absorbe à son insu un \"poison à zombi\" comportant des extraits séchés de crapaud de mer, du cartilage de poisson globe fou-fou et d'herbefolle. Sous l'effet des toxines, la victime perd connaissance. Son entourage la croyant morte procède à une inhumation. Dans les heures qui suivent l'enterrement, le sorcier réanime la personne zombifiée en lui donnant un \"antidote\" (Alchimie DD 35, 2d6 doses)."
        ),
        _c("br"),
        _vm._v("\nValeur : 20 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("antispasmodiques et sédatifs")]),
        _vm._v(
          "  ( Herboristerie DD 22, 1d6 doses) : Il a été utilisé comme plante médicinale pour ses effets antispasmodiques et sédatifs du système nerveux central, préconisée contre l'asthme et les névralgies."
        ),
        _c("br"),
        _vm._v("\nValeur : 5 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Traitement des maladies respiratoires")]),
        _vm._v(
          " ( Herboristerie DD 28) : L'Herbefolle est traditionnellement utilisé pour traiter l'asthme, la toux, la tuberculose et la bronchite , 1d6 doses, 1d6 points d’action et de magie récupérés."
        ),
        _c("br"),
        _vm._v("\nValeur : 12 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Herbe à fumer")]),
        _vm._v(
          " ( Herboristerie DD 28) : Les feuilles, les fleurs séchées sont fumées dans des pipes. La plante entre aussi dans diverses préparations sédatives pour calmer les patients atteints de troubles mentaux ,(2d6 doses, 3D6 points de Magie soignés)."
        ),
        _c("br"),
        _vm._v("\nValeur : 15 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Cataplasme")]),
        _vm._v(
          " ( Herboristerie DD 22, 2d6 doses) : Les cataplasmes de feuilles broyées sont prescrits pour les oedèmes inflammatoires ou les rhumatismes."
        ),
        _c("br"),
        _vm._v("\nValeur : 5 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Huile")]),
        _vm._v(
          " ( Herboristerie DD 35, 8d6 doses) : L'huile confectionnée avec les graines sert à masser les parties douloureuses pour 1d6+3 points d’action par dose."
        ),
        _c("br"),
        _vm._v("\nValeur : 4 pièce d’or la dose"),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Jus de feuille")]),
        _vm._v(
          " (Alchimie DD 22, 4d6 doses) : Une préparation faite de jus de feuilles d'Herbefolle est appliquée sur l'eczéma."
        ),
        _c("br"),
        _vm._v("\nValeur : 3 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("em", [_vm._v("Symptômes observés")]),
        _vm._v(
          " : Les premiers symptômes apparaissent très rapidement : sécheresse de la bouche, diminution des sécrétions, troubles visuels, dilatation des pupilles, élévation du rythme cardiaque, faiblesse musculaire pouvant aller jusqu'à une incapacité à se tenir debout. Les troubles du comportement, caractérisés par une désorientation spatio-temporelle, apparaissent ensuite. L'individu est congestionné, sa face et son cou sont rouges, il a une parole incohérente ou peut être trouvé dans un coma profond. Il arrive que l'individu décède avant une prise en charge médicale. L'individu a des hallucinations visuelles, auditives, il ne reconnaît plus ses proches et semble vouloir attraper des objets imaginaires. Les hallucinations sont décrites par les usagers comme cauchemardesques  souvent accompagnées de crises d'angoisse et de la perte des repères spatio-temporels. Le retour à la normale demande plusieurs jours. Il s'accompagne en général d'une amnésie totale ou partielle de l'épisode.\nL'état produit par la plante s'apparente à un état de somnambulisme, de rêve éveillé voire de folie, ce qui n'est pas du tout la cas des drogues psychédéliques. Ceci couplé aux difficultés extrêmes de dosage rend l'expérience délirogène hautement dangereuse."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "menelath" } }, [
        _vm._v("Menelath "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#menelath" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLe Menelath est un arbre à épines persistantes que l'on trouve dans les terres éternellement gelées au milieu de forêts de conifères. D'un vert sombre et profond, son fruit, comparable à une petite pomme de pin possède des propriétés antipoison découvertes par les peuples nordiques."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone forestière subissant le permafrost:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièces d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : moyen (3)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLe menelath est utilisé principalement pour ses hautes qualités antitoxiques."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Antidote")]),
        _vm._v(
          " (herboristerie/Survie DD 28, 1 dose) : Il faut 6 fruits (doses) de menelath pour créer ce puissant antidote contre les poisons circulatoirs. La préapration doit être bouillie pendant une durée de 20 minutes minimum. L'antidote permet de guérir tout poison circulatoir d'un DD inférieur à 16 et permet de résister aux poisons circulatoirs supérieurs avec un bonus au JS de +6."
        ),
        _c("br"),
        _vm._v("\nValeur : 65 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "menthagile" } }, [
        _vm._v("Menthagile "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#menthagile" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLes menthes forment un genre de plantes herbacées vivaces, comprenant de nombreuses espèces, dont beaucoup sont cultivées comme plantes aromatiques et condimentaires, ornementales ou médicinales. La Menthagile est l'une d'entre elle, très appréciée pour de nombreuses vertus."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLa Menthagile peut être assez courante sous réserve de découvrir des lieux où elle se développe car elle est peu expansive. On la trouve aussi bien en plaine qu'en montagne et sur de larges latitudes. Le prospecteur devra réussir un test en Survie:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 2 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : moyen (3)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLa menthagile est l’une des plantes médicinales les plus célèbres. Elle aurait des vertus digestives, spasmolytiques, carminatives, antiseptiques, toniques et stimulantes. Elle participerait à l’équilibre digestif et améliorerait le tonus général. La Menthagile est la plus utilisée en phytothérapie, pour ses propriétés, connues de la tradition et étudiées scientifiquement. La Menthagile est employée très couramment comme herbe aromatique, principalement dans les cuisines alcantes et shahiates, par exemple dans le thé à la menthagile ou le taboulé ptolème, et minghours avec les rouleaux fris et les salades."
        ),
        _c("br"),
        _vm._v("\nL'odeur est caractéristique de la saveur camphrée."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Essence de Menthagile")]),
        _vm._v(
          " ( Herboristerie DD 22, 2d6 doses) est moins soutenue car elle est plus pauvre."
        ),
        _c("br"),
        _vm._v("\nValeur : 3 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Huile essentielle")]),
        _vm._v(
          " ( Herboristerie DD 28, 3d6 doses) est très utilisée en aromathérapie , en phytothérapie et dans la médecine minghour. Elle ne doit pas être mise en contact avec les muqueuses tant qu'elle n'est pas diluée."
        ),
        _c("br"),
        _vm._v("\nValeur : 7 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Alcool")]),
        _vm._v(
          " (Artisanat DD 22, 2d6 doses), liqueur de menthe et sirop de Menthagile sont des boissons courantes, généralement colorées en vert ou bien incolores."
        ),
        _c("br"),
        _vm._v("\nValeur** : 8 pièces d’or la dose.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "L'un des effets les plus recherchés de la Menthagile est sa capacité à développer l'agilité et la souplesse de la personne qui l’ingurgite. Si la plante est préparée sous l'une de ses formes habituelles, le bénéficiaire obtient un bonus de +2 à tout ses jets d'acrobatie, discrétion, escamotage et aux JS de Dextérité pendant 1D6 x 10 minutes."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "mokth" } }, [
        _vm._v("Mokth "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#mokth" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLe mokth est un arbuste que l'on trouve dans les zones tempérées de moyenne montagne. D'un feuillage vert intense, l'arbuste devient orange/rouge à l'autmomne. Son fruit, la baie de mokth, comparable à une grosse mûre violette possède des propriétés antipoison."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone montagneuse tempérée:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 12"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièces d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : important (4)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLa baie de mokth est utilisée principalement pour ses hautes qualités antitoxiques."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Antidote")]),
        _vm._v(
          " (herboristerie/Survie DD 16, 1 dose) : Il faut 18 fruits (doses) de mokth pour créer ce puissant antidote contre les poisons respiratoire. L'antidote s'ingère. Il permet de guérir tout poison respiratoire d'un DD inférieur à 16 et permet de résister aux poisons circulatoirs supérieurs avec un bonus au JS de +4."
        ),
        _c("br"),
        _vm._v("\nValeur : 30 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "murcine" } }, [
        _vm._v("Murcine "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#murcine" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLa Mûrcine est une baie qui se récolte dans les dernières lunes de l'été. Ce fruit se présente comme une mûre de la taille d'un marron. Elle est protégée des prédateurs par une coque. Le fruit est noir et très sucré. Cette baie se cueille sur une plante qui prend la forme d'un arbuste."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nIl est possible de trouver cette plante le long de certains chemins mais peu de gens en connaissent les vertus. Elle se trouve aussi en bas de certaines falaises ensoleillées. On en trouve du nord au sud car cette plante s'acclimate aussi bien aux régions montagneuses du Sud qu'au climat plus froid des forêts nordiques. Elle est assez commune et le prospecteur devra réussir un test en Survie:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 3d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : très faible (1)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nIl y a plusieurs utilisations pour ces baies. Il s'agit de la seule partie de la plante qui est utilisable."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Confiture")]),
        _vm._v(
          " (Cuisine DD 8, 1d6 doses): 2D6 doses. très sucré, la confiture de Mûrcine permet de récupérer 2D6 points de Foi (ce qui explique la bedaine de nombreux religieux)."
        ),
        _c("br"),
        _vm._v("\nValeur : 5 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Potion")]),
        _vm._v(
          " ( Alchimie DD 22, 2d6 doses): 1 dose. soigne 1D6 points d’action. Soulage instantanément la constipation."
        ),
        _c("br"),
        _vm._v("\nValeur : 8 pièces d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "ognotte" } }, [
        _vm._v("Ognotte "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#ognotte" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL'ognotte est une espèce herbacée, vivace par son bulbe unique, cultivée comme une annuelle ou bisannuelle (floraison la deuxième année). C'est une plante haute de deux à quatre pieds, dont les feuilles de couleur verte sont cylindriques, creuses. La tige florale dressée est également creuse. Elle présente un renflement vers sa base. Le bulbe est relativement gros, de forme sphérique, parfois plus ou moins aplati. Les fleurs petites, de couleur blanche ou verte, sont regroupées en une ombelle sphérique, en position terminale sur la tige. Cette plante possède un bulbe qui lui permet de se reproduire."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v("\nLe prospecteur devra réussir un test en Survie:"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 12"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 3 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : inexistant (0)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Larmoiement")]),
        _vm._v(
          " : Couper des ognottes (ou bulbes ou feuilles de plantes proches de la même famille) provoque un larmoiement important, très irritantes pour les yeux. La réaction produisant l'agent lacrymogène étant optimale à température ambiante, on peut refroidir ou réchauffer l'oignon pour diminuer, voire éviter, le larmoiement."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Grenade désorientante")]),
        _vm._v(
          "  (Alchimie DD 22, 3d6 doses) : Cette propriété est utilisée par certains groupes d'assassin pour créer des engins désorientant qui permet de créer un grenade qui en explosant dans un rayon de 2m, aveugle et étourdi l'adversaire pendant 1D6 rounds à moins de réussir un JS de Constitution DD 16."
        ),
        _c("br"),
        _vm._v("\nValeur : 8 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Cuisine")]),
        _vm._v(
          " (Cuisine/Survie DD 8, 1d6 doses): ognottes cuisinés à l'huile dans une poêle. Plus l'ognotte est haché finement, plus il cuit rapidement, mais il change alors de saveur et de valeur nutritive. Un ognotte coupé perd une partie de son jus et de son arôme, c’est pourquoi il est recommandé de ne pas le préparer longtemps à l'avance et ne pas le laisser sur une planche à découper en bois. Il aura plus de goût et de valeur nutritive brièvement revenu dans l'huile ou dans un autre corps gras, en le laissant croustillant, sans le faire brunir. Manger de l'ognotte correctement cuisiné permet au consommateur d'obtenir un bonus de +1 aux JS de Constitution pendant 12 heures."
        ),
        _c("br"),
        _vm._v(
          "\nUtilisation médicinale: la suppression de l’hydropisie, qui est une accumulation anormale de sérosité dans le corps, généralement dans l’abdomen. La limitation des infiltrations de liquide séreux dans les organes, ce qui risque de provoquer des œdèmes. L’efficacité démontrée sur le système urinaire et sur la prostate : meilleur transit, limitation des infections."
        ),
        _c("br"),
        _vm._v("\nValeur : 4 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Potion")]),
        _vm._v(
          " ( Herboristerie DD 28, 3d6 doses) permet permet de doubler la vitesse de récupération naturelle."
        ),
        _c("br"),
        _vm._v("\nValeur : 10 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Onguent")]),
        _vm._v(
          " ( Herboristerie DD 16, 2d6 doses), il permet de récupérer 1D6 points d’action."
        ),
        _c("br"),
        _vm._v("\nValeur : 5 pièces d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "ortiefanne" } }, [
        _vm._v("Ortiefanne "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#ortiefanne" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nL'Ortiefanne se présente comme un plante assez haute et facilement reconnaissable. Elle ressemble à une grande fougère de couleur brune, ce qui lui donne d'être l'apparence d'être séchée ou fanée. La surface inférieure des feuilles est urticante et les démangeaisons peuvent durer assez longtemps: jusqu'à deux jours. Cet urticaire est assez douloureux, semblable en intensité à la piqure d'une guêpe."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nCette plante se trouve aux abords des zones boisées de milieux tempérés. Pour en trouver, le prospecteur doit réussir un test de survie:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 2d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v("\nValeur : 3 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : inexistant (0)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nL'Ortiefanne s'utilise de plusieurs manières à des fins curatives tout dépend de sa préparation. Une récolte permet de créer les produits suivants:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Tisane")]),
        _vm._v(
          " (Cuisine/Survie DD 8, 2d6 doses): Utile dans le cas de longues affections elle réduit d'un tiers la durée des soins."
        ),
        _c("br"),
        _vm._v("\nValeur : 6 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Onguent")]),
        _vm._v(
          " ( Alchimie DD 16, 1d6 doses): L'onguent d'Ortiefanne peut guérir facilement une blessure grave. Les test de guérison se font à DD 12."
        ),
        _c("br"),
        _vm._v("\nValeur : 12 pièce d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Potion")]),
        _vm._v(
          " ( Herboristerie DD 28): Une dose unique. Cette potion très puissante permet de récupérer 3D6 d’action et +4 à un JS de Constitution pour guérir une blessure grave. Une seule dose de cette potion peut-être ingurgitée sur une période de deux jours sous peine de se transformer en substance toxique rejetée par l'organisme et devenir un poison de virulent DD 22 qui entraîne un arrêt cardiaque."
        ),
        _c("br"),
        _vm._v("\nValeur : 10 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "palmirose" } }, [
        _vm._v("Palmirose "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#palmirose" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLe Palmirose à huile mesure soixante à soixante quinze pieds de haut, mais dans les palmeraies de culture les Palmirose ne dépassent pas quarante cinq pieds."
        ),
        _c("br"),
        _vm._v(
          "\nLes feuilles, pennées, mesurent de quinze à vingt un pieds de long, à pétiole très robuste et épineux. Elles forment une couronne symétrique en haut du stipe, entourant et protégeant le bourgeon végétatif."
        ),
        _c("br"),
        _vm._v(
          "\nLe fruit est une drupe charnue, de forme ovoïde, sessile. La pulpe, de couleur jaune-orangé, renferme près une grande quantité de lipides qui constituent l'huile de Palmirose. Les noix de palme sont groupées en régimes. Un régime peut porter jusqu'à quinze cents drupes."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v("\nLe prospecteur devra réussir un test en Survie:"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 3d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 1 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : très faible (1)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nOn tire du Palmirose une huile et une boisson alcoolisée mais aussi un somnifère puissant:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Huile")]),
        _vm._v(
          " ( Herboristerie DD 28, 3d6 doses) : L'huile de Palmirose est extraite par pression à chaud de la pulpe des fruits, de couleur rouge. Elle est très utilisée pour l'alimentation (friture, fabrication de margarines, matières grasses...). Elle est aussi très utilisée pour la fabrication de savon, et en cosmétologie."
        ),
        _c("br"),
        _vm._v("\nValeur : 10 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Vin")]),
        _vm._v(
          " (Cuisine/Survie DD 22, 2d6 doses) : Cette boisson alcoolisée n'a de vin que le nom puisqu'elle est issue du Palmirose et non de la vigne. Le vin de Palmirose est obtenu à partir de la fermentation de la sève du Palmirose. Juste après la récolte, il est sucré, mais fermente rapidement et le goût devient plus âpre. Il est consommé en chez les Ashkémithes."
        ),
        _c("br"),
        _vm._v("\nValeur : 9 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Somnifère")]),
        _vm._v(
          " ( Herboristerie DD 35, 3d6 doses) : permet de créer un somnifère alimentaire très rapide qui agit en 1D6 rounds, JS de Constitution DD 22 ou s'endormir pour 2D6 heures."
        ),
        _c("br"),
        _vm._v("\nValeur : 30 pièces d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "pleuracine" } }, [
        _vm._v("Pleuracine "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#pleuracine" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLe Pleuracine est un arbuste ou un petit arbre de 9 à vingt et un pieds (jusqu'à quarante cinq pieds dans certaines régions), dont les branches et rameaux sont couverts d'une écorce grise ou brunâtre, marquée de cicatrices foliaires. Ses racines développent des ramifications qui pointent hors du sol. Les feuilles opposées, coriaces sont elliptiques, lisses et luisantes en dessus, blanchâtres en dessous, aiguës aux deux extrémités. Elles possèdent des glandes à sels qui excrètent l'excès de sel."
        ),
        _c("br"),
        _vm._v("\nLe fruit est une capsule comprimée.")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nC'est un arbre caractéristique de la mangrove. Sa principale particularité est d'être pourvu de racines aériennes. Il dispose de racines en échasse qui lui permettent d'avancer sur la mer et d'affronter les vagues. Il affectionne par conséquent les zones boueuses ou les eaux peu profondes."
        ),
        _c("br"),
        _vm._v("\nLe prospecteur devra réussir un test en Survie:"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 16"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 1d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 4 pièce d’argent la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : inexistant (0)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLe bois sert à fabriquer des poteaux, du charbon de bois et du bois de chauffage. L'écorce est riche en tanin servant à tanner les peaux."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Fruit")]),
        _vm._v(
          " ( Herboristerie DD 22, 1d6 doses) : Le fruit est très amère mais permet de se nourrir dans les zones inhospitalières où poussent les Pleuracines. Certains cuisiniers l'ont confits et il est maintenant au menu de nombreuses cours des royaumes de Shahia."
        ),
        _c("br"),
        _vm._v("\nValeur : 30 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Glande à sel")]),
        _vm._v(
          " ( Herboristerie DD 22, 2d6 doses) : Les glandes à sel sont réputées pour ses fonctions culinaires. Le sel est parfumé et possède un goût unique qui l'a rendu très prisé sur les tables Ashkhémites."
        ),
        _c("br"),
        _vm._v("\nValeur : 3 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Noix")]),
        _vm._v(
          " ( Cuisine / Herboristerie DD 22, 1d6 doses) : La noix peut être grillée sur des poêles trouées prévues à cette effet. Une poignée de noix est aussi nourrissante qu'un bon repas."
        ),
        _c("br"),
        _vm._v("\nValeur : 3 pièces d’or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Huile")]),
        _vm._v(
          " ( Alchimie DD 35, 1d6 doses) : L'huile fabriquée par des procédés alchimiques n'est pas utilisable dans l'alimentation. Par contre, elle est réputée pour ses fonctions anti-fongiques et spermicides qui lui permettent d'être utilisée comme lubrifiant sans risque de procréer. Cette huile est largement utilisée dans les harems et certains bordels de luxe. Son coût de fabrication et de vente limite la clientèle."
        ),
        _c("br"),
        _vm._v("\nValeur : 33 pièces d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "quilum" } }, [
        _vm._v("Quilum "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#quilum" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLe quilum est une plante à large feuille que l'on trouve dans les zones tempérées à l'ombre des forêts de conifères. une fois par an, elle donne des petites fleures oranges en forme de lachettes nervurées de jaune. Cette fleure est phosporéscente et illumine la campagne à la tombée de la nuit. Sa racine noueuse possède des propriétés antipoison."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone tempérée dans des forêts de conifères:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 1d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 3 pièces d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : très faible (1)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLa racine de quilum est utilisée principalement pour ses hautes qualités antitoxiques."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Antidote")]),
        _vm._v(
          " (herboristerie/Survie DD 16, 1 dose) : Il faut 7 racines (doses) de quilum pour créer ce puissant antidote contre les poisons de conversion. La préparation doit bouillir 20 minutes au minimum. L'antidote permet de guérir tout poison de conversion d'un DD inférieur à 16 et permet de résister aux poisons de oonversion supérieurs avec un bonus au JS de +6."
        ),
        _c("br"),
        _vm._v("\nValeur : 49 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "shin" } }, [
        _vm._v("Shîn "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#shin" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLe shîn est une plante à fine feuille semblables à de la ciboulette mais de couleur pourpre que l'on trouve dans les zones côtières tempérées. Sa feuille possède des propriétés antipoison."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone côtière tempérée souvent à flanc de falaise:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 22"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 28"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 1d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 3 pièces d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : moyen (3)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLa feuille de shîn est utilisée principalement pour ses hautes qualités antitoxiques."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Antidote")]),
        _vm._v(
          " (herboristerie/Survie DD 16, 1 dose) : Il faut 16 feuilles (doses) de shîn pour créer ce puissant antidote contre les poisons nerveux. La préparation doit être ingérée. L'antidote permet de guérir tout poison nerveux d'un DD inférieur à 16 et permet de résister aux poisons de oonversion supérieurs avec un bonus au JS de +3."
        ),
        _c("br"),
        _vm._v("\nValeur : 27 pièce d’or la dose.")
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "ul-thazah" } }, [
        _vm._v("Ul'thazah "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#ul-thazah" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Description")]),
        _c("br"),
        _vm._v(
          "\nLe ul'thazah est une plante de la famille des lièrres de couleur noire que l'on trouve dans les zones volcaniques semi-arides. Sa feuille possède de très puissantes propriétés antipoison."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Localisation")]),
        _c("br"),
        _vm._v(
          "\nLe prospecteur devra réussir un test en Survie dans une zone volcaniques semi-arides:"
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Hivers")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Printemps")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Eté")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Automne")]),
        _vm._v(" :DD 35"),
        _c("br"),
        _vm._v(
          "\nEn cas de réussite, il trouvera 1d6 doses par heure de prospection."
        ),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Valeur")]),
        _vm._v(" : 30 pièces d'or la dose."),
        _c("br"),
        _vm._v(" "),
        _c("strong", [_vm._v("Facteur d'addiction")]),
        _vm._v(" : très important (5)")
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Utilisation")]),
        _c("br"),
        _vm._v(
          "\nLa feuille de Ul'thazah est utilisée principalement pour ses hautes qualités antitoxiques."
        ),
        _c("br"),
        _vm._v(" "),
        _c("em", [_vm._v("Antidote")]),
        _vm._v(
          " (herboristerie/Survie DD 16, 1 dose) : Il faut 9 feuilles (doses) de ul'thazah pour créer ce puissant antidote contre toutes formes de poisons. La préparation doit être ingérée. L'antidote permet de guérir toute forme de poison d'un DD inférieur à 22 et permet de résister aux autres poisons supérieurs avec un bonus au JS de +9."
        ),
        _c("br"),
        _vm._v("\nValeur : 430 pièce d’or la dose.")
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}