{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/utiliser-les-caracteristiques/README.md?vue&type=template&id=180033e6&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/utiliser-les-caracteristiques/README.md","mtime":1638434117491},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "utiliser-les-caracteristique" } }, [
        _vm._v("Utiliser les caractéristique "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#utiliser-les-caracteristique" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le profil physique et mental d'une créature est défini par six caractéristiques :"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("La "),
          _c("span", { staticClass: "text-capitalized" }, [
            _c("a", { attrs: { href: "#force" } }, [_vm._v("Force")])
          ]),
          _vm._v(" représente la puissance physique.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("La "),
          _c("span", { staticClass: "text-capitalized" }, [
            _c("a", { attrs: { href: "#dexterite" } }, [_vm._v("Dextérité")])
          ]),
          _vm._v(" représente l'agilité.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("La "),
          _c("span", { staticClass: "text-capitalized" }, [
            _vm._v("Constitution")
          ]),
          _vm._v(" représente l'endurance.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("L'"),
          _c("span", { staticClass: "text-capitalized" }, [
            _c("a", { attrs: { href: "#intelligence" } }, [
              _vm._v("Intelligence")
            ])
          ]),
          _vm._v(
            " représente la capacité à se souvenir et à suivre un raisonnement."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("La "),
          _c("span", { staticClass: "text-capitalized" }, [
            _c("a", { attrs: { href: "#sagesse" } }, [_vm._v("Sagesse")])
          ]),
          _vm._v(" représente la perception et l'intuition.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Le "),
          _c("span", { staticClass: "text-capitalized" }, [
            _c("a", { attrs: { href: "#charisme" } }, [_vm._v("Charisme")])
          ]),
          _vm._v(" représente la force de la personnalité.")
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Les trois jets de dés principaux du jeu (le "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(", le "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            " et le jet d'attaque) se basent sur les valeurs de ces six caractéristiques. L'introduction de cette documentation décrit les règles de base régissant ces jets de dés : lancez 3d6, ajoutez le modificateur de caractéristique correspondant à la valeur de l'une des six caractéristiques et comparez le résultat au nombre cible. Ces dés sont dits « explosifs » c’’est à dire que lorsqu’un 6 est tiré, 1 dés supplémentaire est ajouté au tirage et cela sans limite aucune."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "h2",
        { attrs: { id: "valeurs-de-caracteristiques-et-modificateurs" } },
        [
          _vm._v("Valeurs de caractéristiques et modificateurs "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#valeurs-de-caracteristiques-et-modificateurs" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "À chacune des caractéristiques correspond une valeur, qui définit la performance dans cette caractéristique. Une valeur de caractéristique n'est pas seulement un indicateur des caractéristiques innées, mais aussi de son entraînement et de ses compétences dans les activités liées à cette caractéristique."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Une valeur de 10 ou 11 est considérée comme normale pour un humain moyen, mais les aventuriers et de nombreux adversaires en tous genres ont des caractéristiques qui se situent généralement au-dessus de la moyenne. Un individu normal atteint rarement une valeur de plus de 18, mais les aventuriers peuvent atteindre des valeurs de caractéristique de 20 et les monstres et êtres divins peuvent monter jusqu'à 30."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "À chaque caractéristique correspond un modificateur. Ces modificateurs vont de -5 (pour une valeur de caractéristique de 1) à +10 (pour une valeur de caractéristique de 30). Vous pouvez trouver la liste des modificateurs de caractéristiques en fonction des valeurs (entre 1 et 30) dans le tableau ci-dessous."
        )
      ]),
      _vm._v(" "),
      _c(
        "h3",
        { attrs: { id: "valeurs-de-caracteristiques-et-modificateurs-2" } },
        [
          _vm._v("Valeurs de caractéristiques et modificateurs "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#valeurs-de-caracteristiques-et-modificateurs-2" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]
      ),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Valeur")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Modificateur")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("1")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("-5")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("2-3")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("-4")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("4-5")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("-3")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("6-7")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("-2")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("8-9")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("-1")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("10-11")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [_vm._v("0")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("12-13")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+1")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("14-15")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+2")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("16-17")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+3")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("18-19")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+4")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("20-21")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+5")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("22-23")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+6")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("24-25")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+7")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("26-27")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+8")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("28-29")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+9")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _c("strong", [_vm._v("30")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+10")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Pour déterminer un modificateur de caractéristique sans consulter le tableau, soustrayez 10 à la valeur de la caractéristique puis divisez le total par deux (en arrondissant à l'entier inférieur)."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Les modificateurs de caractéristique interviennent dans presque tous les jets d'attaque, "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("tests de caractéristique")]
          ),
          _vm._v(
            " et jets de sauvegarde. Ils sont donc utilisés bien plus souvent que les valeurs dont ils dépendent."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "avantage-et-desavantage" } }, [
        _vm._v("Avantage et Désavantage "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#avantage-et-desavantage" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Il se peut qu'une capacité spéciale ou un sort vous donne un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" ou un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(" lors d'un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(", un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(" ou un "),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            ". Quand cela arrive, vous devez lancer un d6 supplémentaire pour l'"
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" ou soustraire un d6 pour le "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Si un jet de dés est soumis à plusieurs effets qui donnent chacun un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" ou un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(
            ", vous ne pouvez pas lancer plus d'un dé supplémentaire. Par exemple, si deux situations favorables vous donnent l'"
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(", vous ne lancez quand même qu'un d6 supplémentaire.")
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Si un jet de dé est soumis à des effets qui donnent à la fois un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" et un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(
            ", vous devez considérer n'avoir aucun des deux. Cette règle s'applique aussi si vous subissez plusieurs "
          ),
          _c("em", [_vm._v("désavantages")]),
          _vm._v(" ou "),
          _c("em", [_vm._v("avantages")]),
          _vm._v(
            ", quels que soient leurs nombres respectifs. Dans une telle situation, vous n'obtenez pas d'"
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(", ni ne subissez de "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Quand vous bénéficiez d'un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" ou subissez un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(
            " et qu'un élément du jeu vous permet de relancer les 3d6, vous ne pouvez relancer qu'un seul dés 6. Par contre, vous pouvez choisir lequel. Par exemple, si un personnage obtient un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" ou subit un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(" pour un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " et obtient 13 avec 5,4,3 et 1, il peut utiliser son trait chanceux pour relancer le 1."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Vous obtenez généralement un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" ou subissez un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(
            " grâce à des capacités spéciales, des actions ou des sorts. L'inspiration peut aussi conférer un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(
            " à un personnage. Le MJ peut également décider que les circonstances influencent un jet de dé dans une direction ou une autre et choisir d'accorder un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" ou d'imposer un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(" en conséquence.")
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "bonus-de-maitrise" } }, [
        _vm._v("Bonus de maîtrise "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#bonus-de-maitrise" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Les personnages bénéficient d'un bonus de maîtrise en fonction de leur niveau. Les monstres disposent aussi de ce bonus, qui est intégré dans leurs statistiques. Ce bonus est utilisé pour les "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("tests de caractéristique")]
          ),
          _vm._v(", les jets de sauvegarde et les jets d'attaque.")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Votre bonus de maîtrise ne peut pas être ajouté plus de deux fois à un jet de dé ou à un autre nombre et cela que dans le cadre du développement du personnage."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le bonus peut s'appliquer plus d'une fois seulement si dans le cadre de l'évolution du personnage, il est possible de choisir une deuxième fois. Cela peut effectivement intervenir à la création du personnage (choix de l'ethnie et de la voie) puis ensuite lors du choix de l'Archétype au niveau 3.\nCela s'applique pour les compétences, les JS et le compétences d'armes. "
        ),
        _c("strong", [
          _vm._v("Le bonus de maîtrise ne s'ajoute jamais plus de deux fois.")
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "tests-de-caracteristique" } }, [
        _vm._v("Tests de caractéristique "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tests-de-caracteristique" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " permet de tester le talent inné et l'entraînement d'un personnage ou d'un adversaire face à un défi. Le MJ demande un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " quand un personnage ou un adversaire tente de réaliser une action (autre qu'une attaque) qui présente le risque d'échouer. Quand l'issue est incertaine, les dés déterminent le résultat d'une action."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Pour chaque "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            ", le MJ décide laquelle des six caractéristiques est la plus pertinente en fonction de la situation, et la difficulté de la tâche à accomplir, qui est représentée par un degré de difficulté (DD). Plus une tâche est difficile, plus son DD est élevé. Vous pouvez consulter le "
          ),
          _c("a", { attrs: { href: "#degres-de-difficulte-typiques" } }, [
            _vm._v("tableau des degrés de difficulté typiques")
          ]),
          _vm._v(" pour avoir une idée de l'échelle des DD les plus courants.")
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "degres-de-difficulte-typiques" } }, [
        _vm._v("Degrés de difficulté typiques "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#degres-de-difficulte-typiques" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Difficulté de l'action")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("DD")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Très facile")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [_vm._v("8")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Facile")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("12")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Modérée")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("16")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Difficile")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("22")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Très difficile")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("28")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Presque impossible")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("35")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Pour faire un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            ", lancez 3d6 et ajoutez le modificateur de caractéristique approprié. Comme pour tous les autres jets de 3d6, appliquez les bonus et malus et comparez le total au DD. Si le total est supérieur ou égal au DD, le "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " est un succès : la créature a réussi à surmonter le défi auquel elle était confrontée. Sinon, c'est un échec, ce qui signifie que le personnage ou l'adversaire ne progresse pas vers son objectif ou qu'il progresse, mais avec un effet négatif déterminé par le MJ."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les dés sont « explosifs », c’est à dire qu’un 6 permet de relancer un dés supplémentaire et cela autant de fois que nécessaire."
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "hero" }, [
        _c("p", [
          _vm._v(
            "Exemple : Sur un test de force , Gudulf à un bonus de Force +2 et un bonus de maîtrise de +2. Il lance donc 3d6+4. Il fait respectivement 6, 6 et 2 aux dés. Il lance 2d6 supplémentaires. Il obtient finalement 5 et 2. Le résultat de son test est la somme de tous ces dés avec les +4 de son bonus de force et de maîtrise, soit 25."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "opposition" } }, [
        _vm._v("Opposition "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#opposition" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Il peut arriver que les efforts d'un personnage ou d'un adversaire se retrouvent directement opposés à ceux d'un autre. Cela peut se produire si tous les deux cherchent à réaliser une même action et qu'un seul peut réussir, comme essayer d'attraper une dague qui est tombée par terre. Cette situation survient aussi quand l'un des deux tente d'empêcher l'autre d'atteindre son but, par exemple quand un adversaire tente d'ouvrir de force une porte qu'un personnage est en train de bloquer. Dans ce type de situation, le résultat est déterminé par un type spécial de "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(" appelé "),
          _c("em", [_vm._v("test opposé")]),
          _vm._v(" ou "),
          _c("em", [_vm._v("test en opposition")]),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Les deux adversaires qui s'opposent font un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " correspondant à l'action qu'ils tentent de réaliser. Ils appliquent tous les bonus et malus appropriés mais, au lieu de comparer leur résultat à un DD, ils comparent leurs résultats entre eux. Le personnage ou le monstre qui a le résultat le plus élevé l'emporte et réussit son action, ou empêche son adversaire de réussir sa propre action."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Si les résultats des tests sont identiques, la situation n'évolue pas et reste la même qu'auparavant. Un des deux adversaires peut donc gagner par défaut. Si deux personnages s'opposent pour tenter d'attraper une dague qui est tombée par terre se retrouvent à égalité, aucun ne réussit à l'attraper. Si un adversaire qui cherche à ouvrir de force une porte s'oppose à un personnage qui essaie de la garder fermée et qu'ils se retrouvent à égalité, cela signifie que la porte reste fermée."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "competences" } }, [
        _vm._v("Compétences "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#competences" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "À chaque caractéristique est associé un large éventail de capacités, et notamment des compétences qu'un personnage ou un adversaire (PNJ, Créature ou bête) peut maîtriser. Les compétences initialement maîtrisées par un personnage sont déterminées au moment de sa création et celles maîtrisées par un adversaire sont indiquées dans ses statistiques."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Par exemple, un test de Dextérité peut refléter la tentative d'un personnage de réaliser une acrobatie, de voler un objet ou de rester caché. À chacun de ces aspects de la Dextérité est associée une compétence particulière. Ici, il s'agit respectivement d'Acrobaties, d'Escamotage et de Discrétion. Un personnage qui maîtrise la compétence Discrétion est donc particulièrement doué quand il doit faire des tests de Dextérité liés à la furtivité ou au fait de se cacher."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les compétences liées à chaque valeur de caractéristique sont présentées dans la liste ci-dessous. Aucune compétence n'est associée à la Constitution. Plus loin dans ce chapitre, vous pourrez trouver un descriptif de chaque caractéristique avec des exemples de l'utilisation des compétences associées."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "force" } }, [
        _vm._v("Force "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#force" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("a", { attrs: { href: "#athletisme" } }, [_vm._v("Athlétisme")])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "dexterite" } }, [
        _vm._v("Dextérité "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#dexterite" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("a", { attrs: { href: "#acrobaties" } }, [_vm._v("Acrobaties")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#discretion" } }, [_vm._v("Discrétion")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#escamotage" } }, [_vm._v("Escamotage")])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "intelligence" } }, [
        _vm._v("Intelligence "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#intelligence" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("a", { attrs: { href: "#arcanes" } }, [_vm._v("Arcanes")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#histoire" } }, [_vm._v("Histoire")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#investigation" } }, [
          _vm._v("Investigation")
        ]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#nature" } }, [_vm._v("Nature")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#religion" } }, [_vm._v("Religion")])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "sagesse" } }, [
        _vm._v("Sagesse "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#sagesse" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _c("a", { attrs: { href: "#dressage" } }, [_vm._v("Dressage")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#medecine" } }, [_vm._v("Médecine")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#perception" } }, [_vm._v("Perception")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#perspicacite" } }, [_vm._v("Perspicacité")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#survie" } }, [_vm._v("Survie")])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "charisme" } }, [
        _vm._v("Charisme "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#charisme" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("a", { attrs: { href: "#intimidation" } }, [_vm._v("Intimidation")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#persuasion" } }, [_vm._v("Persuasion")]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#representation" } }, [
          _vm._v("Représentation")
        ]),
        _c("br"),
        _vm._v(" "),
        _c("a", { attrs: { href: "#supercherie" } }, [_vm._v("Supercherie")])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Il peut arriver que le MJ demande un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " lié à une compétence spécifique. Par exemple, un test de Sagesse (Perception). Un joueur peut aussi demander au MJ si sa maîtrise d'une compétence donnée s'applique à un test. Dans les deux cas, la maîtrise d'une compétence permet à un personnage d'ajouter son bonus de maîtrise au "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " lié à cette compétence. S'il ne maîtrise pas la compétence, le personnage fait un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(" normal.")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Par exemple, si un personnage tente d'escalader une falaise escarpée, le MJ peut lui demander de faire un test de Force (Athlétisme). Si le personnage maîtrise la compétence Athlétisme, il ajoute son bonus de maîtrise à son test de Force. S'il ne maîtrise pas cette compétence, il réalise simplement un test de Force."
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "hero" }, [
        _c(
          "h4",
          {
            attrs: {
              id:
                "option-competences-associees-avec-differentes-caracteristiques"
            }
          },
          [
            _vm._v(
              "Option : compétences associées avec différentes caractéristiques "
            ),
            _c(
              "a",
              {
                staticClass: "header-anchor",
                attrs: {
                  href:
                    "#option-competences-associees-avec-differentes-caracteristiques"
                }
              },
              [
                _c("i", {
                  staticClass: "v-icon notranslate mdi mdi-link-variant"
                })
              ]
            )
          ]
        ),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Normalement, votre maîtrise d'une compétence n'intervient que dans des "
            ),
            _c(
              "RouterLink",
              {
                attrs: {
                  to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
                }
              },
              [_vm._v("tests de caractéristique")]
            ),
            _vm._v(
              " spécifiques. Maîtriser l'Athlétisme, par exemple, n'est généralement utile que pour les tests de Force. Dans certaines situations, cependant, votre maîtrise peut raisonnablement être utilisée pour différents types de tests. Dans ce cas, le MJ peut vous demander de réaliser un test avec une combinaison inhabituelle de caractéristique et de compétence, ou bien vous pouvez demander à votre MJ d'utiliser une maîtrise dans le cadre d'un test différent. Par exemple, si vous partez d'une île et que vous devez rejoindre le continent à la nage, votre MJ peut vous demander de faire un test de Constitution pour vérifier que vous êtes assez résistant pour accomplir cet exploit. Dans ce cas, votre MJ peut vous permettre d'utiliser votre maîtrise de l'Athlétisme et demander un test de Constitution (Athlétisme). Si vous maîtrisez la compétence Athlétisme, vous appliquez votre bonus de maîtrise au test de Constitution comme vous le feriez pour un test de Force (Athlétisme). De la même manière, quand un barbare demi-orc étalage de sa force pour intimider un ennemi, votre MJ peut vous demander de faire un test de Force (Intimidation), même si la compétence Intimidation est normalement associée au Charisme."
            )
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "tests-passifs" } }, [
        _vm._v("Tests passifs "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#tests-passifs" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Un test passif est un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " particulier qui n'implique pas de jet de dé. Un tel test peut représenter un résultat moyen réalisé pour une tâche répétitive, comme chercher des portes secrètes, encore et encore, ou il peut être utilisé quand le MJ veut secrètement déterminer si les personnages réussissent quelque chose sans avoir à lancer de dés, comme remarquer un adversaire caché, par exemple."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Voilà comment déterminer le résultat d'un personnage à un test passif :"
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "10 + tous les modificateurs qui s'appliquent normalement au test."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Si un personnage obtient un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(
            " pour ce test, ajoutez 5 au résultat. Si le personnage subit un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(
            ", soustrayez 5 au résultat. Le jeu se réfère au résultat d'un test passif sous le terme de valeur passive."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Par exemple, si un personnage de niveau 1 a une valeur de Sagesse de 12 et maîtrise la compétence Perception, sa valeur passive de Sagesse (Perception) est de 13."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Les règles pour se cacher, dans la section "),
          _c("a", { attrs: { href: "#dexterite" } }, [_vm._v("Dextérité")]),
          _vm._v(" ci-après, et les règles d'exploration décrites dans le "),
          _c(
            "RouterLink",
            { attrs: { to: "/partir-a-l-aventure/#deplacement" } },
            [_vm._v("Partir à l'aventure - Déplacement")]
          ),
          _vm._v(" se basent sur des tests passifs.")
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "travailler-ensemble" } }, [
        _vm._v("Travailler ensemble "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#travailler-ensemble" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Parfois, deux personnages ou plus se rassemblent pour tenter de réaliser une action. Le personnage qui mène cet effort commun – ou celui qui possède le modificateur de caractéristique le plus élevé – peut faire un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(" avec un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(
            ", qui traduit l'aide qu'il reçoit des autres personnages. En combat, il faut utiliser l'action "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#aider" } }, [
            _c("em", [_vm._v("aider")])
          ]),
          _vm._v(" pour obtenir un effet similaire.")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un personnage peut seulement apporter son aide s'il serait en mesure d'accomplir l'action seul. Par exemple, essayer de crocheter une serrure demande de maîtriser les outils de voleur, donc un personnage qui ne dispose pas de cette maîtrise ne pourra pas aider un autre personnage qui tente d'accomplir cette tâche. De plus, un personnage ne peut en aider un autre que si l'association de deux individus ou plus permet de réaliser cette tâche plus facilement. Certaines tâches, comme enfiler un fil dans le chas d'une aiguille, ne sont pas simplifiées parce qu'on vous aide."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tests-de-groupe" } }, [
        _vm._v("Tests de groupe "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#tests-de-groupe" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Quand plusieurs individus tentent d'accomplir quelque chose en tant que groupe, le MJ peut leur demander de faire un seul "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " pour le groupe. Dans une telle situation, les personnages qui sont compétents dans un domaine donné peuvent compenser les carences des autres."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Pour faire un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " de groupe, tous les membres du groupe concerné doivent faire un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            ". Si au moins la moitié d'entre eux réussit, on considère que le test est un succès et tout le groupe réussit. Dans le cas contraire, c'est un échec."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Les tests de groupe ne sont pas fréquents. Ils interviennent quand tous les personnages réussissent ou échouent ensemble. Par exemple, quand les aventuriers traversent un marais, le MJ peut leur demander de réaliser un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " de groupe de Sagesse (Survie) afin de vérifier s'ils évitent les sables mouvants, les trous d'eau ou tout autre danger naturel qui se trouve dans leur environnement. Si au moins la moitié du groupe réussit, les personnages qui ont réussi leur test aident les autres à éviter les dangers. Sinon, l'ensemble du groupe tombe dans l'un de ces pièges."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "utiliser-les-caracteristiques" } }, [
        _vm._v("Utiliser les caractéristiques "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#utiliser-les-caracteristiques" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Chaque action qu'un personnage ou un adversaire tente de réaliser dans le jeu fait appel à l'une des six caractéristiques. Vous trouverez dans cette section une présentation de chacune de ces caractéristiques et de la façon dont elles sont utilisées dans le cadre du jeu."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "force-2" } }, [
        _vm._v("Force "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#force-2" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "La Force détermine la puissance physique d'un personnage, ses compétences en athlétisme et dans quelle mesure il peut se reposer sur sa force brute."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tests-de-force" } }, [
        _vm._v("Tests de force "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#tests-de-force" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test de Force est utilisé lors de toute tentative visant à soulever, pousser, tirer ou briser quelque chose, forcer le passage ou utiliser la force brute d'une manière ou d'une autre. La compétence Athlétisme reflète votre aptitude à réaliser certains tests de Force."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "athletisme" } }, [
        _vm._v("Athlétisme "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#athletisme" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les tests de Force (Athlétisme) sont utilisés dans certaines situations que vous rencontrez quand vous escaladez un mur, sautez ou nagez. Par exemple :"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Vous tentez d'escalader une falaise escarpée ou glissante, éviter certains dangers en escaladant un mur, ou vous agripper à quelque chose pendant qu'on essaie de vous en déloger."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Vous tentez de traverser une distance particulièrement importante d'un bond ou de faire une cascade en plein saut."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Vous tentez de nager à contre-courant ou de garder la tête hors de l'eau au milieu des flots déchaînés, ballotté par les vagues lors d'une tempête, ou au milieu d'une zone envahie par les algues. Ou bien vous vous trouvez confronté à une créature qui tente de vous tirer ou vous pousser sous l'eau, ou encore de vous empêcher de nager."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "autres-tests-de-force" } }, [
        _vm._v("Autres tests de Force "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#autres-tests-de-force" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ peut aussi vous demander de faire un test de Force quand vous tentez d'accomplir des tâches comme celles qui suivent :"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Ouvrir de force une porte bloquée, fermée à clef ou barrée.")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Vous libérer de liens par la force.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Forcer votre passage dans un tunnel trop petit pour vous.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Rester accroché derrière un chariot en mouvement pendant qu'il vous traîne."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Renverser une statue.")]),
        _vm._v(" "),
        _c("li", [_vm._v("Empêcher un rocher de tomber.")])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "jets-d-attaque" } }, [
        _vm._v("Jets d'attaque "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#jets-d-attaque" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Quand vous attaquez avec une arme de corps-à-corps comme une masse d'armes, une hache d'armes ou une javeline, vous ajoutez votre modificateur de Force à votre "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            ". Vous pouvez utiliser des armes de corps-à-corps pour faire des attaques au corps-à-corps et certaines peuvent être lancées pour faire des attaques à distance."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h4", { attrs: { id: "soulever-et-transporter" } }, [
        _vm._v("Soulever et transporter "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#soulever-et-transporter" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Votre valeur de Force détermine le poids que vous pouvez porter. Les termes suivants déterminent ce que vous pouvez soulever ou porter."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Capacité de charge")]),
        _vm._v(
          ". Votre capacité de charge maximale est égale à votre valeur de Force multipliée par 7,5. Il s'agit du poids (en kilogrammes) que vous pouvez porter. Cette capacité est assez élevée pour que la plupart des personnages ne s'en inquiètent pas."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Pousser, tirer, soulever")]),
        _vm._v(
          ". Vous pouvez pousser, tirer ou soulever un poids qui fait jusqu'à deux fois votre capacité de charge maximale, soit 15 fois votre valeur de Force. Cela dit, tant que vous poussez ou tirez un poids qui excède votre capacité de charge, votre vitesse est réduite à 1,50 mètres."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Taille et Force")]),
        _vm._v(
          ". Les grandes créatures peuvent porter des poids plus importants que les petites. Pour chaque catégorie de taille au-dessus de la taille moyenne, doublez la capacité de charge d'une créature et le poids qu'elle peut pousser, tirer ou soulever. Pour une créature de taille très petite , divisez ces valeurs par deux."
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "hero" }, [
        _c("h5", { attrs: { id: "option-encombrement" } }, [
          _vm._v("Option : Encombrement "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#option-encombrement" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Les règles permettant de gérer ce que peuvent porter les personnages sont intentionnellement simples. Voilà donc une variante, si vous vous cherchez des règles plus précises permettant de déterminer la gêne occasionnée par le poids de l'équipement d'un personnage. Si vous utilisez cette variante, vous pouvez ignorer la colonne Force du "
            ),
            _c(
              "RouterLink",
              { attrs: { to: "/armures/#tableau-des-armures" } },
              [_vm._v("tableau des armures")]
            ),
            _vm._v(".")
          ],
          1
        ),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Vous êtes encombré si votre charge dépasse votre valeur de Force multipliée par 2,5. Cela signifie que votre vitesse est réduite de 3 mètres."
          )
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Si votre charge dépasse votre valeur de Force multipliée par 5, vous êtes lourdement encombré, ce qui signifie que votre vitesse est réduite de 6 mètres et que vous subissez un "
            ),
            _c(
              "RouterLink",
              {
                attrs: {
                  to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
                }
              },
              [_c("em", [_vm._v("désavantage")])]
            ),
            _vm._v(" pour tous les "),
            _c(
              "RouterLink",
              {
                attrs: {
                  to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
                }
              },
              [_vm._v("tests de caractéristique")]
            ),
            _vm._v(
              ", les jets d'attaque et les jets de sauvegarde liés à la Force, la Dextérité ou la Constitution."
            )
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "dexterite-2" } }, [
        _vm._v("Dextérité "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#dexterite-2" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "La Dextérité représente tout ce qui a trait à l'agilité, les réflexes et l'équilibre."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tests-de-dexterite" } }, [
        _vm._v("Tests de Dextérité "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tests-de-dexterite" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test de Dextérité peut être fait pour tester toutes vos tentatives de vous déplacer rapidement, avec agilité ou en silence, ou pour vous éviter de chuter sur des surfaces irrégulières. Les compétences Acrobaties, Escamotage et Discrétion représentent des facettes de cette caractéristique utilisées pour certains tests de Dextérité."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "acrobaties" } }, [
        _vm._v("Acrobaties "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#acrobaties" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les tests de Dextérité (Acrobaties) servent à déterminer si vous restez sur vos pieds dans une situation délicate, comme quand vous tentez de courir sur une plaque de verglas ou de garder l'équilibre sur une corde tendue ou sur le pont d'un bateau en train de tanguer. Le MJ peut aussi vous demander de faire un test de Dextérité (Acrobaties) pour voir si vous pouvez réaliser des cascades acrobatiques comme des plongeons, des roulades, des sauts périlleux et des saltos."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "discretion" } }, [
        _vm._v("Discrétion "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#discretion" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Faites un test de Dextérité (Discrétion) quand vous tentez de vous cacher à l'approche de vos ennemis, de vous faufiler discrètement à côté de gardes, de quitter un endroit sans vous faire remarquer ou de vous approcher de quelqu'un sans vous faire voir ou entendre."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "escamotage" } }, [
        _vm._v("Escamotage "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#escamotage" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Quand vous tentez de réaliser un tour de passe-passe, comme cacher un objet sur quelqu'un ou dissimuler un objet sur votre personne, vous devez faire un test de Dextérité (Escamotage). Le MJ peut aussi demander un test de Dextérité (Escamotage) pour déterminer si vous arrivez à voler la bourse d'une autre personne ou lui glisser quelque chose dans la poche."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "autres-tests-de-dexterite" } }, [
        _vm._v("Autres tests de Dextérité "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#autres-tests-de-dexterite" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ peut vous demander de faire un test de Dextérité quand vous tentez d'accomplir des tâches comme celles qui suivent :"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Maîtriser une charrette lourdement chargée dans une descente."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Prendre un virage serré avec une carriole.")]),
        _vm._v(" "),
        _c("li", [_vm._v("Crocheter une serrure.")]),
        _vm._v(" "),
        _c("li", [_vm._v("Désamorcer un piège.")]),
        _vm._v(" "),
        _c("li", [_vm._v("Attacher un prisonnier de manière sûre.")]),
        _vm._v(" "),
        _c("li", [_vm._v("Vous libérer de liens.")]),
        _vm._v(" "),
        _c("li", [_vm._v("Jouer d'un instrument à cordes.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Fabriquer un petit objet ou un objet avec des détails.")
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "jets-d-attaque-2" } }, [
        _vm._v("Jets d'attaque "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#jets-d-attaque-2" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Quand vous attaquez avec une arme à distance, comme une fronde ou un arc, ajoutez votre modificateur de Dextérité à votre "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            ". Vous pouvez aussi ajouter votre modificateur de Dextérité à vos jets d'attaque quand vous attaquez avec une arme de corps-à-corps qui possède la propriété finesse, comme une dague ou une rapière."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h4", { attrs: { id: "valeur-de-defense" } }, [
        _vm._v("Valeur de défense "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#valeur-de-defense" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Votre modificateur de Dextérité intervient dans le calcul de à votre Valeur de Défense. La Dextérité représente la capacité du personnage à éviter physiquement le danger."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "initiative" } }, [
        _vm._v("Initiative "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#initiative" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Au début de chaque combat, vous déterminez votre initiative en faisant un test de Dextérité. L'initiative détermine l'ordre des tours des créatures pendant le combat."
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "hero" }, [
        _c("h4", { attrs: { id: "se-cacher" } }, [
          _vm._v("Se cacher "),
          _c(
            "a",
            { staticClass: "header-anchor", attrs: { href: "#se-cacher" } },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Le MJ décide quelles circonstances sont appropriées pour que vous vous cachiez. Quand vous tentez de vous cacher, faites un test de Dextérité (Discrétion). Jusqu'à ce que vous soyez découvert, ce test est en opposition avec le test de Sagesse (Perception) de tout adversaire qui cherche activement des signes de votre présence."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Vous ne pouvez pas vous cacher d'un adversaire qui peut déjà vous voir clairement, et si vous faites du bruit, comme lancer un avertissement ou renverser un vase, vous révélez votre position."
          )
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v("Un adversaire "),
            _c(
              "RouterLink",
              { attrs: { to: "/gerer-la-sante-du-personnage/#invisible" } },
              [_c("em", [_vm._v("invisible")])]
            ),
            _vm._v(
              " peut toujours tenter de se cacher, mais des signes de son passage peuvent être remarqués et il doit rester silencieuse."
            )
          ],
          1
        ),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Pendant un combat, la plupart des adversaires restent attentifs aux signes de danger qui les entourent, donc si vous sortez de votre cachette pour vous approcher d'un adversaire, il est probable qu'il vous remarque. Néanmoins, dans certaines circonstances, le MJ peut vous permettre de vous approcher d'un adversaire distrait en restant caché, ce qui vous permet d'obtenir un "
            ),
            _c(
              "RouterLink",
              {
                attrs: {
                  to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
                }
              },
              [_c("em", [_vm._v("avantage")])]
            ),
            _vm._v(" sur votre attaque avant qu'elle ne vous remarque.")
          ],
          1
        ),
        _vm._v(" "),
        _c("h5", { attrs: { id: "perception-passive" } }, [
          _vm._v("Perception passive "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#perception-passive" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "Quand vous êtes caché, il y a toujours un risque pour que vous vous fassiez remarquer par un adversaire qui ne vous cherche pas. Pour déterminer si une tel adversaire vous remarque, le MJ compare votre test de Dextérité (Discrétion) avec la valeur passive de Sagesse (Perception) de cet adversaire, qui est égale à 10 + le modificateur de Sagesse de l'adversaire, ainsi que tout autre bonus ou malus. Si l'adversaire bénéficie d'un "
            ),
            _c(
              "RouterLink",
              {
                attrs: {
                  to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
                }
              },
              [_c("em", [_vm._v("avantage")])]
            ),
            _vm._v(
              ", ajoutez 5 à sa valeur passive. Si au contraire il subit un "
            ),
            _c(
              "RouterLink",
              {
                attrs: {
                  to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
                }
              },
              [_c("em", [_vm._v("désavantage")])]
            ),
            _vm._v(
              ", retirez 5 à sa valeur passive. Par exemple, pour un personnage (avec un bonus de maîtrise de +2), avec une Sagesse de 12 (donc un modificateur de +1) et la maîtrise la compétence Perception, sa valeur passive de Sagesse (Perception) est de 13."
            )
          ],
          1
        ),
        _vm._v(" "),
        _c("h5", { attrs: { id: "que-pouvez-vous-voir" } }, [
          _vm._v("Que pouvez-vous voir ? "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#que-pouvez-vous-voir" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c(
          "p",
          [
            _vm._v(
              "L'un des facteurs principaux qui permet de déterminer si vous détectez une créature ou un objet dissimulé est votre visibilité dans la zone concernée. Celle-ci peut en effet être une zone avec une visibilité réduite ou nulle, ainsi que c'est expliqué dans le chapitre "
            ),
            _c(
              "RouterLink",
              { attrs: { to: "/partir-a-l-aventure/#vision-et-lumiere" } },
              [_c("em", [_vm._v("Partir à l'aventure - Vision et lumière")])]
            ),
            _vm._v(".")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "constitution" } }, [
        _vm._v("Constitution "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#constitution" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "La Constitution représente la santé, l'endurance et la force vitale."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tests-de-constitution" } }, [
        _vm._v("Tests de Constitution "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tests-de-constitution" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les tests de Constitution ne sont pas fréquents, et il n'y a pas de compétence associée à cette caractéristique car l'endurance qu'elle représente est essentiellement une qualité passive qui ne demande pas d'effort particulier de la part d'un personnage ou d'un monstre. Un test de Constitution peut néanmoins représenter une tentative de repousser vos limites."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ peut vous demander de faire un test de Constitution quand vous tentez d'accomplir des tâches comme celles qui suivent :"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [_vm._v("Retenir votre respiration.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Marcher ou travailler pendant des heures sans vous reposer.")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Lutter contre le sommeil.")]),
        _vm._v(" "),
        _c("li", [_vm._v("Survivre sans eau ni nourriture.")]),
        _vm._v(" "),
        _c("li", [_vm._v("Vider une chope de bière d'un trait.")])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "points-d-action" } }, [
        _vm._v("Points d’Action "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#points-d-action" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vos points d’action dépendent en partie de votre de Constitution. Pour déterminer votre nombre de points d’action, vous devez généralement ajouter à votre Constitution vos points d’action de votre Voie de personnage multiplié par votre niveau.\nSi votre Constitution change, votre maximum de points d’action est lui aussi modifié."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "intelligence-2" } }, [
        _vm._v("Intelligence "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#intelligence-2" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "L'intelligence représente la vivacité d'esprit, la mémoire et la capacité de raisonnement."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tests-d-intelligence" } }, [
        _vm._v("Tests d'Intelligence "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tests-d-intelligence" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test d'Intelligence intervient quand vous devez faire appel à la logique, à votre éducation, à vos souvenirs ou à vos capacités de déduction. Les compétences Arcane, Histoire, Investigation, Nature et Religion représentent des facettes de cette caractéristique et requièrent des tests d'Intelligence."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "arcanes" } }, [
        _vm._v("Arcanes "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#arcanes" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test d'Intelligence (Arcanes) permet de déterminer votre capacité à vous remémorer vos connaissances concernant les sorts, les objets magiques, les symboles mystiques, les traditions magiques, les plans d'existence et les habitants de ces plans."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "histoire" } }, [
        _vm._v("Histoire "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#histoire" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test d'Intelligence (Histoire) permet de mesurer votre capacité à vous remémorer vos connaissances concernant les événements historiques, les personnages de légende, les royaumes antiques, les conflits passés, les guerres récentes et les civilisations perdues."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "investigation" } }, [
        _vm._v("Investigation "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#investigation" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Faites un test d'Intelligence (Investigation) quand vous cherchez des indices dans votre environnement. Si vous réussissez, vous pouvez deviner où un objet a été caché, déduire de l'apparence d'une blessure l'objet qui l'a causée ou, dans un tunnel, déterminer quel point faible pourrait permettre de le faire s'effondrer. Vous pouvez aussi faire un test d'Intelligence (Investigation) quand vous lisez des parchemins antiques afin d'y découvrir une information dissimulée."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "nature" } }, [
        _vm._v("Nature "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#nature" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test d'Intelligence (Nature) permet de mesurer votre capacité à vous remémorer vos connaissances des différents terrains, de la faune et de la flore, du climat et des cycles naturels."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "religion" } }, [
        _vm._v("Religion "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#religion" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test d'Intelligence (Religion) permet de mesurer votre capacité à vous remémorer vos connaissances relatives aux déités, rites, prières, clergés, symboles sacrés et les pratiques des cultes secrets."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "autres-tests-d-intelligence" } }, [
        _vm._v("Autres tests d'Intelligence "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#autres-tests-d-intelligence" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ peut vous demander de faire un test d'Intelligence quand vous tentez d'accomplir des tâches comme celles qui suivent :"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Communiquer avec une créature en vous passant de mots.")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Estimer la valeur d'un objet précieux.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Vous déguiser pour passer pour un garde de la ville.")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Falsifier un document.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Vous rappeler de vos connaissances relatives à un métier.")
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("L'emporter dans un jeu de stratégie.")])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "caracteristique-d-incantation" } }, [
        _vm._v("Caractéristique d'incantation "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#caracteristique-d-incantation" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Certaines personnes utilisent l'Intelligence comme caractéristique d'incantation et afin de déterminer les DD des jets de sauvegarde de leurs sorts. Cette caractéristique détermine les points de magie (PM)"
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "sagesse-2" } }, [
        _vm._v("Sagesse "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#sagesse-2" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "La Sagesse représente votre sensibilité au monde qui vous entoure, votre perspicacité et votre intuition."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tests-de-sagesse" } }, [
        _vm._v("Tests de Sagesse "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tests-de-sagesse" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test de Sagesse peut refléter une tentative de décrypter le langage corporel d'une créature, de comprendre les sentiments de quelqu'un, de remarquer des éléments dans votre environnement ou de prendre soin d'une personne blessée. Les compétences Dressage, Perspicacité, Médecine, Perception et Survie représentent des facettes de cette caractéristique utilisées pour certains tests de Sagesse."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "dressage" } }, [
        _vm._v("Dressage "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#dressage" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ peut vous demander de faire un test de Sagesse (Dressage) pour savoir si vous parvenez à calmer un animal domestique, à empêcher une monture de s'affoler ou à deviner les intentions d'un animal. Vous devez aussi faire un test de Sagesse (Dressage) pour contrôler votre monture lors d'une manœuvre risquée."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "medecine" } }, [
        _vm._v("Médecine "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#medecine" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test de Sagesse (Médecine) vous permet de tenter de stabiliser un compagnon à l'agonie (DD 16) ou de diagnostiquer une maladie (DD Variable selon la maladie). Cette compétence permet de stopper des saignements hémorragiques de 1 à 10 points d'action par round (DD 16) ou de 11 et + par round (DD 22)."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "perception" } }, [
        _vm._v("Perception "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#perception" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous faites un test de Sagesse (Perception) afin de repérer, entendre ou détecter d'une manière ou d'une autre une présence. Ce test permet de tester votre attention et votre sensibilité à votre environnement et la finesse de vos sens. Par exemple, vous pouvez tenter d'écouter une conversation à travers une porte fermée ou par une fenêtre entrouverte, ou bien d'entendre des monstres qui se déplacent furtivement dans une forêt. Ou vous pouvez tenter de repérer des choses dissimulées ou difficiles à remarquer, comme des orcs en embuscade le long d'une route, des brigands qui se cachent dans les ombres d'une ruelle ou la lumière d'une bougie visible dans les interstices d'une porte secrète."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "perspicacite" } }, [
        _vm._v("Perspicacité "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#perspicacite" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test de Sagesse (Perspicacité) permet de déterminer si vous parvenez à discerner les véritables intentions d'une créature, par exemple quand vous cherchez à deviner si une personne ment ou que vous tentez de prédire ce qu'elle va faire. Pour y arriver, vous devez percevoir des indices dans son langage corporel, sa manière de parler et son comportement."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "survie" } }, [
        _vm._v("Survie "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#survie" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ peut vous demander de faire un test de Sagesse (Survie) si vous tentez de suivre une piste, de chasser du gibier, de guider votre groupe à travers un désert glacé, d'identifier des signes montrant que vous êtes sur le territoire d'un hibours, de prévoir le temps qu'il fera ou encore d'éviter des sables mouvants ou d'autres dangers naturels."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "autres-tests-de-sagesse" } }, [
        _vm._v("Autres tests de Sagesse "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#autres-tests-de-sagesse" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ peut vous demander de faire un test de Sagesse quand vous tentez d'accomplir des tâches comme celles qui suivent :"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Avoir une intuition qui vous aide à faire un choix.")
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Discerner si une créature qui semble morte ou vivante est un mort-vivant."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "caracteristique-d-incantation-2" } }, [
        _vm._v("Caractéristique d'incantation "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#caracteristique-d-incantation-2" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les clercs, les druides et les rôdeurs utilisent la Sagesse comme caractéristique d'incantation et afin de déterminer les DD des jets de sauvegarde de leurs sorts. Cette caractéristique détermine les points de foi (PF)"
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "valeur-de-defense-2" } }, [
        _vm._v("Valeur de défense "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#valeur-de-defense-2" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le bonus de sagesse entre dans le calcul de la VD. Il s’agit de la capacité du personnage à appréhender le combat et les risques qu’il prend. C’est aussi l’intuition quand il est contourné."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "charisme-2" } }, [
        _vm._v("Charisme "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#charisme-2" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le Charisme représente votre capacité à interagir avec les autres. Il prend en compte votre confiance en vous et votre éloquence, et est un indicateur du charme et de l'autorité qui se dégagent de vous."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "tests-de-charisme" } }, [
        _vm._v("Tests de Charisme "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#tests-de-charisme" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test de Charisme peut se révéler utile si vous tentez d'influencer ou de divertir d'autres personnes, quand vous tentez d'impressionner quelqu'un ou de lui mentir de manière convaincante, ou encore de vous tirer d'une situation délicate en société. Les compétences Supercherie, Intimidation, Représentation et Persuasion représentent des facettes de cette caractéristique utilisées pour certains tests de Charisme."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "intimidation" } }, [
        _vm._v("Intimidation "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#intimidation" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Quand vous tentez d'influencer quelqu'un par le biais de menaces directes, d'actions hostiles ou de violence, le MJ peut vous demander de faire un test de Charisme (Intimidation). Ces actions peuvent être de tenter de faire parler un prisonnier, de convaincre des truands qu'il ferait mieux de ne pas s'en prendre à vous, ou d'utiliser une bouteille brisée pour convaincre un dignitaire de reconsidérer une décision."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "persuasion" } }, [
        _vm._v("Persuasion "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#persuasion" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ peut vous demander de faire un test de Charisme (Persuasion) quand vous tentez d'influencer une ou plusieurs personnes en faisant preuve de tact, en faisant appel à l'étiquette ou à la bonne volonté de ces gens. La persuasion vous sert généralement quand vous voulez montrer que vous êtes de bonne foi ou pour vous faire des amis, pour demander respectueusement un service ou pour faire preuve du comportement approprié à une situation. Par exemple, lorsque vous devez convaincre un chambellan que votre groupe doit voir le roi, que vous négociez un traité de paix entre deux tribus ennemies ou que vous devez inspirer une foule."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "representation" } }, [
        _vm._v("Représentation "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#representation" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le résultat d'un test de Charisme (Représentation) détermine la réaction d'un auditoire à une performance musicale, dansée, théâtrale, à un conte ou à d'autres formes de divertissement."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "supercherie" } }, [
        _vm._v("Supercherie "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#supercherie" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un test de Charisme (Supercherie) permet de déterminer si vous parvenez à dissimuler la vérité de manière convaincante, verbalement ou par vos actions. Cet acte de dissimulation couvre un large spectre qui va des fausses pistes évoquées par le biais d'ambiguïtés au mensonge éhonté. On vous demandera généralement ce genre de test dans des situations où vous tentez d'abuser un garde, de tromper un marchand, de gagner de l'argent en pariant, d'être convaincant dans un déguisement, d'apaiser les doutes de quelqu'un avec de fausses assurances, ou de parvenir à mentir de façon éhontée tout en conservant votre sérieux."
        )
      ]),
      _vm._v(" "),
      _c("h5", { attrs: { id: "autres-tests-de-charisme" } }, [
        _vm._v("Autres tests de Charisme "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#autres-tests-de-charisme" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ peut vous demander de faire un test de Charisme quand vous tentez d'accomplir des tâches comme celles qui suivent :"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Trouver la personne qui saura vous renseigner et partager avec vous les dernières informations, rumeurs et ragots."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v(
            "Vous infiltrer dans une foule en essayant de déterminer les sujets qui animent les conversations."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "caracteristique-sociale" } }, [
        _vm._v("Caractéristique sociale "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#caracteristique-sociale" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le Charisme est utilisé comme caractéristique de confrontation sociale, les points d'honneur (PH) et afin de déterminer les DD des jets de sauvegarde."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "jets-de-sauvegarde" } }, [
        _vm._v("Jets de sauvegarde "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#jets-de-sauvegarde" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            " – appelé aussi une sauvegarde – représente une tentative de résister à un sort, un piège, un poison, une maladie ou une menace similaire. En général, vous ne décidez pas de faire un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            ". Celui-ci vous est imposé car votre personnage ou votre monstre se trouve en danger."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Pour faire un jet de sauvegarde, lancez un 3d6 et ajoutez le modificateur de caractéristique approprié. Par exemple, vous devez utiliser votre modificateur de Dextérité pour un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(" de Dextérité.")
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            " peut être soumis à des bonus ou des malus en fonction d'une situation et il peut aussi être affecté par un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" ou un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(". Ces modifications seront déterminées par le MJ.")
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Chaque voie accorde la maîtrise d'au moins deux types de jets de sauvegarde et les archétypes apporte des maîtrses suppélmentaires. Par exemple, un adepte de la "
          ),
          _c("a", { attrs: { href: "/voies/voie-de-la-magie" } }, [
            _vm._v("Voie de la Magie")
          ]),
          _vm._v(
            " maîtrise les jets de sauvegarde d'Intelligence et de Sagesse. Comme pour les maîtrises de compétences, maîtriser un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            " permet à un personnage d'ajouter son bonus de maîtrise aux jets de sauvegarde qui font appels à des caractéristiques particulières. Certains adversaires et certaines créatures possèdent eux aussi la maîtrise de certains jets de sauvegarde."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Le degré de difficulté d'un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            " dépend de l'effet qui en est la cause. Par exemple, le DD d'un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            " causé par un sort est déterminé par la caractéristique d'incantation du lanceur de sort et son bonus de maîtrise."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Le résultat d'un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            " réussi ou raté est indiqué dans la description de l'effet à l'origine du "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(". D'habitude, un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            " réussi signifie qu'une créature n'est pas blessée, ou moins qu'elle aurait dû, par un effet."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "regle-du-1" } }, [
        _vm._v("Règle du 1 "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#regle-du-1" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Concernant les "),
        _c("strong", [_vm._v("tests de compétences")]),
        _vm._v(" et les "),
        _c("strong", [_vm._v("jets de sauvegarde")]),
        _vm._v(
          ", à l’inverse du 6, le 1 indique une catastrophe. Sur un même lancer de dés, un 1 peut-être annulé par un 6 (au choix du lanceur). Le choix doit être fait avant de relancer un quelconque dés. Les dés sont alors écartés. Il est possible de se demander : quel intérêt d’écarter les dés. Les conséquences sont en fait simples. Il y a de grande chance de rater son action car le test se voit soustrait de 7 (6+1), donc de ne pas réaliser ce qu’il souhaitait. Le bénéfice et de ne pas en subir les conséquences. Si les dés sont gardés, ils sont joués séparément. Les 6 entrainent donc d’autres lancer de dés 6."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Pour chaque 1, 1d6 est lancé de façon explosive. Le résultat doit être retiré dans la jauge du personnage concernée par la caractéristiques liée à la compétence (ex : Dressage est une compétence de Sagesse, ce seront les points de Foi qui seront soustraits. Le résultat est interprété en matière de narration."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "En ce sens, les PA représentent habituellement la capacité physique mais les PM la capacité  de concentration, Les PF la confiance en soi et les PH les situations embarrassantes."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Si une jauge atteint 0 les points excédentaires sont basculés sur une autre jauge au choix du joueur."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "strong",
          [
            _vm._v(
              "Atteindre 0 dans une jauge a pour conséquences de faire subir un "
            ),
            _c(
              "RouterLink",
              {
                attrs: {
                  to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
                }
              },
              [_c("em", [_vm._v("désavantage")])]
            ),
            _vm._v(" à toutes ses actions liées à la caractéristiques.")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c("p", [_vm._v("PA = FOR, DEX et CON\nPM = INT\nPF = SAG\nPH = CHA")]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Ces points se récupèrent dans les phases de "),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#repos-long" } },
            [_c("em", [_vm._v("repos long")])]
          ),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _c("strong", [
          _vm._v(
            "Cette règle ne s'applique que pour les personnages joueurs qui ont une vie trépidante et plein de rebondissements. Pour les PNJ et les autres adversaires, la règle du 1 est simplifiée et le 1 annule obligatoirement un 6."
          )
        ])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}