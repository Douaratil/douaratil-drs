{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/archetypes/furtane/README.md?vue&type=template&id=6da1c508&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/archetypes/furtane/README.md","mtime":1638967336076},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJmdXJ0YW5lIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkbDvHJ0YW5lICIpLAogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2Z1cnRhbmUiIH0gfSwgWwogICAgICAgICAgX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImV2b2x1dGlvbi1kZS1sYS1mdXJ0YW5lIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIsOJdm9sdXRpb24gZGUgbGEgRsO8cnRhbmUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZXZvbHV0aW9uLWRlLWxhLWZ1cnRhbmUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInRhYmxlIiwgWwogICAgICAgIF9jKCJ0aGVhZCIsIFsKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRoIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiTml2ZWF1IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJBcHRpdHVkZXMiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygidGJvZHkiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMyIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjY29tYmF0LWEtZGV1eC1hcm1lcyIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNvbWJhdCDDoCBkZXV4IGFybWVzIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCI0IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNkZXBsYWNlbWVudC1hZXJpZW4iIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJEw6lwbGFjZW1lbnQgYcOpcmllbiIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiNSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjZGVwbGFjZW1lbnQtc2Fucy1hcm11cmUiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJEw6lwbGFjZW1lbnQgc2FucyBhcm11cmUiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjYiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2Z1cmllIiB9IH0sIFtfdm0uX3YoIkZ1cmllIildKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCI3IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNjZXJjbGUtZGUtbGEtbW9ydCIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNlcmNsZSBkZSBsYSBtb3J0IikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCI4IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNpZ25vcmVyLWxhLWRvdWxldXIiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJJZ25vcmVyIGxhIGRvdWxldXIiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjEwIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNwb3J0ZWUtYWNjcnVlIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiUG9ydMOpZSBhY2NydWUiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjExIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNmdXJpZS1pbXBsYWNhYmxlIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiRnVyaWUgaW1wbGFjYWJsZSIpCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMTQiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI2luc2Vuc2libGUtYS1sYS1kb3VsZXVyIiB9IH0sIFsKICAgICAgICAgICAgICAgIF92bS5fdigiSW5zZW5zaWJsZSDDoCBsYSBkb3VsZXVyIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIxNSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjY2VyY2xlLWRlLWxhLW1vcnQtaW1wbGFjYWJsZSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkNlcmNsZSBkZSBsYSBtb3J0IGltcGxhY2FibGUiKQogICAgICAgICAgICAgIF0pCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjE3IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIiNmdXJpZS1pbmRvbXB0YWJsZSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIkZ1cmllIGluZG9tcHRhYmxlIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIxOSIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjY2VyY2xlLWRlLWxhLW1vcnQtaW5kb21wdGFibGUiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJDZXJjbGUgZGUgbGEgbW9ydCBpbXBsYWNhYmxlIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIyMCIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjbWVyZS1sb3V2ZSIgfSB9LCBbCiAgICAgICAgICAgICAgICBfdm0uX3YoIk3DqHJlIGxvdXZlIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIjdmVyaXRhYmxlLWZ1cnRhbmUiIH0gfSwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJWw6lyaXRhYmxlIEbDvHJ0YW5lIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJmdXJ0YW5lLTIiIH0gfSwgWwogICAgICAgIF92bS5fdigiRsO8cnRhbmUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjZnVydGFuZS0yIiB9IH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgaHJlZjoKICAgICAgICAgICAgICAgICJodHRwczovL3d3dy5kb3VhcmF0aWwuZnIvaWxsdXN0cmF0aW9ucy9hcmNoZXR5cGUvZnVydGFuZS5qcGciLAogICAgICAgICAgICAgIHRhcmdldDogIl9ibGFuayIsCiAgICAgICAgICAgICAgcmVsOiAibm9vcGVuZXIgbm9yZWZlcnJlciIKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOgogICAgICAgICAgICAgICAgICAiaHR0cHM6Ly93d3cuZG91YXJhdGlsLmZyL2lsbHVzdHJhdGlvbnMvYXJjaGV0eXBlL2Z1cnRhbmVtLnBuZyIsCiAgICAgICAgICAgICAgICBhbHQ6ICJGw7xydGFuZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pLAogICAgICAgICAgICBfYygiT3V0Ym91bmRMaW5rIikKICAgICAgICAgIF0sCiAgICAgICAgICAxCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJhcHRpdHVkZXMtZC1hcmNoZXR5cGUiIH0gfSwgWwogICAgICAgIF92bS5fdigiQXB0aXR1ZGVzIGQnQXJjaMOpdHlwZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhcHRpdHVkZXMtZC1hcmNoZXR5cGUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkVuIHRhbnQgcXVlIEbDvHJ0YW5lLCB2b3VzIGLDqW7DqWZpY2lleiBkZXMgYXB0aXR1ZGVzIGQnQXJjaMOpdHlwZSBzdWl2YW50ZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAibWFpdHJpc2VzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIk1hw650cmlzZXMgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbWFpdHJpc2VzIiB9IH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkFybXVyZXMiKV0pLAogICAgICAgIF92bS5fdigiIDogIGFybXVyZXMgbMOpZ8OocmVzIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkFybWVzIildKSwKICAgICAgICBfdm0uX3YoIiA6IGFybWVzIGNvdXJhbnRlcywgw6lww6llIGNvdXJ0ZSIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJPdXRpbHMiKV0pLAogICAgICAgIF92bS5fdigiIDogYXVjdW4iKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiSmV0cyBkZSBzYXV2ZWdhcmRlIildKSwKICAgICAgICBfdm0uX3YoIiA6IERleHTDqXJpdMOpLCBDb25zdGl0dXRpb24iKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiQ29tcMOpdGVuY2VzIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIDogY2hvaXNpc3NleiB0cm9pcyBjb21ww6l0ZW5jZXMgcGFybWkgOiBBY3JvYmF0aWUsIEF0aGzDqXRpc21lLCBEaXNjcsOpdGlvbiwgRHJlc3NhZ2UsIE5hdHVyZSwgUGVyY2VwdGlvbiwgUmVsaWdpb24gZXQgU3VydmllIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkNvbmRpdGlvbnMgZCdhY2Nlc3NpYmlsaXTDqSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIjogw4p0cmUgZGUgY3VsdHVyZSBLaGVybmHDqywgZGUgc2V4ZSBmw6ltaW5pbiBldCDDqnRyZSBtYXJxdcOpIGF1IGZlciByb3VnZSBwb3VyIHVuZSBpbmZhbWllIChsZSBwbHVzIHNvdXZlbnQgdmlvbCwgcsOpcHVkaWF0aW9uIG91IGNyaW1lLi4uKSIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJQb2ludHMgZGUgTWFnaWUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICLCoDogTGEgRsO8cnRhbmUgZXN0IHVuIEFyY2jDqXR5cGUgbXlzdGlxdWUsIGRlIGNlIGZhaXQsIGVsbGUgZMOpdmVsb3BwZSBsZXMgcG9pbnRzIGRlXG5Gb2kgKFBGKSBz4oCZaWwgZW1wcnVudGUgbGEgdm9pZSBkZSBsYSBNYWdpZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMZXMgRsO8cnRhbmVzIHNvbnQgZGVzIGZlbW1lcyBraGVybmHDq2VzIHF1aSBvbnQgw6l0w6kgYmFubmllcyBldCBtYXJxdcOpZXMgYXUgZmVyIHJvdWdlIHBvdXIgc2lnbmlmaWVyIGxldXIgc3RhdHV0IGRlIHBhcmlhcy4gRWxsZXMgc29udCBxdWVscXVlcyBmb2lzIGJhbm5pZXMgYWxvcnMgcXXigJllbGxlcyBzb250IHZpY3RpbWVzLCBsZXMgY2FzIGxlcyBwbHVzIGZyw6lxdWVudHMgc29udCBsZXMgdmlvbHMgZXQgbGVzIGVuZmFudHMgaG9ycyBtYXJpYWdlLCBtYWlzIGF1c3NpIGTigJlhdXRyZXMgY3JpbWVzLiBFbGxlcyBlc3DDqHJlbnQgc2UgcmFjaGV0ZXIgZW4gbW91cmFudCBhdSBjb21iYXQuIENlIHNvbnQgZGUgcmVkb3V0YWJsZXMgZ3VlcnJpw6hyZXMgcXVpIHNvbnQgYXBwcsOpY2nDqWVzIHN1ciBsZXMgY2hhbXBzIGRlIGJhdGFpbGxlLlxuTGVzIEbDvHJ0YW5lcyBkZSBsYSB2b2llIGRlcyBBcm1lcyBzb250IGFwcGVsw6lzIEJsZWl6YWRpd2FsLCBsaXR0w6lyYWxlbWVudCDCq2xhIGxvdXZlIHByb3RlY3RyaWNlwrsuIExlcyBGw7xydGFuZXMgZGUgbGEgdm9pZSBkZSBs4oCZT21icmUgc29udCBhcHBlbMOpcyBCbGVpemF0ZW52YSwgbGl0dMOpcmFsZW1lbnQgwqtsYSBsb3V2ZSBzb21icmXCuy4gTGVzIEbDvHJ0YW5lcyBkZSBsYSB2b2llIGRlIGxhIE1hZ2llIHNvbnQgYXBwZWzDqXMgQmxlaXphaG5jaGVyLCBsaXR0w6lyYWxlbWVudCDCqyBsYSBsb3V2ZSBndWlkZSDCuy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJjb21iYXQtYS1kZXV4LWFybWVzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkNvbWJhdCDDoCBkZXV4IGFybWVzICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NvbWJhdC1hLWRldXgtYXJtZXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuIEtoZXJuIDogRGFvdSBNZW5hZGgiKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbsOAIHBhcnRpciBkdSBuaXZlYXUgMywgdm91cyBhcHByZW5leiBsZSBzdHlsZSBkZSBjb21iYXQgw6AgZGV1eCBhcm1lcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJkZXBsYWNlbWVudC1hZXJpZW4iIH0gfSwgWwogICAgICAgIF92bS5fdigiRMOpcGxhY2VtZW50IGHDqXJpZW4gIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZGVwbGFjZW1lbnQtYWVyaWVuIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBLaGVybiA6IEZpbnZhbGFlciIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuw4AgcGFydGlyIGR1IG5pdmVhdSA0LCB2b3VzIHBvdXZleiB1dGlsaXNlciBsJ2FjdGlvbiBzZSBkw6lzZW5nYWdlciBvdSBzZSBwcsOpY2lwaXRlciBlbiBhY3Rpb24gYm9udXMgbG9ycyBkZSB2b3RyZSB0b3VyLiBFbiBvdXRyZSwgdm90cmUgZGlzdGFuY2UgZGUgc2F1dCBlc3QgZG91YmzDqWUgcGVuZGFudCBjZSB0b3VyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImRlcGxhY2VtZW50LXNhbnMtYXJtdXJlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkTDqXBsYWNlbWVudCBzYW5zIGFybXVyZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNkZXBsYWNlbWVudC1zYW5zLWFybXVyZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gS2hlcm4gOiBGaW52YWwgU2FuIEhhcm5leiIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuw4AgcGFydGlyIGR1IG5pdmVhdSA1LCB2b3RyZSB2aXRlc3NlIGF1Z21lbnRlIGRlIDIgbcOodHJlcyB0YW50IHF1ZSB2b3VzIG5lIHBvcnRleiBwYXMgZCdhcm11cmUgbmkgZGUgYm91Y2xpZXIuIENlIGJvbnVzIHMnYWNjcm/DrnQgMiBtw6h0cmVzIGF1IG5pdmVhdSA4IGV0IGRlIDIgbcOodHJlcyBzdXBwbMOpbWVudGFpcmVzIGF1IG5pdmVhdSAxNC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJmdXJpZSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJGdXJpZSAiKSwKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNmdXJpZSIgfSB9LCBbCiAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuIEtoZXJuIDogRsO8cnRha2giKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbkEgcGFydGlyIGR1IG5pdmVhdSA2LCBxdWFuZCB2b3VzIHZvdXMgcmV0cm91dmV6IGF1IGPFk3VyIGRlIGxhIGJhdGFpbGxlLCB2b3VzIMOqdGVzIGFuaW3DqSBkJ3VuZSBmdXJpZSByw6lkZW1wdHJpY2UuIExvcnMgZGUgdm90cmUgdG91ciwgdm91cyBwb3V2ZXogdXRpbGlzZXIgdW5lIGFjdGlvbiBib251cyBwb3VyIMOqdHJlIHByaXMgZGUgZnVyaWUuIFRhbnQgcXVlIHZvdXMgw6p0ZXMgZW5yYWfDqSwgZXQgc2kgdm91cyBuZSBwb3J0ZXogcGFzIGQnYXJtdXJlIGxvdXJkZSwgdm91cyBvYnRlbmV6IGxlcyBiw6luw6lmaWNlcyBzdWl2YW50cyA6IgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG7igKIgVm91cyBiw6luw6lmaWNpZXogZCd1biBhdmFudGFnZSBzdXIgbGVzIHRlc3RzIGRlIGRleHTDqXJpdMOpIGV0IGxlcyBqZXRzIGRlIHNhdXZlZ2FyZGUgZGUgZGV4dMOpcml0w6kuIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG7igKIgUXVhbmQgdm91cyB1dGlsaXNleiB1bmUgYXJtZSBkZSBjb3Jwcy3DoC1jb3Jwcywgdm91cyBnYWduZXogdW4gYm9udXMgYXV4IGpldCBkZSBkw6lnw6J0cyArMS4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoIlxuQ2UgYm9udXMgYXVnbWVudGUgZW4gbcOqbWUgdGVtcHMgcXVlIHZvdHJlIG5pdmVhdS4iKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KCJcbuKAoiBWb3VzIGRldmVuZXogIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL2NvbWJhdHRyZS8jcmVzaXN0YW5jZS1ldC12dWxuZXJhYmlsaXRlLWF1eC1kZWdhdHMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigicsOpc2lzdGFudGUiKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGF1eCBkw6lnw6J0cyBjb250b25kYW50cywgcGVyZm9yYW50cyBldCB0cmFuY2hhbnRzLiIpLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcblBhciBjb250cmUsIHRhbnQgcXVlIHZvdXMgw6p0ZXMgZW5yYWfDqSwgdm91cyBuZSBwb3V2ZXogcGFzIGxhbmNlciBkZSBzb3J0IG91IHZvdXMgY29uY2VudHJlciBzdXIgZGVzIHNvcnRzLCBtw6ptZSBzaSB2b3VzIGVuIGF2ZXogbm9ybWFsZW1lbnQgbGEgY2FwYWNpdMOpLiIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxuVm90cmUgZnVyaWUgZHVyZSAxIG1pbnV0ZSAoMTAgcm91bmRzKS4gQ2V0IMOpdGF0IHByZW5kIGZpbiBwbHVzIHTDtHQgc2kgdm91cyDDqnRlcyBpbmNvbnNjaWVudCBvdSBzaSB2b3RyZSB0b3VyIHNlIHRlcm1pbmUgZXQgcXVlIHZvdXMgbidhdmV6IHBhcyBhdHRhcXXDqSBkZSBjcsOpYXR1cmUgaG9zdGlsZSBvdSBzdWJpIGRlIGTDqWfDonQgZGVwdWlzIGxhIGZpbiBkZSB2b3RyZSBkZXJuaWVyIHRvdXIuIFZvdXMgcG91dmV6IGF1c3NpIHV0aWxpc2VyIHVuZSBhY3Rpb24gYm9udXMgcG91ciBtZXR0cmUgZmluIMOgIGNldCDDqXRhdCBwZW5kYW50IHZvdHJlIHRvdXIuIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KCJcbkxhIGZ1cmllIHBvc3PDqGRlICIpLAogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoImRldXggw6l0YXRzIGRlIGZ1cmllIildKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiwgdW5lIGZvaXMgcXVlIHZvdXMgw6p0ZXMgZW50csOpcyBlbiDDqXRhdCBkZSBmdXJpZSBsZSBub21icmUgZGUgZm9pcyBwZXJtaXMsIHZvdXMgZGV2ZXogdGVybWluZXIgdW4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ2VyZXItbGEtc2FudGUtZHUtcGVyc29ubmFnZS8jcmVwb3MtbG9uZyIgfSB9LAogICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigicmVwb3MgbG9uZyIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgYXZhbnQgZGUgcG91dm9pciBlbnRyZXIgZGUgbm91dmVhdSBlbiByYWdlLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiY2VyY2xlLWRlLWxhLW1vcnQiIH0gfSwgWwogICAgICAgIF92bS5fdigiQ2VyY2xlIGRlIGxhIG1vcnQgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjY2VyY2xlLWRlLWxhLW1vcnQiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuIEtoZXJuIDogS2VsJ2NobWFydiIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuw4AgcGFydGlyIGR1IG5pdmVhdSA3LCBsYSBGw7xydGFuZSBwZXV0LCBlbiB1dGlsaXNhbnQgc29uIGFjdGlvbiBhdHRhcXVlciwgZXQgY2UsIGVuIGxpZXUgZXQgcGxhY2UgZGUgdG91dGVzIGxlcyBhdHRhcXVlcyBkdSB0b3VycywgcG9ydGVyIHVuZSBhdHRhcXVlIMOgIHRvdXMgbGVzIGFkdmVyc2FpcmVzIGF1dG91cnMgZCdlbGxlIGRhbnMgdW4gcmF5b24gZGUgMyBtw6h0cmVzIGV0IGNlLCBxdSdpbXBvcnRlIGxlIG5vbWJyZSBkJ2FkdmVyc2FpcmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiaWdub3Jlci1sYS1kb3VsZXVyIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIklnbm9yZXIgbGEgZG91bGV1ciAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNpZ25vcmVyLWxhLWRvdWxldXIiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBLaGVybiA6IEZhZSdQb2FuIildKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG5BdSBuaXZlYXUgOCwgdm91cyBqb3Vpc3NleiBkJ3VuZSByw6lzZXJ2ZSBkJ2VuZHVyYW5jZSBkYW5zIGxhcXVlbGxlIHZvdXMgcG91dmV6IHB1aXNlciBhZmluIGRlIHZvdXMgcHJvdMOpZ2VyLiBMb3JzIGRlIHZvdHJlIHRvdXIsIHZvdXMgcG91dmV6IHV0aWxpc2VyIHVuZSBhY3Rpb24gYm9udXMgcG91ciByZWdhZ25lciB1biBub21icmUgZGUgcG9pbnRzIGTigJlhY3Rpb24gw6lnYWwgw6AgM2Q2ICsgdm90cmUgbml2ZWF1IGRlIEbDvHJ0YW5lLiBVbmUgZm9pcyBxdWUgdm91cyBhdmV6IHV0aWxpc8OpIGNldHRlIGFwdGl0dWRlLCB2b3VzIGRldmV6IGZpbmlyIHVuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2dlcmVyLWxhLXNhbnRlLWR1LXBlcnNvbm5hZ2UvI3JlcG9zLWNvdXJ0IiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJyZXBvcyBjb3VydCIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgb3UgdW4gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2dlcmVyLWxhLXNhbnRlLWR1LXBlcnNvbm5hZ2UvI3JlcG9zLWxvbmciIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInJlcG9zIGxvbmciKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBhdmFudCBkZSBsJ3V0aWxpc2VyIGRlIG5vdXZlYXUuIEMnZXN0IGV4YWN0ZW1lbnQgbGUgbcOqbWUgZm9uY3Rpb25uZW1lbnQgcXVlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvdm9pZXMvI3NlY29uZC1zb3VmZmxlIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJzZWNvbmQgc291ZmZsZSIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiIGV0IGNlbGEgdmllbnQgcydham91dGVyIMOgIGxhIGNhcGFjaXTDqSBkZSBsYSB2b2llIGRlcyBhcm1lcy4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInBvcnRlZS1hY2NydWUiIH0gfSwgWwogICAgICAgIF92bS5fdigiUG9ydMOpZSBhY2NydWUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjcG9ydGVlLWFjY3J1ZSIgfSB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBLaGVybiA6IFBvc3RhaCdrYWRlbm4iKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkF1IG5pdmVhdSAxMCwgbGEgRsO8cnRhbmUgZXN0IHJlZG91dGFibGUgc3VyIGxlIGNoYW1wcyBkZSBiYXRhaWxsZSBhdmVjIHNlcyBhcm1lcyBkZSBsYW5jZXIgZXQgdXRpbGlzZSBzYSBmdXJpZSBpbnTDqXJpZXVyZSBwb3VyIGTDqWN1cGxlciBzYSBmb3JjZS4gTGVzIHBvcnTDqWVzIGRlIGxhbmNlciBzb250IGRvdWJsw6llcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJmdXJpZS1pbXBsYWNhYmxlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkZ1cmllIGltcGxhY2FibGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZnVyaWUtaW1wbGFjYWJsZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkVuIEtoZXJuIDogRsO8cnRha2ggRGl6YWhtIildKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG5BIHBhcnRpciBkdSBuaXZlYXUgMTEsIHF1YW5kIHZvdXMgdm91cyByZXRyb3V2ZXogYXUgY8WTdXIgZGUgbGEgYmF0YWlsbGUsIHZvdXMgw6p0ZXMgYW5pbcOpIGQndW5lIGZ1cmllIHLDqWRlbXB0cmljZS4gTG9ycyBkZSB2b3RyZSB0b3VyLCB2b3VzIHBvdXZleiB1dGlsaXNlciB1bmUgYWN0aW9uIGJvbnVzIHBvdXIgw6p0cmUgcHJpcyBkZSBmdXJpZS4gVGFudCBxdWUgdm91cyDDqnRlcyBlbnJhZ8OpLCBldCBzaSB2b3VzIG5lIHBvcnRleiBwYXMgZCdhcm11cmUgbG91cmRlLCB2b3VzIG9idGVuZXogbGVzIGLDqW7DqWZpY2VzIHN1aXZhbnRzIDoiCiAgICAgICAgICApLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbuKAoiBWb3VzIGLDqW7DqWZpY2lleiBkJ3VuIGF2YW50YWdlIHN1ciBsZXMgdGVzdHMgZGUgZGV4dMOpcml0w6kgZXQgbGVzIGpldHMgZGUgc2F1dmVnYXJkZSBkZSBkZXh0w6lyaXTDqS4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbuKAoiBRdWFuZCB2b3VzIHV0aWxpc2V6IHVuZSBhcm1lIGRlIGNvcnBzLcOgLWNvcnBzLCB2b3VzIGdhZ25leiB1biBib251cyBhdXggamV0IGRlIGTDqWfDonRzICsyLiIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigiXG5DZSBib251cyBhdWdtZW50ZSBlbiBtw6ptZSB0ZW1wcyBxdWUgdm90cmUgbml2ZWF1LiIpLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoIlxu4oCiIFZvdXMgZGV2ZW5leiAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86ICIvY29tYmF0dHJlLyNyZXNpc3RhbmNlLWV0LXZ1bG5lcmFiaWxpdGUtYXV4LWRlZ2F0cyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJyw6lzaXN0YW50ZSIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgYXV4IGTDqWfDonRzIGNvbnRvbmRhbnRzLCBwZXJmb3JhbnRzIGV0IHRyYW5jaGFudHMuIiksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxuUGFyIGNvbnRyZSwgdGFudCBxdWUgdm91cyDDqnRlcyBlbnJhZ8OpLCB2b3VzIG5lIHBvdXZleiBwYXMgbGFuY2VyIGRlIHNvcnQgb3Ugdm91cyBjb25jZW50cmVyIHN1ciBkZXMgc29ydHMsIG3Dqm1lIHNpIHZvdXMgZW4gYXZleiBub3JtYWxlbWVudCBsYSBjYXBhY2l0w6kuIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiXG5Wb3RyZSBmdXJpZSBkdXJlIDFkNiByb3VuZHMuIENldCDDqXRhdCBwcmVuZCBmaW4gcGx1cyB0w7R0IHNpIHZvdXMgw6p0ZXMgaW5jb25zY2llbnQgb3Ugc2kgdm90cmUgdG91ciBzZSB0ZXJtaW5lIGV0IHF1ZSB2b3VzIG4nYXZleiBwYXMgYXR0YXF1w6kgZGUgY3LDqWF0dXJlIGhvc3RpbGUgb3Ugc3ViaSBkZSBkw6lnw6J0IGRlcHVpcyBsYSBmaW4gZGUgdm90cmUgZGVybmllciB0b3VyLiBWb3VzIHBvdXZleiBhdXNzaSB1dGlsaXNlciB1bmUgYWN0aW9uIGJvbnVzIHBvdXIgbWV0dHJlIGZpbiDDoCBjZXQgw6l0YXQgcGVuZGFudCB2b3RyZSB0b3VyLiIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigiXG5MYSBmdXJpZSBwb3Nzw6hkZSAiKSwKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJ0cm9pcyDDqXRhdHMgZGUgZnVyaWUiKV0pLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLCB1bmUgZm9pcyBxdWUgdm91cyDDqnRlcyBlbnRyw6lzIGVuIMOpdGF0IGRlIGZ1cmllIGxlIG5vbWJyZSBkZSBmb2lzIHBlcm1pcywgdm91cyBkZXZleiB0ZXJtaW5lciB1biAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyNyZXBvcy1sb25nIiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJyZXBvcyBsb25nIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBhdmFudCBkZSBwb3V2b2lyIGVudHJlciBkZSBub3V2ZWF1IGVuIHJhZ2UuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJpbnNlbnNpYmxlLWEtbGEtZG91bGV1ciIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJJbnNlbnNpYmxlIMOgIGxhIGRvdWxldXIgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjaW5zZW5zaWJsZS1hLWxhLWRvdWxldXIiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBLaGVybiA6IERpemFuJ1BvYW4iKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbkF1IG5pdmVhdSAxNCwgdm91cyBqb3Vpc3NleiBkJ3VuZSBub3V2ZWxsZSByw6lzZXJ2ZSBkJ2VuZHVyYW5jZSBxdWkgcydham91dGUgw6AgbGEgcHJlbWnDqHJlLCBkYW5zIGxhcXVlbGxlIHZvdXMgcG91dmV6IHB1aXNlciBhZmluIGRlIHZvdXMgcHJvdMOpZ2VyLiBMb3JzIGRlIHZvdHJlIHRvdXIsIHZvdXMgcG91dmV6IHV0aWxpc2VyIHVuZSBhY3Rpb24gYm9udXMgcG91ciByZWdhZ25lciB1biBub21icmUgZGUgcG9pbnRzIGTigJlhY3Rpb24gw6lnYWwgw6AgNGQ2ICsgdm90cmUgbml2ZWF1IGRlIEbDvHJ0YW5lLiBVbmUgZm9pcyBxdWUgdm91cyBhdmV6IHV0aWxpc8OpIGNldHRlIGFwdGl0dWRlLCB2b3VzIGRldmV6IGZpbmlyIHVuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2dlcmVyLWxhLXNhbnRlLWR1LXBlcnNvbm5hZ2UvI3JlcG9zLWNvdXJ0IiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJyZXBvcyBjb3VydCIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgb3UgdW4gIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2dlcmVyLWxhLXNhbnRlLWR1LXBlcnNvbm5hZ2UvI3JlcG9zLWxvbmciIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInJlcG9zIGxvbmciKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBhdmFudCBkZSBsJ3V0aWxpc2VyIGRlIG5vdXZlYXUuIEMnZXN0IGV4YWN0ZW1lbnQgbGUgbcOqbWUgZm9uY3Rpb25uZW1lbnQgcXVlICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvdm9pZXMvI3NlY29uZC1zb3VmZmxlIiB9IH0sIFsKICAgICAgICAgICAgX3ZtLl92KCJzZWNvbmQgc291ZmZsZSIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiIGV0IGNlbGEgdmllbnQgcydham91dGVyIMOgIGxhIGNhcGFjaXTDqSBkZSBsYSB2b2llIGRlcyBhcm1lcy4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNlcmNsZS1kZS1sYS1tb3J0LWltcGxhY2FibGUiIH0gfSwgWwogICAgICAgIF92bS5fdigiQ2VyY2xlIGRlIGxhIG1vcnQgaW1wbGFjYWJsZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjZXJjbGUtZGUtbGEtbW9ydC1pbXBsYWNhYmxlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gS2hlcm4gOiBLZWwnY2htYXJ2IERpemFobSIpXSksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxuw4AgcGFydGlyIGR1IG5pdmVhdSAxNSwgbGEgRsO8cnRhbmUgcGV1dCwgZW4gdXRpbGlzYW50IHNvbiBhY3Rpb24gYXR0YXF1ZXIsIGV0IGNlLCBlbiBsaWV1IGV0IHBsYWNlIGRlIHRvdXRlcyBsZXMgYXR0YXF1ZXMgZHUgdG91cnMsIHBvcnRlciB1bmUgYXR0YXF1ZSDDoCB0b3VzIGxlcyBhZHZlcnNhaXJlcyBhdXRvdXJzIGQnZWxsZSBkYW5zIHVuIHJheW9uIGRlIDMgbcOodHJlcyBldCBjZSwgcXUnaW1wb3J0ZSBsZSBub21icmUgZCdhZHZlcnNhaXJlIGF2ZWMgdW4gYm9udXMgZGUgKzIgYXV4IGTDqWfDonRzLiBEZSBwbHVzLCBsZXMgYWR2ZXJzYWlyZXMgZGlyZWN0ZW1lbnQgZW5nYWfDqXMgZG9pdmVudCByw6l1c3NpciB1biBKUyBkZSBTYWdlc3NlIGNvbnRyZSB1biBERCDDqWdhbCBhdSBjaGFyaXNtZSBkZSBsYSBGw7xydGFuZSBvdSDDqnRyZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyN0ZXJyb3Jpc2UiIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInRlcnJvcmlzw6lzIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgbGUgcm91bmQgZW4gY291cnMgc2kgbGEgRsO8cnRhbmUgYSBhZ2kgZW4gcHJlbWnDqHJlLCBhaW5zaSBxdWUgbGUgcm91bmQgc3VpdmFudC4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZnVyaWUtaW5kb21wdGFibGUiIH0gfSwgWwogICAgICAgIF92bS5fdigiRnVyaWUgaW5kb21wdGFibGUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZnVyaWUtaW5kb21wdGFibGUiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBLaGVybiA6IEbDvHJ0YWtoIEFtamVzdHIiKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbkEgcGFydGlyIGR1IG5pdmVhdSAxNywgcXVhbmQgdm91cyB2b3VzIHJldHJvdXZleiBhdSBjxZN1ciBkZSBsYSBiYXRhaWxsZSwgdm91cyDDqnRlcyBhbmltw6kgZCd1bmUgZnVyaWUgcsOpZGVtcHRyaWNlLiBMb3JzIGRlIHZvdHJlIHRvdXIsIHZvdXMgcG91dmV6IHV0aWxpc2VyIHVuZSBhY3Rpb24gYm9udXMgcG91ciDDqnRyZSBwcmlzIGRlIGZ1cmllLiBUYW50IHF1ZSB2b3VzIMOqdGVzIGVucmFnw6ksIGV0IHNpIHZvdXMgbmUgcG9ydGV6IHBhcyBkJ2FybXVyZSBsb3VyZGUsIHZvdXMgb2J0ZW5leiBsZXMgYsOpbsOpZmljZXMgc3VpdmFudHMgOiIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxu4oCiIFZvdXMgYsOpbsOpZmljaWV6IGQndW4gYXZhbnRhZ2Ugc3VyIGxlcyB0ZXN0cyBkZSBkZXh0w6lyaXTDqSBldCBsZXMgamV0cyBkZSBzYXV2ZWdhcmRlIGRlIGRleHTDqXJpdMOpLiIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxu4oCiIFF1YW5kIHZvdXMgdXRpbGlzZXogdW5lIGFybWUgZGUgY29ycHMtw6AtY29ycHMsIHZvdXMgZ2FnbmV6IHVuIGJvbnVzIGF1eCBqZXQgZGUgZMOpZ8OidHMgKzMuIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJiciIpLAogICAgICAgICAgX3ZtLl92KCJcbuKAoiBWb3VzIGRldmVuZXogIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL2NvbWJhdHRyZS8jcmVzaXN0YW5jZS1ldC12dWxuZXJhYmlsaXRlLWF1eC1kZWdhdHMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigicsOpc2lzdGFudGUiKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGF1eCBkw6lnw6J0cyBjb250b25kYW50cywgcGVyZm9yYW50cyBldCB0cmFuY2hhbnRzLiIpLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcblBhciBjb250cmUsIHRhbnQgcXVlIHZvdXMgw6p0ZXMgZW5yYWfDqSwgdm91cyBuZSBwb3V2ZXogcGFzIGxhbmNlciBkZSBzb3J0IG91IHZvdXMgY29uY2VudHJlciBzdXIgZGVzIHNvcnRzLCBtw6ptZSBzaSB2b3VzIGVuIGF2ZXogbm9ybWFsZW1lbnQgbGEgY2FwYWNpdMOpLiIKICAgICAgICAgICksCiAgICAgICAgICBfYygiYnIiKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlxuVm90cmUgZnVyaWUgZHVyZSAxZDYgcm91bmRzLiBDZXQgw6l0YXQgcHJlbmQgZmluIHBsdXMgdMO0dCBzaSB2b3VzIMOqdGVzIGluY29uc2NpZW50IG91IHNpIHZvdHJlIHRvdXIgc2UgdGVybWluZSBldCBxdWUgdm91cyBuJ2F2ZXogcGFzIGF0dGFxdcOpIGRlIGNyw6lhdHVyZSBob3N0aWxlIG91IHN1YmkgZGUgZMOpZ8OidCBkZXB1aXMgbGEgZmluIGRlIHZvdHJlIGRlcm5pZXIgdG91ci4gVm91cyBwb3V2ZXogYXVzc2kgdXRpbGlzZXIgdW5lIGFjdGlvbiBib251cyBwb3VyIG1ldHRyZSBmaW4gw6AgY2V0IMOpdGF0IHBlbmRhbnQgdm90cmUgdG91ci4iCiAgICAgICAgICApLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoIlxuTGEgZnVyaWUgcG9zc8OoZGUgIiksCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigicXVhdHJlIMOpdGF0cyBkZSBmdXJpZSIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIsIHVuZSBmb2lzIHF1ZSB2b3VzIMOqdGVzIGVudHLDqXMgZW4gw6l0YXQgZGUgZnVyaWUgbGUgbm9tYnJlIGRlIGZvaXMgcGVybWlzLCB2b3VzIGRldmV6IHRlcm1pbmVyIHVuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2dlcmVyLWxhLXNhbnRlLWR1LXBlcnNvbm5hZ2UvI3JlcG9zLWxvbmciIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInJlcG9zIGxvbmciKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGF2YW50IGRlIHBvdXZvaXIgZW50cmVyIGRlIG5vdXZlYXUgZW4gcmFnZS4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImNlcmNsZS1kZS1sYS1tb3J0LWluZG9tcHRhYmxlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkNlcmNsZSBkZSBsYSBtb3J0IGluZG9tcHRhYmxlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI2NlcmNsZS1kZS1sYS1tb3J0LWluZG9tcHRhYmxlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gS2hlcm4gOiBLZWwnY2htYXJ2IEFtamVzdHIiKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbsOAIHBhcnRpciBkdSBuaXZlYXUgMTksIGxhIEbDvHJ0YW5lIHBldXQsIGVuIHV0aWxpc2FudCBzb24gYWN0aW9uIGF0dGFxdWVyLCBldCBjZSwgZW4gbGlldSBldCBwbGFjZSBkZSB0b3V0ZXMgbGVzIGF0dGFxdWVzIGR1IHRvdXJzLCBwb3J0ZXIgdW5lIGF0dGFxdWUgw6AgdG91cyBsZXMgYWR2ZXJzYWlyZXMgYXV0b3VycyBkJ2VsbGUgZGFucyB1biByYXlvbiBkZSAzIG3DqHRyZXMgZXQgY2UsIHF1J2ltcG9ydGUgbGUgbm9tYnJlIGQnYWR2ZXJzYWlyZSBhdmVjIHVuIGJvbnVzIGRlICs0IGF1eCBkw6lnw6J0cy4gRGUgcGx1cywgbGVzIGFkdmVyc2FpcmVzIGRpcmVjdGVtZW50IGVuZ2Fnw6lzIGRvaXZlbnQgcsOpdXNzaXIgdW4gSlMgZGUgU2FnZXNzZSBjb250cmUgdW4gREQgw6lnYWwgYXUgY2hhcmlzbWUgZGUgbGEgRsO8cnRhbmUgb3Ugw6p0cmUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ2VyZXItbGEtc2FudGUtZHUtcGVyc29ubmFnZS8jdGVycm9yaXNlIiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJ0ZXJyb3Jpc8OpcyIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIganVzcXUnw6AgbGEgZmluIGR1IGNvbWJhdC4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm1lcmUtbG91dmUiIH0gfSwgWwogICAgICAgIF92bS5fdigiTcOocmUgbG91dmUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbWVyZS1sb3V2ZSIgfSB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRW4gS2hlcm4gOiBNYW1tJ2JsZWl6ZXoiKV0pLAogICAgICAgICAgX2MoImJyIiksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJcbkF1IG5pdmVhdSAyMCwgbGEgRsO8cnRhbmUgZXN0IGNvbXBsw6h0ZW1lbnQgYWNjb21wbGllIGV0IGRldmllbnQgbCdleGVtcGxlIHVsdGltZSDDoCBzdWl2cmUgcG91ciB0b3V0ZXMgbGVzIGF1dHJlcyBGw7xydGFuZXMuXG5FbGxlIG5lIHBldXQgcGx1cyDDqnRyZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyN0ZXJyb3Jpc2UiIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInRlcnJvcmlzw6llIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuIExlcyBhdXRyZXMgRsO8cnRhbmVzIHNvdXMgc2VzIG9yZHJlcyBvYnRpZW5uZW50IGxhIG3Dqm1lIGltbXVuaXTDqSBkYW5zIHVuIHJheW9uIGRlIDMwIG3DqHRyZXMgYXV0b3VycyBkZSBsYSBNw6hyZSBsb3V2ZS4gRWxsZXMgb2J0aWVubmVudCBhdXNzaSB1biBib251cyBkZSArMiBwb3VyIGwnYWN0aW9uIGF0dGFxdWVyLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJ2ZXJpdGFibGUtZnVydGFuZSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJWw6lyaXRhYmxlIEbDvHJ0YW5lICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3Zlcml0YWJsZS1mdXJ0YW5lIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJFbiBLaGVybiA6IEbDvHJ0YW5lIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5BdSBuaXZlYXUgMjAsIGxhIEbDvHJ0YW5lIGVzdCBhY2NvbXBsaWUgZXQgYXVnbWVudGUgc2VzIGNhcmFjdMOpcmlzdGlxdWVzIGRlIGRleHTDqXJpdMOpIGV0IGRlIGNvbnN0aXR1dGlvbiBkZSAyIHBvaW50cyBzYW5zIHBvdXZvaXIgZMOpcGFzc2VyIDIyLiIKICAgICAgICApCiAgICAgIF0pCiAgICBdCiAgKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}