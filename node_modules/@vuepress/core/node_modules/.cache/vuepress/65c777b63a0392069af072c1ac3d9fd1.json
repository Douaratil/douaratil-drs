{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/chroniques/miz-even-721/README.md?vue&type=template&id=289a00dc&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/chroniques/miz-even-721/README.md","mtime":1634294763245},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJjaHJvbmlxdWVzLWR1LWxvdXAtZ3JpcyIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJDaHJvbmlxdWVzIGR1IGxvdXAgZ3JpcyAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNjaHJvbmlxdWVzLWR1LWxvdXAtZ3JpcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImhlcm8iIH0sIFsKICAgICAgICBfYygicCIsIFtfdm0uX3YoIkNldHRlIHNlY3Rpb24gcmFjb250ZSBsZXMgYXZlbnR1cmVzIGRlIDoiKV0pLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJ1bCIsIFsKICAgICAgICAgIF9jKCJsaSIsIFtfYygic3Ryb25nIiwgW192bS5fdigiR3dpb24iKV0pLCBfdm0uX3YoIiBsJ0FtYmVhbmFtb3MiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJMw7RjaGV0b3MiKV0pLAogICAgICAgICAgICBfdm0uX3YoIiBsZSBMbGF3ZW5vcyIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTWFsYWxhIFNvYSIpXSksCiAgICAgICAgICAgIF92bS5fdigiIGxhIFNoYW5naGFyYWgiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJsaSIsIFtfYygic3Ryb25nIiwgW192bS5fdigiTWFyZ3MiKV0pLCBfdm0uX3YoIiBsZSBCaGVnZWxtIildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImxpIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJPd2FpbiIpXSksIF92bS5fdigiIGxlIEd3eWx3aXIiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygibGkiLCBbX2MoInN0cm9uZyIsIFtfdm0uX3YoIlJ1ZG9sZiIpXSksIF92bS5fdigiIGxlIFNrZWxsIildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImxpIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJTYXdyaW5hIildKSwgX3ZtLl92KCIgTGEgTmF5YW5lIildKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoImxpIiwgW19jKCJzdHJvbmciLCBbX3ZtLl92KCJUaWJlcml1cyIpXSksIF92bS5fdigiIGwnQXN0YXJ0ZXMiKV0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJZYW4gWmluIildKSwKICAgICAgICAgICAgX3ZtLl92KCIgbGUgU2VpYmFoa2FtaS5cblRlbGxlcyBxdSdlbGxlcyBvbnQgw6l0w6kgcmFwcG9ydMOpZXMuIikKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiTWl6IEV2ZW4gZHUgNzIxwrAgY3ljbGUgZHUgY2FsZW5kcmllciBBbGNhbnRlIildKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJrZXJ6dSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJLZXJ6dSAiKSwKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNrZXJ6dSIgfSB9LCBbCiAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiNCBNaXogRXZlbiIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL3RpYmVyaXVzLWRvbi1hbG9uem8iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJUaWJlcml1cyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgZXQgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL3J1ZG9sZi1mYXJlZyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIlJ1ZG9sZiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgYXJyaXZlbnQgbGUgbWF0aW4gYWNjb21wYWduw6kgZGUgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL3NoaW4taGFtZSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIlNoaW4gSGFtZSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBxdSdpbHMgb250IHLDqWN1cMOpcsOpIMOgIEtlci1TYW96b24sIGVuIGZyYW5jaGlzc2FudCBkaXNjcsOodGVtZW50IGxlIHNpw6hnZSBkdSBSZWsgQmVyYWMnaCBTZWdhbGVuIGV0IGRlIHNlcyBhbGxpw6lzLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkxlcyByb3V0ZXMgbmUgc29udCBwbHVzIHPDu3JlIGV0IGxlcyBwaWxsYWdlcyBzb250IHLDqWd1bGllcnMuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCJcbkF2ZXJ0aSBwYXIgdW5lIGNvcm5laWxsZSwgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL21hcmdzLW1hZW5rYWxvbiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIk1hcmdzIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGEgZmFpdCBsZSB2b3lhZ2UgZXQgYSBwdSBjb25zdGF0ZXIgbGVzIHJhdmFnZXMgZGUgbGEgZ3VlcnJlLiBMYSBjb2FsaXRpb24gZGUgQnJpdG9tYXJ0b3MgZXQgZGUgc2VzIGFsbGnDqXMsIGF5YW50IHNvaWduZXVzZW1lbnQgw6l2aXTDqSBkZSBjb250cmFyaWVyIE1hc3l2dW0sIHBhcmNvdXJzIGxlcyB0ZXJyZXMgZHUgbm9yZCB2ZXJzIEtlcm5hYyBtYWlzIGF1c3NpIGNlbGxlcyBkdSBzdWQgdmVycyBLZXJ6dS4gUGFzIGVuY29yZSBhc3NleiBmb3J0IHBvdXIgc2UgZHJlc3NlciBjb250cmUgbGVzIHBvdXZvaXJzIGVuIHBsYWNlLCBjZXR0ZSBjb2FsaXRpb24gc2VtYmxlIGRhbnMgbCdhdHRlbnRlIGQndW4gw6l2w6huZW1lbnQgZMOpY2xlbmNoZXVyLiBMZXMgcsOqdmVzIGRlICIKICAgICAgICApLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiL2Jlc3RpYWlyZS9tYXJncy1tYWVua2Fsb24iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJNYXJncyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgbmUgc29udCBkJ2FpbGxldXJzIHBhcyB0csOocyBjbGFpcnMgw6AgY2Ugc3VqZXQuIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL2d3aW9uLWdvcm5vYyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkd3aW9uIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBzZSByZW1ldCBkb3VjZW1lbnQgZGUgc2VzIGJsZXNzdXJlcyBldCBkZSBzYSBjYXB0aXZpdMOpLiIpCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjUgTWl6IEV2ZW4iKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkRlcyBwcm92aXNpb25zIHBvdXIgbGEgdHJhdmVyc8OpZSBvbnQgw6l0w6kgcmFzc2VtYmzDqWUgZXQgYydlc3QgYXUgcGV0aXQgbWF0aW4gcXVlIGxlIGJhdGVhdSwgdW4gdmlldXggbmF2aXJlIMOgIHVuIG3DonRzIGV0IMOgIHJhbWVzLCBxdWl0dGUgbGUgcml2YWdlIHN1ciB1bmUgbWVyIGQnaHVpbGUuIEVtYnJhc8OpZXMgZGUgcm9zZSBldCBkZSBmZXUsIGxhIG1lciBldCBsZSBjaWVsIG5lIGZvbnQgcXUndW4gcGVuZGFudCB1biBpbnN0YW50LiBMZSBjcmkgZGVzIG1vdWV0dGVzLCBsZSBjbGFwb3RpcyBkZXMgcmFtZXMgZXQgbGUgc291ZmZsZSBsw6lnZXIgZGVzIMOpbMOpbWVudGFpcmVzIGRlIGwnYWlyIGF1cmFpZW50IHB1IGF1Z3VyZXIgdW5lIHRyYXZlcnPDqWUgcGFpc2libGUgbWFpcyAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvZ3dpb24tZ29ybm9jIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiR3dpb24iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgLCBwbHVzIHF1ZSB0b3V0IGF1dHJlcywgY29ubmFpc3NhaXQgbGEgc29yZGlkZSByw6lwdXRhdGlvbiBkJ0F2ZWxoYWRlbi4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5VbmUgZm9pcyBzb3J0aSBkZSBsYSBwcm90ZWN0aW9uIGRlcyBjw7R0ZXMsIGxhIG1lciBlc3QgZMOpasOgIHBsdXMgYWdpdMOpZSBldCBpbnN0aW5jdGl2ZW1lbnQsIHRvdXMgY2V1eCBxdWkgbidvbnQgcGFzIGxlIHBpZWQgbWFyaW4sIHMnYWdyaXBwZW50IMOgIGxhIHJhbWJhcmRlIG91IGEgZGVzIGNvcmRhZ2VzIGRlIHBldXIgZGUgYmFzY3VsZXIgZXQgZGUgc29tYnJlciBhdSBmb25kIGRlIGwnb2PDqWFuIGF2ZWMgYXJtZXMgZXQgYmFnYWdlcy4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5MZSBjaWVsIGVzdCBiYXMgZW4gY2Ugam91ciBldCBsZXMgZm9yY2VzIGR1IHZlbnRzIHZpZW5uZW50IGFycmFjaGVyIGRlcyB2b2x1dGVzIGRlcyBudWFnZXMgcXVpIHZpZW5uZW50IHMnw6l0YWxlciBzdXIgbGEgc3VyZmFjZSBkZSBsJ2VhdSBlbiBkZSBsYXJnZXMgbmFwcGVzIGRlIGJydW1lcyBxdWkgZGlzc2ltdWxlIGxlcyByb2NoZXJzIMOgIGZsZXVyIGQnZWF1LiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkMnZXN0IGVuIGZpbiBkZSBtYXRpbsOpZSBxdWUgbGEgY8O0dGUgbXlzdMOpcmlldXNlIGQnQXZlbGhhZGVuIHNlIGTDqWNvdXBlIMOgIGwnaG9yaXpvbi4gUGVkciBQcmltYWxvIHF1aSBlc3Qgw6AgbGEgbWFuxZN1dnJlIHJlbWFycXVlIGRldXggdm9pbGVzIHF1aSBzZW1ibGUgcmVtb250ZXIgZGFucyBsYSBkaXJlY3Rpb24gZHUgbmF2aXJlLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJlbSIsIFsKICAgICAgICAgIF92bS5fdignLSJJbHMgb250IGR1IG5vdXMgcHJlbmRyZSBwb3VyIGRlcyBtYXJjaGFuZHMgw6lnYXLDqXMiJykKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiwgc2UgbWV0LWlsIMOgIGNyaWVyIGVuIGTDqXNpZ25hbnQgbGVzIHZvaWxlcyBtZW5hw6dhbnRlcy4iKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5TJ2VuIHN1aXQgdW4gbG9uZyBtb21lbnQgZCdhbmdvaXNzZSBvw7kgbGVzIGJhdGVhdXggcGx1cyByYXBpZGVzIHJlbW9udGVudCBldCBwcsOpc2VudGVudCDDoCBwb3J0w6llIGRlIGZsw6hjaGVzLiBNb25vcG9saXNhbnQgbGV1ciBhdHRlbnRpb24sIGxlcyBjb21wYWdub25zIG4nb250IHBhcyB2dSBxdSdpbHMgw6l0YWl0IHByZXNxdWUgYXJyaXbDqWUgZXQgZMOpasOgIGwnw6ljdW1lIGphaWxsaXNzYW50ZSBkZSBsYSByb2NoZSBhdXggY2hldmV1eCBkJ2FyZ2VudCBqb25jaMOpZSBkJ8OpcGF2ZXMgYXR0aXLDqWVzIHBhciBkZXMgbmF1ZnJhZ2V1cnMgb3UgZGUgbWFyaW5zIHBldSBhZ3VlcnJpcywgYXZhbnQgZGUgcMOpbsOpdHJlciBkYW5zIGxhIGJhaWUgcGFpc2libGUgb8O5IGxhIG1lciBzZSBjYWxtZSwgc3VycGxvbWLDqWUgcGFyIGxlcyBmYWxhaXNlcyBldCBsZXMgbWFpc29ucyBkZSBEaW5hcyBNb3ItTGVpZHIuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuTGVzIHBvdXJzdWl2YW50cyBzZW1ibGVudCBhdm9pciBsw6JjaMOpIGwnYWZmYWlyZSBldCBsZXMgY29tcGFnbm9ucyBwZXV2ZW50IGFkbWlyZXIgbGVzIGhhdXRlcyBmYWxhaXNlcywgw6ljb3V0ZXIgbGUgY3JpcyBkZXMgbW91ZXR0ZXMgZXQgbGUgZ3JvbmRlbWVudCBkZXMgdmFndWVzIGNvbnRyZSBsZXMgcm9jaGVycyBldCBsZXMgLi4uLiBsZXMgc3F1ZWxldHRlcyBodW1haW5zIGVuIGJhcyBkZXMgZmFsYWlzZXMgZGFucyBkZXMgY2FnZXMgw6AgZmxldXIgZCdlYXUuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuRCdhdXRyZXMgYmF0ZWF1eCB2b250IGV0IHZpZW5uZW50IHNhbnMgc2Ugc291Y2llciBkZSBsJ2Fycml2w6llIGRlIG5vdXZlYXV4IHZlbnVzLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkxhIHZpbGxlIHNlbWJsZSBkZSBwcmltZSBhYm9yZHMgdW5lIHZpbGxlIHRvdXQgw6AgZmFpdCBub3JtYWxlIMOgIGwnZXhjZXB0aW9uIGRlcyBibGFzb25zIGFmZmljaGFudCBkZXMgdMOqdGVzIGRlIG1vcnRzIGVuIGhhdXQgZGVzIG3DonRzIGRlcyBiYXRlYXV4LiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcblVuZSBmb2lzIGTDqWJhcnF1w6lzIGV0IGF1IHByaXggZGUgcXVlbHF1ZXMgcGnDqGNlcyBzb25uYW50ZXMgZXQgdHLDqWJ1Y2hhbnRlcywgbGVzIGNvbXBhZ25vbnMgcydpbnN0YWxsZW50IGRhbnMgbGUgcXVhcnRpZXIgbWFyY2hhbmQgw6AgbGEgdGF2ZXJuZSBkdSByYXQgcm95YWwgKFNow7sgSMO7YW5nc2hpKSBxdWkgZXN0IHN1ZmZpc2FtbWVudCBiaWVuIGVudHJldGVudSBwb3VyIGNvbnZlbmlyIG1haXMgYXVzc2kgZnLDqXF1ZW50w6kgw6AgbCdvY2Nhc2lvbiBwYXIgZGVzIGNvdXJ0aXNhbmVzLiBMZXMgY2hhbWJyZXMgcGV1dmVudCDDqnRyZSBsb3XDqWVzIGF2ZWMgY29tcGFnbmllLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcblByZW5hbnQgY29udGFjdCBhdmVjIEd1w6lub2zDqSBRdWludGluLCBsYSBwYXRyb25uZSwgcG91ciBzZSByZW5zZWlnbmVyIHN1ciBsZXMgYXR0cmFjdGlvbnMgbG9jYWxlcyBldCBsZXMgYm9ucyBjb2lucyDDoCB2aXNpdGVyLCBpbHMgc29udCBkaXJpZ8OpcyB2ZXJzIGxlcyBhcsOobmVzIHNvdXRlcnJhaW5lcyB0ZW51ZXMgcGFyIGxlIGNsYW4gZGVzIGNyYWJlcyBqYXVuZXMuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCJcblVuIGxpZXUgcGxlaW5zIGRlIGRpdmVydGlzc2VtZW50cyBldCBkZSBzZW5zYXRpb25zIGZvcnRlcy4iKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5Ub3V0ZSBsJ8OpcXVpcGUgc2UgcmVuZCBzdXIgcGxhY2UgZXQgZMOpY291dnJlIGRhbnMgbGVzIFwiY2F0YWNvbWJlcyBkZSBsYSB2aWxsZVwiIHVuIHZhc3RlIHRyaXBvIGFuaW3DqSBwYXIgZGVzIGNvbWJhdHMgZGUgZ2xhZGlhdGV1cnMgZXQgYWxpbWVudMOpIHBhciBkZXMgcGFyaXMgZXQgdW5lIGNvbnNvbWF0aW9uIGV4Y2Vzc2l2ZSBkJ2FsY29vbC4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIlxuSWxzIGTDqWNvdXZyZW50IHF1ZSAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvc2F3cmluYS1zZW1pcmFtaXMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJTYXdyaW5hIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGVzdCBkYW5zIGwnYXLDqm5lIGV0IGFzc3VyZSBsZSBzcGVjdGFjbGUuIFVuZSBmb3VsZSBoYXJyYW5ndWUgbGVzIGNvbWJhdHRhbnRzIGRhbnMgdW5lIGFtYmlhbmNlIHN1cnZvbHTDqWUuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuTGVzIGNvbXBhZ25vbnMgcmVtYXJxdWVudCBxdWUgZGFucyB1bmUgYWxjb3ZlIHRhaWxsw6llIGRhbnMgbGEgcm9jaGUgcXVpIHN1cnBsb21iZSBsJ2Fyw6puZSwgbGUgY2hlZiBkZXMgY3JhYmVzIGphdW5lcyBwYXZvaXNlIGV0IMOpdGFsZSBzYSBwdWlzc2FuY2UuIElscyByZW1hcnF1ZW50IHF1ZSBsYSBwaWVycmUgZCdlc3ByaXQgcXVpIGxpZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvc2F3cmluYS1zZW1pcmFtaXMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJTYXdyaW5hIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBlc3Qgc3VyIHBpZWQgZCdlc3RhbGUgZGV2YW50IGxlIGNoZWYgZGVzIG1hbGZyYXRzLiAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvdGliZXJpdXMtZG9uLWFsb256byIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIlRpYmVyaXVzIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBkw6ljaWRlIGQnYWxsZXIgcsOpY3Vww6lyZXIgbGEgcGllcnJlLiAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvZ3dpb24tZ29ybm9jIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiR3dpb24iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcXVpIHNhaXQgZmFpcmUgZGlzcGFyYWl0cmUgZHUgcmVnYXJkIGRlcyBjaG9zZXMgb3UgZGVzIHBlcnNvbm5lcyByZW5kIGwnYWxjYW50ZSBpbnZpc2libGUuIExlcyBhdXRyZXMgbWVtYnJlcyBkdSBncm91cGUgc2UgY29vcmRvbm5lbnQgcG91ciBkw6ljbGVuY2hlciB1bmUgZ3Jvc3NlIGJhZ2FycmUgZGFucyBsYSBmb3VsZS4gSWwgbmUgZmF1dCBwYXMgYmVhdWNvdXAgc2UgZm9yY2VyIHBvdXIgcXVlIGxhIHNpdHVhdGlvbiBkw6lnw6luw6hyZSBjb21wbMOodGVtZW50LiBBUHLDqHMgdW4gZXNzYWkgZCdlc2NhbGFkZSBpbmZydXRldXgsIGwnYWxjYW50ZSBzZSBoaXNzZSBqc3VxdSfDoCBsYSBwaWVycmUgZXQgbGEgc3VidGlsaXNlIG5vbiBzJ2VuIGF2b2lyIGxhaXNzw6kgcXVlbHF1ZXMgZ291dHRlcyBkZSBwb2lzb24gw6AgZG9zZSBsYXhhdGl2ZSBldCBzcGFzbW9kaXF1ZSBkYW5zIGxhIGNvdXBlIGR1IGNoZWYgZGVzIGNyYWJlcyBqYXVuZXMsIHRyw6hzIG9jY3Vww6kgYXZlYyB1bmUgY291cnRpc2FuZS4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5QcmlzIGRlIHNwYXNtZXMgZXQgZGUgdm9taXNzZW1lbnRzLCBsZXMgZ2FyZGVzLCBzdXNwZWN0YW50IHVuZSB0ZW50YXRpdmUgZGUgbWV1cnRyZSBkZSBsYSBwYXJ0IGRlIGxhIGNvdXJ0aXNhbnRlLCBleHRyYWllbnQgbGV1ciBjaGVmIG5vbiBzYW5zIG1hc3NhY3JlciBsYSBwYXV2cmUgZmVtbWUgYXUgcGFzc2FnZS4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvcnVkb2xmLWJlcm5zZW4iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJSdWRvbGYiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcmVqb2ludCBsYSBOYXlhbmUgZXQgbGEgcmFzc3VyZSBzdXIgbGVzIGludGVudGlvbnMgZHUgZ3JvdXBlIMOgIHNvbiDDqWdhcmQuIElsIGx1aSBwcm9wb3NlIGRlIHMnZW5mdWlyLiBQcm9maXRhbnQgZHUgZMOpc29yZHJlIGFtYmlhbnQsIHRvdXMgcHJlbm5lbnQgbGEgZnVpdGUgZGFucyB1bmUgZmluIGRlIHNvaXLDqWUgbW91dmVtZW50w6llIGV0IGZpbmFsZW1lbnQgdHLDqHMgcsOpdXNzaWUuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuVW4gaW5jb25udSB0b3RhbGVtZW50IGl2cmUgYWJvcmRlIGwnYWxjYW50ZSBldCBsdWkgcHJvcG9zZSBkZSBsdWkgdmVuZHJlIHVuZSBjYXJ0ZS4gSWwgYWNjZXB0ZSBtYWlzIHLDqWN1cMOocmUgcmFwaWRlbWVudCBzYSBtaXNlIGVuIGTDqXRyb3Vzc2FudCBsJ2l2cm9nbmUgcXVpIG4neSB2b2l0IHF1ZSBkdSBmZXUuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuRGUgcmV0b3VyIMOgIGwnYXViZXJnZSBkdSBcIlJhdCByb3lhbFwiLCBpbHMgc2UgbWV0dGVudCBlbiBxdcOqdGUgZHUgZGV1eGnDqG1lIHN1amV0IGRlIGxldXIgdmVudWUgc3VyIGwnw65sZSBkJ0F2ZWxoYWRlbiwgbGEgcmVuY29udHJlIGF2ZWMgbGEgRGV2ZW5pcmVzc2UuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuR291w6lub2zDqSwgbGEgcGF0cm9ubmUsIGxldXIgaW5kaXF1ZSB1biBlbmNoYW50ZXVyIHF1aSBwYXNzZSByw6lndWxpw6hyZW1lbnQgZW4gdmlsbGUgZXQgcXVpIHLDqXNpZGUgZGFucyBsZSBxdWFydGllciBvdWVzdCAocXVhbmQgaWwgZXN0IGzDoCkuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuSWwgc2UgcmVuZGVudCBkb25jIGF1IGxpZXUgaW5kaXF1w6kgZXQgbGEgcG9ydGUgZXN0IG91dmVydGUgcGFyIHVuZSBndWVycmnDqHJlIHJvdXNzZSBjaGFycGVudMOpZSBkdSBub20gZGUgS29sbmEuIElscyBzb250IGZpbmFsZW1lbnQgcmXDp3UgcGFyIElvZW4gbCdlbmNoYW50ZXVyIHF1aSBsZXMgc291bWV0IHVuZSBwZXRpdGUgw6lwcmV1dmUuIElsIGxldXIgbGFpc3NlIHVuZSDDqW5pZ21lIG1haXMgYydlc3Qgc2FucyBjb21wdGVyIGxhIHBlcnNwaWNhY2l0w6kgZGVzIG5vdXZlYXV4IGFycml2YW50cy4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIlxuSW9lbiByZW5zZWlnbmUgYXUgcGFzc2FnZSAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvbG9jaGV0b3MtdmxhdGNhbm8iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJMw7RjaGV0b3MiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICcgc3VyIGxhIG5hdHVyZSBkZSBsYSBOYXlhbmUgZXQgZGUgbGEgbWFuacOocmUgZGUgbGEgImNvbW1hbmRlciIuJwogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuRW5maW4sIElvZW4gaW5kaXF1ZSBsJ2l0aW7DqXJhaXJlIHBvdXIgcmVqb2luZHJlIGxlIGNsb8OudHJlIGRlcyDDom1lcyBkYW1uw6llcywgZGVtZXVyZSBkZSBsYSBEaXZpbmVyZXNzZSwgZ2FyZMOpZSBwYXIgZGVzIFNlcm1hemxvdGhzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjYgTWl6IEV2ZW4iKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkxlIGxlbmRlbWFpbiwgc3VpdmFudCBsZXMgaW5zdHJ1Y3Rpb25zLCBpbHMgw6l2aXRlbnQgdW5lIHJlZ3JldHRhYmxlIGNvbmZyb250YXRpb24gYXZlYyBkZXMgVXInaHMgZXQgYXJyaXZhbnQgYXUgY2xvw650cmUgc29udCBkZSBub3V2ZWF1IHNvdW1pcyDDoCB1bmUgbm91dmVsIGVuaWdtZS4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5BcHLDqHMgbCdhdm9pciByw6lzb2x1ZSwgbGVzIGF2ZW50dXJpZXJzIHDDqW7DqHRyZW50IGRhbnMgbGUgbGlldSBzYWNyw6kgZXQgc29udCBtaXMgZW4gcHLDqXNlbmNlIGRlIGxhIERpdmluZXJlc3NlIEFvZHJlbmEgV2FyIEFyY+KAmWhhbnQuIEwnw6l0cmFuZ2UgZmVtbWUgZmFpdCB1bmUgcHJvcGjDqXRpZSBkYW5zIHVuZSBsYW5ndWUgYW5jaWVubmUgdHJhZHVpdGUgcGFyIHVuZSBTZXJtYXpsb3RoLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG5MYSBwcm9waMOpdGllIGVzdCBsYSBzdWl2YW50ZSA6IiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAnIkRhbnMgbGEgcMOpcmlvZGUgZHUgUHJlbWllciBGZXUsIGxhIG5hdGlvbiBkZXMgZW5mYW50cyBk4oCZWWxvaGFuZSBz4oCZw6lsw6h2ZXJhIGV0IHN1aXZyYSBsYSB2b2llIGR1IENlcmNsZSBkZSBsYSBudWl0LiBMZSBjZXJjbGUgZGUgS2VybmFjIHNlcnZpcmEgZGUgcG9pbnQgZGUgcmFzc2VtYmxlbWVudCBhdSBwZXVwbGUgZXQgc2VzIHRyYWRpdGlvbnMgc2Vyb250IGxhIHNvdXJjZSBkZSBiZWF1Y291cCBkZSBmb3JjZS4gTGUgQmhlZ2VsbSBjaG9pc2kgcGFyIGxlIGRlc3RpbiBTYWNyw6kgbGVzIGNvbmR1aXJhIMOgIGxhIHRlcnJlIGNob2lzaWUgcG91ciBsZXMgw6lsdWVzIGR1IG5vdXZlYXUgam91ci4gVm91cyBkZXZyZXogY2hlcmNoZXIgdW5lIMOubGUsIGFuY2llbm5lIG1haXNvbiBkdSBwZXVwbGUgZMOpY2h1LCBldCBkw6ljb3V2cmlyIGxlIHB1aXTCoHJlbGnDqWUgw6AgbGEgcHVyaWZpY2F0aW9uIGRlIGxhIHRlcnJlLiBWb3VzIHRyb3V2ZXJleiB1bmUgdGVsbGUgw65sZSBhdSBkw6lidXQgZXQgw6AgbGEgZmluIGRlIHZvdHJlIHZveWFnZS4gSWwgeSBhdXJhIHNlcHQgZW5kcm9pdHMgb8O5IHZvdXMgdm91cyBhcnLDqnRlcmV6IHN1ciB2b3RyZSBwYXJjb3Vycy4gVm91cyBzYXVyZXogcXVlIHZvdXMgYXZleiBhdHRlaW50IGzigJllbmRyb2l0IGNob2lzaSBxdWFuZCB2b3VzIGF1cmV6IGF0dGVpbnQgdW5lIHRlcnJlIG/DuSBsYSBub3Vycml0dXJlIHNlIGTDqXZlbG9wcGUgc3VyIGzigJllYXUuIFNpIHZvdXMgeSByZXN0ZXosIHZvdXMgcMOpcmlyZXouIicKICAgICAgICAgICkKICAgICAgICBdKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5MZSBncm91cGUgcmVwYXJ0IMOgIERpbmFzIE1vci1sZWlkciBzZSBkZW1hbmRhbnQgY29tbWVudCBpbnRlcnByw6p0ZXIgZGUgdGVsbGVzIHBhcm9sZXMuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL2d3aW9uLWdvcm5vYyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkd3aW9uIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGVudmlzYWdlIGRlIHZpc2l0ZXIgbGVzIGVudmlyb25zLCBjZXJ0YWluZXMgw65sZXMgaW50ZXJkaXRlcyBsJ2ludMOpcmVzc2VudCBwYXJ0aWN1bGnDqHJlbWVudC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCI3IE1peiBFdmVuIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5M4oCZYW1iZWFuYW1vcyBkw6ljaWRlIGZpbmFsZW1lbnQgZGUgcmVwYXJ0aXIgw6AgS2VyenUgZW4gY29tcGFnbmllIGRlIFNhd3JpbmEgcG91ciBhbGxlciB2aXNpdGVyIHNvbiBjb3VzaW4gZm9yZ2Vyb24sIER5Zm5hbiBHb3Jub2MuIElscyBwYXJ0ZW50IHTDtHQgbGUgbWF0aW4gcHJvZml0YW50IGR1IGNhbG1lIGRlIGxhIG1lciBwb3VyIHRyYXZlcnNlci4gIgogICAgICAgICksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL2d3aW9uLWdvcm5vYyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkd3aW9uIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBzZW1ibGUgcG9ydGVyIHVuIGludMOpcsOqdCB0b3V0IGF1dHJlIHN1ciAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvc2F3cmluYS1zZW1pcmFtaXMiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJTYXdyaW5hIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBldCByw6lmbMOpY2hpdCDDoCBwcm9wb3MgZGUgbGEgcHJvcGjDqXRpZS4iKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvbG9jaGV0b3MtdmxhdGNhbm8iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJMw7RjaGV0b3MiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgc2UgcHJvY3VyZSB1bmUgYm91dGVpbGxlIGRlIGJvbiB2aW4gZXQgYWxvcnMgcXVlIGxldXIgbmF2aXJlIHPigJlhcHByw6p0ZSDDoCBsZXZlciBs4oCZYW5jcmUgcG91ciBLZXJ6dSwgaWwgdmVyc2UgZW4gb2ZmcmFuZGUgYXUgRGlldSBNYXJpbiBsZSBsaXF1aWRlIHF1aSB2aWVudCB0ZWluZHJlIGVuIHJvdWdlIGxlIHRlbXBzIGTigJl1biBpbnN0YW50IGxlcyB2YWd1ZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiOCBNaXogRXZlbiIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuTGEgbmF5YW5lIGV0IGxlIHNvcmNpZXIgb250IHBhc3PDqSBsYSBudWl0IGRhbnMgdW5lIHBldGl0ZSBhdWJlcmdlLCBhY2N1ZWlsbGFudCBtYXJpbnMgZXQgdm95YWdldXJzIHBvdXIgdW4gcHJpeCBjb252ZW5hYmxlLiBEw6hzIGxlIG1hdGluLCAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvZ3dpb24tZ29ybm9jIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiR3dpb24iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgZW1tw6huZSBTYXdyaW5hIHZvaXIgbGUgZm9yZ2Vyb24gZXQgbHVpIGRlbWFuZGUgZGUgZm9yZ2VyIGxhIG1laWxsZXVyZSBhcm11cmUgZXQgbGVzIG1laWxsZXVyZXMgYXJtZXMgcXXigJlpbCBhaXQgamFtYWlzIGLDonRpZXMuIExlIG1lbGTDqHRlIGxlcyBsYWlzc2Ugc2V1bHMgcG91ciBxdWUgU2F3cmluYSBwdWlzc2UgY29tbXVuaXF1ZXIgc2VzIGlkw6llcyBlbiBsYSBtYXRpw6hyZSwgdGFuZGlzIHF1ZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvZ3dpb24tZ29ybm9jIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiR3dpb24iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIHJlcGFydCBz4oCZZW5mZXJtZXIgZGFucyBzYSBjaGFtYnJlIMOpdHVkaWVyLiIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkFsb3JzIHF1ZSBs4oCZw6lxdWlwYWdlIHZpZW50IHRvdXQganVzdGUgZGUgcmVtZXR0cmUgcGllZCBzdXIgbGUgY29udGluZW50LCAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvbG9jaGV0b3MtdmxhdGNhbm8iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJMw7RjaGV0b3MiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgc2FsdWUgc2VzIGNvbXBhZ25vbnMgZXQgcHJlbmQgZGlyZWN0ZW1lbnQgbGEgcm91dGUgZGUgVGhhb3VldC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCI5IE1peiBFdmVuIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIlxuQ2UgbWF0aW4sICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiL2Jlc3RpYWlyZS9zYXdyaW5hLXNlbWlyYW1pcyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIlNhd3JpbmEiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgc2UgbMOodmUgZXQgZMOpY291dnJlIGxhIGNoYW1icmUgZHUgc29yY2llciAoZW4gcGx1cyBk4oCZw6p0cmUgc2VucyBkZXNzdXMgZGVzc291cyBjb21tZSDDoCBsYSBjb3V0dW1lIGRlICIKICAgICAgICApLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiL2Jlc3RpYWlyZS9nd2lvbi1nb3Jub2MiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJHd2lvbiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIikgb3V2ZXJ0ZSwgc2FucyBsZSBzb3JjaWVyLCBldCBhdmVjIHNlcyBwcsOpY2lldXggcGFyY2hlbWlucyBkaXNwYXJ1cy4gTGEgbmF5YW5lIG5lIHPigJllbiBpbnF1acOodGUgcGFzIHZyYWltZW50LCBjb21tZW7Dp2FudCDDoCBhdm9pciBs4oCZaGFiaXR1ZGUgZGVzIG9yaWdpbmFsaXTDqXMgZGUgc29uIGNvbXBhZ25vbiBk4oCZYXZlbnR1cmUsIG1haXMgZW4gZXNww6lyYW50IHNpbXBsZW1lbnQgcXXigJlpbCBzZXJhIGRlIHJldG91ciBhdmFudCBsZSBqb3VyIGVudm9sw6kuIEVuIHbDqXJpdMOpLCBsZSBzb3JjaWVyIMOpdGFpdCBwYXJ0aSBkZSBib25uZSBoZXVyZSwgcmVuY29udHJlciBsYSBmYW1pbGxlIGRlIERyeXN0YW4sIGzigJlob21tZSBkZSBQZWRyIGV0IGNlbHVpIHF1aSBs4oCZYSBzYXV2w6kgZGUgc2VzIHRvcnRpb25uYWlyZXMuIElsIGVzcMOocmUgYXZhbnQgdG91dCBuZSBwYXMgYXZvaXIgw6AgYW5ub25jZXIgc2EgbW9ydCDDoCBzYSBmYW1pbGxlLiBJbCBwcsOpc2VudGUgc2VzIHBsdXMgcGxhdGVzIGV4Y3VzZXMgw6AgbGEgdmV1dmUsIGV0IGx1aSBhc3N1cmUgc2EgcHJvdGVjdGlvbiBwYXIgc29uIGNsYW4uIElsIGx1aSBkb25uZSBhdXNzaSB1biBkw6lkb21tYWdlbWVudCBmaW5hbmNpZXIgc+KAmcOpbGV2YW50IMOgIHF1ZWxxdWVzIDQwMCBQTy4gSWwgbGFpc3NlIGxhIHZldXZlIMOgIHNvbiBjaGFncmluIGV0IHNhIHNvbGl0dWRlLiAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvZ3dpb24tZ29ybm9jIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiR3dpb24iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIHJlbnRyZSDDoCBs4oCZYXViZXJnZSBhdmFudCBxdWUgU2F3cmluYSBhaXQgcHUgc+KAmWlucXVpw6l0ZXIuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMTAgTWl6IEV2ZW4iKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiL2Jlc3RpYWlyZS9zYXdyaW5hLXNlbWlyYW1pcyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIlNhd3JpbmEiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiIHJlbnRyZSDDoCBBdmVsaGFkZW4gYWluc2kgcXVlICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiL2Jlc3RpYWlyZS9nd2lvbi1nb3Jub2MiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJHd2lvbiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBxdWkgY29udGludWUgZOKAmcOqdHJlIGFic29yYsOpIHBhciBzZXMgdHJhdmF1eC4gSWwgc29ydCBlbiBwbGVpbiBtaWxpZXUgZGUgbGEgdHJhdmVyc8OpZSwgdG91dCBldXBob3JpcXVlLCBsb3VhbnQgZGlldXggZXQgZW50aXTDqXMsIGVuIHNhdXRhbnQgcHJlc3F1ZSBzdXIgcGxhY2UuIElsIHJlcHJlbmQgc291ZGFpbmVtZW50IGNvbnRlbmFuY2UgbG9yc3F14oCZdW5lIHB1aXNzYW50ZSB2YWd1ZSBmYWlsbGl0IGxlIGpldGVyIMOgIGzigJlvY8OpYW4uIElsIHJlcGFydCBkYW5zIHNhIGNhYmluZSBlbiBzaWxlbmNlIGVuIHJlcHJlbmFudCBzb24gYWlyIGFjYXJpw6J0cmUuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCJcbkxlIHZveWFnZSBkZSAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvbG9jaGV0b3MtdmxhdGNhbm8iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJMw7RjaGV0b3MiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgc2UgZMOpcm91bGUgc2FucyBlbWJ1Y2hlIGV0IGxlIGpldW5lIGhvbW1lIMOpdm9sdWUgw6AgdW4gcnl0aG1lIMOpbGV2w6ksIMOgIHRyYXZlcnMgY2VzIGJvaXMgcXXigJlpbCBjb21tZW5jZSDDoCBjb25uYWl0cmUuIElsIHJlcGVuc2Ugw6AgbGEgcHJvcGjDqXRpZSBxdWUgbGV1ciBhIGxpdnLDqSBsYSBkZXZpbmVyZXNzZSBldCBlc3NheWUgZGUgdHJvdXZlciBkZXMgbGllbnMgYXZlYyBkZXMgY29udGVzIGV0IGzDqWdlbmRlcyBxdeKAmWlsIGEgcHUgZW50ZW5kcmUgbG9ycyBkZXMgbm9tYnJldXNlcyB2ZWlsbMOpZXMgYXV4cXVlbGxlcyBpbCBhIHB1IHBhcnRpY2lwZXIuXG5JbCByZXBlbnNlIMOgIGNlcyBob21tZXMgZXQgZmVtbWVzIHLDqXVuaXMgYXV0b3VyIGTigJl1biBncmFuZCBmZXUsIGF1eCBjaGFudHMgcXVpIHPigJnDqWzDqHZlbnQgYXZlYyBsZXMgYnJhaXNlcywgYXV4IGRhbnNlcyBlbiBoYXJtb25pZSBhdmVjIGxlcyBmbGFtbWVzIGV0IGF1eCBjb250ZXMgcXVpIGzigJlhY2NvbXBhZ25haXQgdG91dGUgbGEgbnVpdC4gQ2VwZW5kYW50IGlsIG7igJlhcnJpdmUgcGFzIMOgIGZhaXJlIGRlIGxpZW5zIGF2ZWMgY2UgcXXigJlpbCBhIMOgIGzigJllc3ByaXQgbWFpcyBlc3QgcGVyc3VhZMOpIHF14oCZaWwgcG91cnJhaXQgZW4gc2F2b2lyIHBsdXMgc+KAmWlsIGFsbGFpdCBwYXJsZXIgYXV4IGFuY2llbnMuIElsIHNlIHLDqXZlaWxsZSBlbiBzdXJzYXV0IGF1IG1pbGlldSBkZSBsYSBudWl0LiBJbCBzZSByZW5kIGNvbXB0ZSBxdSdpbCBlc3QgZW4gc3VldXIuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiS3JhYXMgQnl5cyIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiS3JhYXMgQnl5cywgbGEgbWF1ZGl0ZSIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImVtIiwgW192bS5fdigiS3JhYXMgQnl5cywgbGEgZMOpY2FkZW50ZSIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImVtIiwgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTCfDrmxlIG1hdWRpdGUsIGFiYW5kb25uw6llIGRlcyBkaWV1eCBldCBsaXZyw6llIGVuIHDDonR1cmVzIGF1eCBhcmNow6l0eXBlcyBtYWxpbnMiCiAgICAgICAgICApCiAgICAgICAgXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL2xvY2hldG9zLXZsYXRjYW5vIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiTMO0Y2hldG9zIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHNlIGRpdCBxdSdpbCBkZXZyYWl0IGVzc2F5ZXIgZGUgc2UgcmVuc2VpZ25lciBzdXIgY2V0dGUgdmllaWxsZSBsw6lnZW5kZSBkZSBjZXR0ZSBjaXTDqSBkw6ljYWRlbnRlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjEzIE1peiBFdmVuIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvbG9jaGV0b3MtdmxhdGNhbm8iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJMw7RjaGV0b3MiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgYXJyaXZlIGF1eCBhYm9yZHMgZGUgTWFzeXZ1bSBldCBhbG9ycyBxdeKAmWlsIGxhaXNzZSBzYSBtb250dXJlIGF1eCBib25zIHNvaW5zIGTigJl1biBnYXLDp29uIGTigJnDqWN1cmllIGFmaW4gcXXigJllbGxlIHNlIHJlcG9zZSBpbCBlbiBwcm9maXRlIHBvdXIgZmFpcmUgc2EgdG9pbGV0dGUuIExhdsOpLCBjb2lmZsOpLCByYXPDqSBldCByZXBvc8OpIGlsIGNvbnRpbnVlIHNhIHJvdXRlIHZlcnMgVGhhb3VldC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIxNiBNaXogRXZlbiIpXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL2xvY2hldG9zLXZsYXRjYW5vIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiTMO0Y2hldG9zIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIGRhbnMgbGEgZ3JhbmRlIGJpYmxpb3Row6hxdWUsIHRyb3V2ZSBxdWVscXVlcyB0ZXh0ZXMgcXVpIGZvbnQgcsOpZsOpcmVuY2Ugw6AgbGEgY2l0w6kgbWF1ZGl0ZSBldCDDoCBkZXMgbW9udHJlcyBtYXJpbnMuIExhIHZpbGxlLCBzaSBlbGxlIGV4aXN0ZSwgc2Ugc2l0dWVyYWl0IGF1IHN1ZCBlc3QgZGUgQ291cmRvLCBkYW5zIGxhIGdyYW5kZSBtZXIgc2FucyByaXZhZ2UuIEFwcsOocyBhdm9pciByw6lnbMOpIHNlcyBkZXR0ZXMgYXVwcsOocyBkdSBjaGFycGVudGllciBxdWkgbHVpIGxpdnJlIHNvbiB0cmF2YWlsIGlsIGRpdCBhdSByZXZvaXIgYXV4IG1lbWJyZXMgZGUgc2EgZmFtaWxsZSwgZMOpc29ybWFpcyBpbnN0YWxsw6llIMOgIFRoYW91ZXQuIFNhIHRhbnRlIFNpd2FuLCBxdWkgc2UgY2hhcmdlIGRlIGxhIGJvbm5lIGluc3RhbGxhdGlvbiBkZXMgVmxhdGNhbm8gZXQgZHUgZMOpdmVsb3BwZW1lbnQgZGUgbGV1cnMgYWZmYWlyZXMgbHVpIGZhaXQgcGFydCBkZSBzZXMgcGlzdGVzIHBvdXIgb2NjdXBlciBsZXMgYW5jaWVucyBtZW1icmVzIGRlIGxhIGd1aWxkZSBkZXMgdm9sZXVyIGNoYXNzw6lzIGRlIENhb2hheWRoYW4sIEzDtGNoZXRvcyDDqWNvdXRlIGF2ZWMgYXR0ZW50aW9uIGV0IGF2ZWMgZGUgYm9ucyBlc3BvaXJzIHBvdXIgbGUgZnV0dXIsIGx1aSBsYWlzc2UgcXVlbHF1ZXMgZGV2aXNlcy4gw4AgbGEgc3VpdGUgZGUgY2VsYSwgaVNpbCBkw6ljaWRlIGRlIHJlbnRyZXIgcmFwaWRlbWVudCDDoCBLZXJ6dSBvdSBBdmVsaGFkZW4gcG91ciByZXRyb3V2ZXIgbCdBbWJlYW5hbW9zIGV0IGx1aSBmYWlyZSBwYXJ0IGRlIHNlcyBkw6ljb3V2ZXJ0ZXMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMjEgTWl6IEV2ZW4iKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG5BdmFudCBkZSBwYXJ0aXIgYXZlYyAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvbG9jaGV0b3MtdmxhdGNhbm8iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJMw7RjaGV0b3MiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgc3VyIGxlcyDDrmxlcyBzb2llbnQgZGlzYW50ZXMgwqsgbWF1ZGl0ZXMgwrssIEd3aW9uIHBhcnQgcHJpZXIgbGVzIGRpZXV4IGRhbnMgbGUgZG91dGUgcXVlIGxlcyBoaXN0b2lyZXMgZW50b3VyYW50IGNlcyDDrmxlcyBzb2llbnQgdnJhaWVzLiBEZXB1aXMgcXVlbHF1ZXMgbnVpdHMsIGwnQW1iZWFuYW9zIGZhaXQgZGUgbm9tYnJldXggY2F1Y2hlbWFycywgaWwgc2Ugdm9pdCBhdSBmb250IGQndW4gY2F2ZWF1LiBJbCBzYWl0IHF1J2lsIGVzdCBhdSBzw6lwdWxjcmUgbm9pciBkZSBHYWxpY2EsIHVuZSBhbmNpZW5uZSByZWluZSBtYXVkaXRlLiBJbCBmYWl0IHBhcnQgZGUgc2VzIHLDqnZlcyDDoCBJb2VuIGwnaW52b2NhdGV1ciBxdWkgbHVpIGNvbmZpcm1lIHF1J3VuIHR1bXVsdXMgZGFucyBsZXMgw65sZXMgcGx1cyBhdSBzdWQgcG91cnJhaXQgY29ycmVzcG9uZHJlIMOgIHNlcyByw6p2ZXMuIElsIGx1aSBhcHByZW5kIHF1ZSBHYWxpY2EgYXZhaXQgw6l0w6kgbWF1ZGl0ZSBldCBiYW5uaWUgc3VpdGUgw6AgdW5lIGxpYWlzb24gaW5hdm91YWJsZSBhdmVjIHVuIGhvbW1lIGTDqW1vbiBkZXMgdGVtcHMgYW5jaWVucyA6IHVuIFNlbG1vbml0ZS4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIlxuUGVkciBQaW1hbG8gZXQgc2VzIGhvbW1lcyBhY2NvbXBhZ25lbnQgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL2d3aW9uLWdvcm5vYyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIkd3aW9uIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiwgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL21hcmdzLW1hZW5rYWxvbiIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIk1hcmdzIikKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiBldCAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvbG9jaGV0b3MtdmxhdGNhbm8iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJMw7RjaGV0b3MiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIganVzcXXigJnDoCBs4oCZw65sZSBtYXVkaXRlLiBVbmUgZm9pcyBhcnJpdsOpcyBhc3NleiBwcm9jaGUgZGUgbOKAmcOubGUsIGxlcyBtYXJpbnMgbGV1ciBsw6JjaGUgdW5lIGNoYWxvdXBlLCBuZSBzb3VoYWl0YW50IHBhcyBz4oCZYXBwcm9jaGVyIHBsdXMgcHLDqHMsIGNyYWlnbmFudCBsZXMgZGlmZsOpcmVudHMgbWFsw6lmaWNlcy4gQmllbiBxdWUgbGUgdGVtcHMgc29pdCBjYWxtZSwgbGEgbWVyIGF1dG91ciBkZSBs4oCZw65sZSBlc3QgYW5vcm1hbGVtZW50IGFnaXTDqWUuIExlcyBjb21wYWdub25zIMOpbWVyZ2VudCBkZSBs4oCZw6ljdW1lIGV0IGRlcyByb3VsZWF1eCwgZXQgbWV0dGVudCBwaWVkLcOgLXRlcnJlIHN1ciB1bmUgcGxhZ2Ugbm9pcmUgw6liw6huZS4gQXUgZnVyIGV0IMOgIG1lc3VyZSBkZSBsZXVyIGF2YW5jw6llIGRhbnMgbOKAmcOubGUsIGlsIGxldXIgc2VtYmxlIHF1ZSBsZSBqb3VyIGFnb25pc2UgcGV1IMOgIHBldSwgbGFpc3NhbnQgcGxhY2UgYXUgY3LDqXB1c2N1bGUgcHVpcyBhdXggdMOpbsOoYnJlcywgbGVzIG9ibGlnZWFudCBk4oCZYWxsdW1lciBsZXVycyB0b3JjaGVzLiAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvbG9jaGV0b3MtdmxhdGNhbm8iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJMw7RjaGV0b3MiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgdHJvdXZlIHVuIHBhc3NhZ2UgZGlzc2ltdWzDqSBlbnRyZSBsZSBsaWVycmUgZXQgbGEgcGllcnJlLCBvw7kgdW4gZXNjYWxpZXIgc+KAmWVuZm9uY2UgdmVycyBsZXMgdMOpbsOoYnJlcy4gR3dpb24sIHNvdWNpZXV4IGRlIHNhdm9pciBjZSBxdWkgcG91cnJhaXQgc+KAmXkgdHJvdXZlciwgaW52b3F1ZSBkYW5zIHVuIGxhbmdhZ2UgY29tcGxleGUgdW4gc29ydGlsw6hnZSBpbnZpc2libGUgYXV4IHlldXggZGVzIHNpbXBsZXMgbW9ydGVscy4gSWwgbGV1ciBleHBsaXF1ZSBxdWUgY+KAmWVzdCB1biBtb3llbiBkZSB2b2lyIGzDoCBvw7kgaWwgbuKAmWVzdCBwYXMuIEdyw6JjZSDDoCBjZWxhIGlscyDDqXZpdGVudCBkZSBub21icmV1c2VzIGVtYsO7Y2hlcyBwcsOpcGFyw6llcyBwYXIgbGVzIGdvdWxlcywgbGVzIHNwZWN0cmVzIGV0IGF1dHJlcyBhYmVycmF0aW9ucy4gQXUgY2VudHJlIGRlcyBydWluZXMsIGlscyB0cm91dmVudCB1biB0b21iZWF1IDogY2VsdWkgZGUgR2FsaWNhLiBFbiB2aW9sYW50IGNlIHRvbWJlYXUgR3dpb24gdHJvdXZlIGNlIHF1aSBs4oCZYXR0aXJhaXQgdGFudCB2ZXJzIGNldCBlbmRyb2l0LiBJbHMgZmluaXNzZW50IGRlIHBpbGxlciBsZXMgcnVpbmVzIGF2ZWMgIgogICAgICAgICksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL3J1ZG9sZi1mYXJlZyIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIlJ1ZG9sZiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgZXQgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL3Nhd3JpbmEtc2VtaXJhbWlzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiU2F3cmluYSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBxdWksIGlucXVpZXRzIGR1IHNvcnQgZGVzIHRyb2lzIGNvbXBhZ25vbnMsIGxlcyBhdmFpZW50IHJlam9pbnRzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjIxIE1peiBFdmVuIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5MZXMgY29tcGFnbm9ucyB0cmF2ZXJzZW50IGRlIG5vdXZlYXUgbGEgbWVyIHBvdXIgcydpbnN0YWxsZXIgw6AgS2VyenUsIGxlcyBmcsOpcXVlbnRhdGlvbnMgZGUgRGluYXMgTW9yIExlaWRyIMOpdGFudCB0cm9wIGRhbmdlcmV1c2VzLiAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvbWFyZ3MtbWFlbmthbG9uIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiTWFyZ3MiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcHJlbmQgY29uZ8OpcyBkZSBzZXMgY29tcGFnbm9ucyBldCBhbm5vbmNlIHZvdWxvaXIgcmVqb2luZHJlIGxlIGNlcmNsZSBkZSBLZXJuYWMgZXQgdmlzaXRlciBzYSBmYW1pbGxlLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkxlIHJlc3RlIGR1IGdyb3VwZSByZXN0ZSDDoCBLZXJ6dSBlbiBhdHRlbmRhbnQgZGUgdm9pciBjb21tZW50IGxhIHNpdHVhdGlvbiByw6lnaW9uYWxlIMOpdm9sdWUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMjUgTWl6IEV2ZW4iKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkxlcyBqb3VycyBzZSBwYXNzZW50IGxlbnRlbWVudCBkYW5zIHVuZSBhbWJpYW5jZSBxdWkgcydhbG91cmRpdCBkYW5zIGxhIHLDqWdpb24gYXZlYyBsZSBjb25mbGl0IGVudHJlIEFsYXJpZyBldCBzZXMgYWxsacOpcyBjb250cmUgbGEgY29hbGl0aW9uLiBMZXMgY2FtcGFnbmUgbmUgc29udCBwbHVzIHPDu3JlcyBldCB1bmUgcGFydGllIGR1IHRyYWZmaWMgY29tbWVyY2lhbCBkZSBLZXJ6dSBzJ2VzdCBkw6l0b3VybsOpZSBzdXIgZCdhdXRyZXMgcG9ydHMgZXQgZW4gcGFydGljdWxpZXIgVGhhb3VldCBhdSBub3JkIHF1aSBlc3QgZW5jb3JlIHByb3TDqWfDqSBwYXIgbGEgc3RhYmlsaXTDqSBkZSBNYXN5dnVtLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiL2Jlc3RpYWlyZS9tYXJncy1tYWVua2Fsb24iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJNYXJncyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBhcnJpdmUgZW5maW4gw6AgS2VybmFjIGFwcsOocyBhdm9pciDDqXZpdMOpIHBsdXNpZXVycyBncm91cGVzIGRlIHBpbGxhcmRzLCBub24gc2FucyBhdm9pciBvY2NpcyB1biBtYWxhbmRyaW4gcXVpIHZpb2xhaXQgdW5lIGZpbGxlIGRlIGZlcm1lLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkxlIEJlZ2hlbG0gbmUgcGV1dCBxdWUgY29uc3RhdGVyIGxlcyByYXZhZ2VzIGRlIGxhIGd1ZXJyZSBxdWkgbidvbnQgZCdhdXRyZXMgaW50w6lyw6p0cyBxdWUgZGUgcmVkaXN0cmlidWVyIGxlcyBjYXJ0ZXMgZW50cmUgbGVzIHB1aXNzYW50cywgYXUgZMOpcGVuZHMgZGVzIHBsdXMgZmFpYmxlcy4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvbWFyZ3MtbWFlbmthbG9uIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiTWFyZ3MiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcmV0cm91dmUgc2EgZmFtaWxsZSBldCBwZXV0IGFkbWlyZXIgc2EgZmlsbGUgcXVpIGEgZMOpasOgIHRlbGxlbWVudCBjaGFuZ8OpLiBSZXZlbmFudCBsZXMgYnJhcyBjaGFyZ8OpIGRlIGNhZGVhdSBldCBkZSByaWNoZXNzZXMsIGlsIGludmVzdGl0IGRhbnMgc29uIHBhdHJpbW9pbmUgcG91ciBhc3N1cmVyIGwnYXZlbmlyIGRlIHNhIGZhbWlsbGUgZXQgZGUgc29uIGNsYW4uIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuTCdleHDDqXJpZW5jZSBkZSBsYSByZW5jb250cmUgZGVzIHNwZWN0cmUgbCdheWFudCBwcm9mb25kw6ltZW50IG1hcnF1w6ksIGlsIGZhaXQgcGxhcXVlciBzZXMgZGV1eCBjaW1ldGVycmVzIGF2ZWMgZGUgbCdhcmdlbnQsIG3DqXRhbCByw6lwdXRlciBwb3VyIGJsZXNzZXIgbGVzIGNyw6lhdHVyZXMgaW50YW5naWJsZXMuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuTGUgbcOqbWUgam91ciDDoCBLZXJ6dSwgZGV1eCDDqXbDqG5lbWVudHMgaW1wb3J0YW50cyBvbnQgbGlldS4gUmV2ZW5hbnQgZCd1biB0csOocyBsb25nIHZveWFnZSBwb3VyIGfDqXJlciBsYSBzdWNjZXNzaW9uIGRlIHNvbiBww6hyZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUveWFuLXppbiIgfSB9LCBbX3ZtLl92KCJZYW4gWmluIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHJldmllbnQuIElsIGEgZHUgY2hvaXNpciBsJ2V4aWwgcG91ciBuZSBwYXMgZmluaXIgZXjDqWN1dGVyIHBhciBzb24gcHJvcHJlIGZyw6hyZS4gSWwgYSBjZXBlbmRhbnQgbCdvcHBvcnR1bml0w6kgZGUgY3LDqWVyIHVuIGNvbXB0b2lyIFlvdGFrYcOvIGVuIERvdWFyYXRpbC4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5DJ2VzdCBhdmVjIHVuIGdyYW5kIHBsYWlzaXIgcXUnaWwgcmV0cm91dmUgc2VzIGFuY2llbnMgY29tcGFnbm9ucywgcGFydGljdWxpw6hyZW1lbnQgIgogICAgICAgICksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL3NoaW4taGFtZSIgfSB9LCBbCiAgICAgICAgICBfdm0uX3YoIlNoaW4gSGFtZSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIGV0ICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiL2Jlc3RpYWlyZS90aWJlcml1cy1kb24tYWxvbnpvIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiVGliZXJpdXMiKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigiLiIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbk1haXMgbGVzIHJldHJvdXZhaWxsZXMgbmUgc29udCBxdWUgZGUgY291cnRlcyBkdXLDqWVzIGNhciBsZXMgY29tcGFnbm9ucyBleHBsaXF1ZW50IGxhIHNpdHVhdGlvbiBxdWkgcydlc3QgZMOpZ3JhZMOpZSBlbiBEb3VhcmF0aWwuIExlcyB0cm91cGVzIGRlIEJyaXRvbWFydG9zIHNvbnQgw6AgbCdleHTDqXJpZXVyZSBkZSBsYSB2aWxsZSBhbG9ycyBxdWUgbGUgY2xhbiBHb3Jub2Mgcydlc3QgcsOpZnVnacOpIGRlcnJpw6hyZXMgbGVzIGVuY2VpbnRlcyBkZSBsYSB2aWxsZSBwb3J0dWFpcmUuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuQXplbm9yIGFycml2ZSDDoCBLZXJ6dSwgZWxsZSBkZW1hbmRlIGRlIGwnYWlkZSBkZXMgY2xhbnMgbWVsZMOodGVzIEdvcm5vYywgVmxhdGNhbm8gZXQgw6AgdG91cyBsZXVycyBhbGxpw6lzIGRlIGxlcyBhaWRlciBhdSBub20gZGUgbGV1ciBhbWl0acOpIHBvdXIgTW9yd2VubmEuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL3RpYmVyaXVzLWRvbi1hbG9uem8iIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJUaWJlcml1cyIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBzZSByZW5kIGNvbXB0ZSBxdSdBemVub3IgZXN0IGJsZXNzw6llLiBFbGxlIGEgcmXDp3UgdW5lIGZsw6hjaGUgZW4gZnJhbmNoaXNzYW50IGxlIGJsb2N1cyBraGVybmHDqyBkZSBLZXItU2Fvem9uLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiICIpLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiL2Jlc3RpYWlyZS9nd2lvbi1nb3Jub2MiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJHd2lvbiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBsdWkgcHJvZGlndWUgZGVzIHNvaW5zLiBMZXMgY29tcGFnbm9ucyBzZSByw6l1bmlzc2VudCBldCBkaXNjdXRlbnQgZGUgbGV1ciBwb3NpdGlvbiBwYXIgcmFwcG9ydCBhdXggZGlmZsOpcmVudGVzIHB1aXNzYW5jZXMgZW5nYWfDqWVzLiBJbHMgZMOpY2lkZW50IGRlIHByZW5kcmUgbGUgcmlzcXVlIGQnYWlkZXIgQWxhcmlnIGV0IE1vcndlbm5hIGVuIGVzcMOpcmFudCBiw6luw6lmaWNpZXIgZGUgbGV1ciBzb3V0aWVuIGZ1dHVyIHBvdXIgcmVjb25xdcOpcmlyICIKICAgICAgICApLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiL2F0bGFzLWR1LW1vbmRlL2RvdWFyYXRpbC9jYW9oYXlkaGFuIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiQ2FvaGF5ZGhhbiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIuIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuVG91cyBlbnZvaWVudCBkZXMgbWVzc2FnZXJzIHBvdXIgcmFzc2VtYmxlciBsZXVycyB0cm91cGVzIGV0IHNlIHJlbmRyZSDDoCBLZXItU2Fvem9uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjI3IE1peiBFdmVuIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5MZXMgdHJvdXBlcyBkZXMgY2xhbnMgR29ybm9jIGV0IFZsYXRjYW5vIHNlIHJhc3NlbWJsZW50LCBzdXBwbMOpZXMgcGFyIHVuIG5vbWJyZXV4IHJlbmZvcnQgZGVzIE1lbGdzIGR1IGNsYW4gQmVybnNlbiwgZGVzIGd1ZXJyacOocmVzIGxpYnJlcyBkZSBsJ091ZXN0LCBkZXMgbWVyY2VuYWlyZXMgZGUgbGEgZmFtaWxsZSBEb24gQWxvbnpvIGV0IGRlcyBiYW5kZXMgYXJtw6llcyBZb3Rha2HDry4gQ2V0dGUgYXJtw6llIGjDqXTDqXJvY2xpdGUgcmFzc2VtYmxlIHBsdXNpZXVycyBjZW50YWluZXMgZGUgZ3VlcnJpZXJzIHF1aSBvbnQgcsOpcG9uZHUgw6AgbCdhcHBlbC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCIyOCBNaXogRXZlbiIpXSksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuTGEgdHJvdXBlIHNlIG1ldCBlbiBtYXJjaGUgdmVycyBLZXItU2Fvem9uLiBJbCBlc3QgcHLDqXZ1IHRyb2lzIGpvdXJzIGRlIHZveWFnZSBwb3VyIHJlam9pbmRyZSBsYSBjaXTDqSBkZSBNb3J3ZW5uYSBtYWlzIGxlIG5vbWJyZSBhdWdtZW50ZSBsZXMgZGlmZmljdWx0w6lzLiBMYSBwcmVtacOocmUgbnVpdCwgbGUgY2FtcGVtZW50IHN1Yml0IHVuZSBhdHRhcXVlIGRlcyDDqWNsYWlyZXVycyBkZSBsYSBjb2FsaXRpb24ga2hlcm5hw6tlLiBVbiBjb21iYXQgY29uZnVzIHNlIGTDqXJvdWxlIGVuIHBsZWluZSBudWl0LCBsZXMgc29sZGF0cyBkdSBjYW1wZW1lbnQgw6l0YW50IGRhbnMgdW4gcHJlbWllciB0ZW1wcyBzdXJwcmlzLiBMZXMgY29tcGFnbm9ucyBwYXJ0aWNpcGVudCBhY3RpdmVtZW50IGF1IGNvbWJhdCDDoCBsJ2V4Y2VwdGlvbiBkZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiYSIsIHsgYXR0cnM6IHsgaHJlZjogIi9iZXN0aWFpcmUvZ3dpb24tZ29ybm9jIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiR3dpb24iKQogICAgICAgIF0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIgcXVpIHJlc3RlIGVuZG9ybWksIMOpcHVpc8OpcyBwYXIgc2VzIHJlY2hlcmNoZXMgbWFnaXF1ZXMuIFlhbiBaaW4gZXN0IGdyYXZlbWVudCBibGVzc8OpIGV0IGNvdWzDqSBhdSBzb2wgcGFyIHVuZSBsYW5jZSBraGVybmHDq2UuIEZpbmFsZW1lbnQsIGxlcyBhdHRhcXVhbnRzIHJvbXBlbnQgbGUgY29tYmF0IGFwcsOocyBhdm9pciBjYXVzw6kgZGVzIGRvbW1hZ2VzIGV0IHNlbcOpIGxlIGRvdXRlLiBMYSBtw6psw6llIHRyw6hzIHZpb2xlbnRlIGEgbWlzIGhvcnMgZGUgY29tYmF0IHVuZSBzb2l4YW50YWluZSBkZSBjb21iYXR0YW50IHLDqXBhcnRpcyDDoCBwZXUgcHLDqHMgw6lxdWl0YWJsZW1lbnQuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMjkgTWl6IEV2ZW4iKV0pLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkxhIHRyb3VwZSBjb250aW51ZSBzYSBwcm9ncmVzc2lvbiBldCBkcmVzc2UgdW4gY2FtcGVtZW50IMOgIHVuZSBqb3VybsOpZSBkZSBtYXJjaGUgZGUgS2VyLVNhb3pvbi4gTGEgbcOpdMOpbyBlc3QgbW9ybmUgZXQgbCdhbWJpYW5jZSBkw6lqw6AgcGxvbWLDqWUgcGFyIGwnYXR0YXF1ZSBkdSBqb3VyIHN1aXZhbnQuIExlcyBjaGVmcyBkaXN0cmlidWVudCB1biBwZXUgZCdhbGNvb2wgZXQgZGUgcmVtb250YW50cy4gTGUgbW9yYWwgcmV2aWVudCBkb3VjZW1lbnQgZXQgY2hhY3VuIHNhaXQgcXVlIGJlYXVjb3VwIGRlIGNob3NlcyB2b250IHNlIGpvdWVyIGTDqXMgbGUgbGVuZGVtYWluLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIjMwIE1peiBFdmVuIildKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5MJ2FybcOpZSBjb2FsaXPDqWUgYXJyaXZlIMOgIHZ1ZSBkZSBLZXItU2Fvem9uIGV0IGTDqWNvdXZyZSB1bmUgdmlsbGUgZW4gw6l0YXQgZGUgc2nDqGdlLiBFbiBjb250cmViYXMsIGRhbnMgbGEgcGxhaW5lLCBsZXMgdGVudGVzIGRlIGNhbXBlbWVudHMgZGVzIHNlaWduZXVycyBkZSBndWVycmUga2VybmHDq2VzIGxlcyBSZWtzIEJlcmFjJ2ggU2VnYWxlbiwgRnJpYXJkIENvcm5lYyBldCBTZXppZyBMZSBHdWV2ZWwuIExlcyBtYWNoaW5lcyBkZSBndWVycmUgbGFuY2VudCBzcG9yYWRpcXVlbWVudCBkZXMgdHJhaXRzIGRlIGZldSBldCBkZXMgcGllcnJlcyBzdXIgbGEgdmlsbGUuIgogICAgICAgICksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuTGVzIGNvbXBhZ25vbnMgbWV0dGVudCBlbiBwbGFjZSBkZXMgc3RyYXRhZ8OobWVzIHBvdXIgYWZmYWlibGlyIGV0IGTDqXNvcmdhbmlzZXIgbCdhZHZlcnNhaXJlLiBJbCBzIGTDqWNpZGVudCBkJ2Vudm95ZXIgIgogICAgICAgICksCiAgICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICIvYmVzdGlhaXJlL3Nhd3JpbmEtc2VtaXJhbWlzIiB9IH0sIFsKICAgICAgICAgIF92bS5fdigiU2F3cmluYSIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgZGFucyBsZSBjYW1wcyBhZHZlcnNlLiIpLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigKICAgICAgICAgICJcbkdyw6JjZSDDoCBzZXMgdGFsZW50cywgZWxsZSBzJ2luZmlsdHJlIGV0IHNvdWlsbGUgZGVzIHLDqXNlcnZlcyBkJ2VhdSwgbWV0IGxlIGZldSBhdSBjYW1wZW1lbnQuIEVuIG3Dqm1lIHRlbXBzLCBpbHMgYXBwcm9jaGVudCBxdWVscXVlcyByYW5ncyBkJ2FyY2hlcnMgcG91ciBoYXJjZWxlciBjZXV4IHF1aSB0ZW50ZXJhaWVudCBkJ8OpdGVpbmRyZSBsZXMgZm95ZXJzIHF1aSBzJ2VtYnJhc2VudC5cbkwnZWZmZXQgZXNjb21wdGVyIHZhIGF1IGRlbMOgIGRlcyBlc3DDqXJhbmNlIGNhciBzZSBjcm95YW50IHNvdWRhaW5lbWVudCBhdHRhcXXDqXMsIGxlcyB0cm91cGVzIGRlcyBSZWtzIHNlIHJhc3NlbWJsZW50IHBvdXIgZmFpcmUgZmFjZS4gT2JzZXJ2YW50IGNlbGEgZGVwdWlzIGxhIHZpbGxlLCBldCDDqXRhbnQgw6AgYm91dCBkZSBmb3JjZSDDoCBjYXVzZSBkdSBsb25nIHNpw6hnZSwgbGVzIHBvcnRlcyBkZSBLZXItU2Fvem9uIHMnb3V2cmVudCBldCBsZXMgdHJvdXBlcyBkZSBNb3J3ZW5uYSBldCBkJ0FsYXJpZyBzZSBsYW5jZW50IGRhbnMgbGEgYmF0YWlsbGUuIERhbnMgY2V0IGVuY2hhaW5lbWVudCwgdG91cyBsZSBtb25kZSBlc3QgcHJpcyBkZSBjb3VycyBldCB0b3V0ZXMgbGVzIGFybcOpZXMgc2UgcnVlbnQgbGVzIHVuZXMgc3VyIGxlcyBhdXRyZXMgZGFucyB1bmUgbcOqbMOpZSBzYXV2YWdlLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG5DaGFjdW4gcGFydCBhdSBjb21iYXQgZXQgYWZmcm9udGUgZGUgbm9tYnJldXggYWR2ZXJzYWlyZXMuIiksCiAgICAgICAgX2MoImJyIiksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlxuTGEgZm9yY2UgZHUgbm9tYnJlIGV0IGwnZW50cmFpbmVtZW50IGRlcyB0cm91cGVzIGRlcyBSZWtzIEJlcmFjJ2ggU2VnYWxlbiwgRnJpYXJkIENvcm5lYyBldCBTZXppZyBMZSBHdWV2ZWwgZmluaXNzZW50IHBhciBmYWlyZSBiYXNjdWxlciBsZSBjb3VycyBkZSBsYSBiYXRhaWxsZS4gTGVzIHRyb3VwZXMgbWVsZMOodGVzIGV0IGxldXJzIGFsbGnDqXMgdG9tYmVudCBkZSBwbHVzIGVuIHBsdXMgbm9tYnJldXgsIHNvbnQgZmFpdHMgcHJpc29ubmllcnMgb3UgcydlbmZ1aWVudC4iCiAgICAgICAgKSwKICAgICAgICBfYygiYnIiKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiXG5MZSByZXN0ZSBkZXMgc3Vydml2YW50cyBzZSByw6lmdWdpZSBkYW5zIGxhIGNpdMOpIGRlIEtlci1TYW96b24uICBTZXVsICIKICAgICAgICApLAogICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiL2Jlc3RpYWlyZS9nd2lvbi1nb3Jub2MiIH0gfSwgWwogICAgICAgICAgX3ZtLl92KCJHd2lvbiIpCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIiBxdWkgbidhIHBhcyByw6l1c3NpIMOgIHRyb3V2ZXIgcmVmdWdlIGRhbnMgbGEgY2l0w6ksIHJlcGFydCB2ZXJzIGxhIGZvcsOqdCBldCBzZSByZW5kYW50IGludmlzaWJsZSwgZnJhbmNoaXQgbGVzIGxpZ25lcyBhZHZlcnNlLiIKICAgICAgICApLAogICAgICAgIF9jKCJiciIpLAogICAgICAgIF92bS5fdigiXG5DZSBqb3VyIGVzdCBiaWVuIHNvbWJyZS4iKQogICAgICBdKQogICAgXQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}