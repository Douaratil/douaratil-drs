{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/les-tresors/README.md?vue&type=template&id=0694880a&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/les-tresors/README.md","mtime":1640161622172},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":1640785878621},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1640785880897},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":1640785878621},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":1640785880897},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":1640785878349}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "les-tresors" } }, [
        _vm._v("Les trésors "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#les-tresors" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "les-differents-types-de-tresor" } }, [
        _vm._v("Les différents types de trésor "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#les-differents-types-de-tresor" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "argent" } }, [
        _vm._v("Argent "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#argent" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le nerf de la guerre. La monnaie sonnante et trébuchante est le type de trésor le plus commun. Les aventuriers peuvent découvrir des pièces de cuivre (pc), des pièces d'argent (pa), des pièces d'électrum (pe), des pièces d'or (po) et des pièces de platine (pp)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "gemmes" } }, [
        _vm._v("Gemmes "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#gemmes" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Une gemme est une pierre précieuse, généralement taillée, dont la valeur dépend de la rareté et de la pureté. Elles ont l'avantage d'être bien moins encombrantes que les sacs de pièces puisqu'une gemme tient généralement dans le creux de la main."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objets-d-art" } }, [
        _vm._v("Objets d'art "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objets-d-art" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Statuettes, tapisseries brodées d'or, toiles de maîtres, les objets d'arts peuvent avoir des dizaines de formes différentes. Leur valeur dépend de la qualité du travail effectué et des matériaux utilisés. Il est parfois compliqué pour des aventuriers d'emporter des objets volumineux."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objets-rares" } }, [
        _vm._v("Objets rares "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objets-rares" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ces objets ne sont pas magiques mais peuvent se révéler utiles ou précieux pour des aventuriers. On peut les trouver aux alentours de l'habitat des monstres, dans l'équipement de leurs ennemis vaincus ou dans le stock de matériel pillé par une horde. Ils peuvent pimenter une rencontre, lui donner une certaine saveur, sans en changer la difficulté."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "objets-magiques" } }, [
        _vm._v("Objets magiques "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#objets-magiques" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Trésor le plus prisé par les aventuriers, les objets magiques, au-delà de leur valeur monétaire, sont extrêmement utiles puisqu'ils augmentent considérablement les capacités des PJ. Les objets magiques sont parfois cachés dans l'antre d'une créature et parfois utilisés par des adversaires intelligents."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "determiner-un-tresor" } }, [
        _vm._v("Déterminer un trésor "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#determiner-un-tresor" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les tableaux qui suivent vous aideront à déterminer les trésors découverts par les aventuriers. Avant d'utiliser les tableaux, il faut distinguer l'argent transporté par des monstres individuels ou de petits groupes et le véritable trésor d'un groupe composé de nombreuses créatures (une horde d'orcs ou un clan de géants) ou de créatures légendaires (un dragon). Le tableau "
        ),
        _c("a", { attrs: { href: "#table-a" } }, [
          _c("em", [_vm._v("A – trésor individuel")])
        ]),
        _vm._v(
          " représente la somme possédée par chaque monstre individuellement. Les tableaux "
        ),
        _c("a", { attrs: { href: "#table-b" } }, [
          _c("em", [_vm._v("B – objets rares")])
        ]),
        _vm._v(", "),
        _c("a", { attrs: { href: "#table-c" } }, [
          _c("em", [_vm._v("C – trésor, gemmes et objets d'art")])
        ]),
        _vm._v(" et "),
        _c("a", { attrs: { href: "#table-d" } }, [
          _c("em", [_vm._v("D – objets magiques")])
        ]),
        _vm._v(
          " permettent de déterminer le trésor d'un grand groupe, d'une créature puissante ou, pourquoi pas, la somme offerte par le commanditaire des PJ. Vous effectuerez donc un tirage par monstre sur la table A et un seul tirage par rencontre dans les tables B, C et/ou D si le tirage sur la table de base vous l'indique."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Chaque tableau est divisé en colonnes, selon le niveau des PJ ajusté par la difficulté de la rencontre : -1 pour une rencontre aisée, +1 pour une rencontre ordinaire et +3 pour une rencontre ardue (voir "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/construire-une-rencontre/#difficulte-d-une-rencontre"
              }
            },
            [_vm._v("Construire une rencontre")]
          ),
          _vm._v(
            " pour les difficultés des rencontres) Notez que ces tableaux ne sont qu'indicatifs. Chaque monstre ne transporte pas de l'argent et des objets magiques sur lui. Pour justifier la présence d'un trésor précieux auprès d'un monstre relativement faible ou peu intelligent, pensez que les objets peuvent très bien se trouver sur les cadavres des précédents aventuriers qui ont tenté d'affronter la créature."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "table-de-base" } }, [
        _vm._v("Table de base "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#table-de-base" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th"),
            _c(
              "th",
              { staticClass: "has-text-centered", attrs: { colspan: "5" } },
              [_vm._v("Niveau de la rencontre")]
            )
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("th", [_vm._v("3d6")]),
            _vm._v(" "),
            _c("th", [_vm._v("0 à 3")]),
            _vm._v(" "),
            _c("th", [_vm._v("4 à 7")]),
            _vm._v(" "),
            _c("th", [_vm._v("8 à 11")]),
            _vm._v(" "),
            _c("th", [_vm._v("12 à 16")]),
            _vm._v(" "),
            _c("th", [_vm._v("17 et +")])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("3-6")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-c" } }, [_vm._v("C")])
            ]),
            _vm._v(" "),
            _c(
              "td",
              { staticClass: "has-text-centered", attrs: { rowspan: "5" } },
              [
                _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-c" } }, [_vm._v("C")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-d" } }, [_vm._v("D")])
              ]
            )
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("7-10")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-c" } }, [_vm._v("C")])
            ]),
            _vm._v(" "),
            _c(
              "td",
              { staticClass: "has-text-centered", attrs: { rowspan: "4" } },
              [
                _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-c" } }, [_vm._v("C")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-d" } }, [_vm._v("D")])
              ]
            )
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("11-14")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-c" } }, [_vm._v("C")])
            ]),
            _vm._v(" "),
            _c(
              "td",
              { staticClass: "has-text-centered", attrs: { rowspan: "3" } },
              [
                _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-c" } }, [_vm._v("C")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-d" } }, [_vm._v("D")])
              ]
            )
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("15-19")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-c" } }, [_vm._v("C")])
            ]),
            _vm._v(" "),
            _c(
              "td",
              { staticClass: "has-text-centered", attrs: { rowspan: "2" } },
              [
                _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-c" } }, [_vm._v("C")]),
                _vm._v(" "),
                _c("a", { attrs: { href: "#table-d" } }, [_vm._v("D")])
              ]
            )
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("20+")])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _c("a", { attrs: { href: "#table-a" } }, [_vm._v("A")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-b" } }, [_vm._v("B")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-c" } }, [_vm._v("C")]),
              _vm._v(" "),
              _c("a", { attrs: { href: "#table-d" } }, [_vm._v("D")])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", {}, [
        _c("h3", { attrs: { id: "table-a-tresor-individuel" } }, [
          _vm._v("Table A – trésor individuel "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#table-a-tresor-individuel" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Cette table indique combien d'argent transporte chaque monstre affronté. Si la rencontre comporte plusieurs monstres, effectuez un tirage par adversaire. Pour plus de rapidité, vous pouvez également multiplier le résultat obtenu par le nombre d'adversaires."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Vous pouvez remplacer, particulièrement au-delà du niveau 8, tout ou partie de cet argent par des gemmes ou des objets magiques de valeur équivalente. Les monstres transportent rarement des sacs de plus de 50  kilos de pièces sur eux."
          )
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "table-a" } }, [
          _vm._v("Table A "),
          _c(
            "a",
            { staticClass: "header-anchor", attrs: { href: "#table-a" } },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th"),
              _vm._v(" "),
              _c(
                "th",
                { staticClass: "has-text-centered", attrs: { colspan: "5" } },
                [_vm._v("Niveau de la rencontre")]
              )
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("th", { staticClass: "has-text-centered" }, [_vm._v("3d6")]),
              _vm._v(" "),
              _c("th", { staticClass: "has-text-centered" }, [_vm._v("0 à 3")]),
              _vm._v(" "),
              _c("th", { staticClass: "has-text-centered" }, [_vm._v("4 à 7")]),
              _vm._v(" "),
              _c("th", { staticClass: "has-text-centered" }, [
                _vm._v("8 à 11")
              ]),
              _vm._v(" "),
              _c("th", { staticClass: "has-text-centered" }, [
                _vm._v("12 à 16")
              ]),
              _vm._v(" "),
              _c("th", { staticClass: "has-text-centered" }, [
                _vm._v("17 et +")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("3-6")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("4d6 (14) pc")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("3d6 × 100 (1000) pc"),
                _c("br"),
                _vm._v("5d6 (17) pe")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("5d6 × 100 (1700) pc"),
                _c("br"),
                _vm._v("1d6 × 10 (35) pe")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("4d6 × 100 (1400) pa"),
                _c("br"),
                _vm._v("1d6 × 100 (350) po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 × 1000 (7000) pe"),
                _c("br"),
                _vm._v("6d6 × 100 (2100) po")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("7-10")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("4d6 (14) pa")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("4d6 × 10 (140) pa"),
                _c("br"),
                _vm._v("5d6 (17) po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("6d6 × 10 (210) pa"),
                _c("br"),
                _vm._v("1d6 × 10 (35) po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 × 100 (350) pe"),
                _c("br"),
                _vm._v("1d6 × 100 (350) po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("8d6 × 100 (2800) po"),
                _c("br"),
                _vm._v("1d6 × 10 (35) pp")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("11-14")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 × 10 (35) po"),
                _c("br"),
                _vm._v("5d6 (17) pe")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("3d6 × 10 (100) po"),
                _c("br"),
                _vm._v("1d6 × 10 (35) pe")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 × 100 (700) po"),
                _c("br"),
                _vm._v("1d6 (3) pp")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 × 1000 (3500) po"),
                _c("br"),
                _vm._v("1d3 × 100 (150) pp")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("15-19")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("4d6 (14) po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 × 10 (70) po"),
                _c("br"),
                _vm._v("5d6 (17) pa")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("4d6 × 10 (140) po"),
                _c("br"),
                _vm._v("1d6 × 10 (35) pa")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 × 100 (700) po"),
                _c("br"),
                _vm._v("1d6 × 10 (35) pp")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 × 1000 (3500) po"),
                _c("br"),
                _vm._v("1d6 × 100 (350) pp")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("20+")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d3 (1) pp")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) pp"),
                _c("br"),
                _vm._v("5d6 (17) po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("4d6 (14) pp"),
                _c("br"),
                _vm._v("1d6 × 10 (35) po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 × 100 (700) po"),
                _c("br"),
                _vm._v("2d6 × 10 (70) pp")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 × 1000 (3500) po"),
                _c("br"),
                _vm._v("2d6 × 100 (700) pp")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "table-b-objets-rares" } }, [
        _vm._v("Table B – objets rares "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#table-b-objets-rares" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Avec ce tableau vous allez déterminer quels objets insolites, rares et de faible valeur votre groupe de créatures possède. Réalisez d'abord un tirage sur la première table pour connaître le nombre d'objets à déterminer dans le second tableau. Rappelez-vous qu'il ne faut réaliser qu'un seul tirage par rencontre."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "table-b" } }, [
        _vm._v("Table B "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#table-b" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th"),
            _vm._v(" "),
            _c(
              "th",
              { staticClass: "has-text-centered", attrs: { colspan: "5" } },
              [_vm._v("Niveau de la rencontre")]
            )
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("3d6")]),
            _vm._v(" "),
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("0 à 3")]),
            _vm._v(" "),
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("4 à 7")]),
            _vm._v(" "),
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("8 à 11")]),
            _vm._v(" "),
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("12 à 16")]),
            _vm._v(" "),
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("17 et +")])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("3-6")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("7-10")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("1 objet")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("1 objet")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("11-14")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("1 objet")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 objets")
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 objets")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("15-19")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("1 objet")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 objets")
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 objets")
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 objets")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("20+")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("1 objet")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 objets")
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 objets")
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 objets")
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 objets")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", {}, [
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "center" } }, [
                _vm._v("4d6")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Objet")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("1-2")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("objets standarts")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("3-4")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("instruments de musique")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("5-6")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("outils")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("7-8")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Armes courantes à distance")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("9-10")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Arme de guerre à distance")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("11-12")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Armure")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("13-14")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Bouclier")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("15-16")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Armes courantes")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("17-18")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Armes de guerre")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("19-23")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Marchandises")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("24")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("lancer sur la table d'objets magique OM1")
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("h3", { attrs: { id: "table-c-tresor-gemmes-et-objets-d-art" } }, [
          _vm._v("Table C – Trésor , gemmes et objets d'art "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#table-c-tresor-gemmes-et-objets-d-art" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Ce tableau vous permet de mesurer la taille du trésor accumulé par un groupe de créatures ou un adversaire remarquable. Il n'est pas multiplié par le nombre de monstres. Des créatures réputées pour amasser de véritables fortunes (pensez aux dragons) peuvent posséder deux ou trois fois la valeur donnée pour le bonus. Lors d'une campagne qui les mènerait du niveau 1 au niveau 20, le groupe de personnages devrait recevoir la valeur du bonus entre une et trois fois par niveau."
          )
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "exemples-de-gemmes" } }, [
          _vm._v("Exemples de gemmes "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#exemples-de-gemmes" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Gemmes à 10 po")]),
          _vm._v(". Azurite, hématite, malachite, quartz bleu, turquoise")
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Gemmes à 50 po")]),
          _vm._v(". Calcédoine, héliotrope, jaspe, onyx, zircon")
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Gemmes à 100 po")]),
          _vm._v(". Ambre, améthyste, grenat, jade, perle, tourmaline")
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Gemmes à 500 po")]),
          _vm._v(". Chrysobéryl, péridot, perle noire, spinelle, topaze")
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Gemmes à 1000 po")]),
          _vm._v(
            ". Émeraude, opale noire, opale de feu, rubis avec astérisme, saphir"
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Gemmes à 5000 po")]),
          _vm._v(". Diamant, rubis, saphir noir")
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "exemples-d-objets-d-art" } }, [
          _vm._v("Exemples d'objets d'art "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#exemples-d-objets-d-art" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Objets d'art à 25 po")]),
          _vm._v(
            ". Statuette en os ou en bois rare, bracelet en or, calice en or, petit miroir d'argent, pendentif en électrum, portrait d'un noble."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Objets d'art à 250 po")]),
          _vm._v(
            ". Anneau en platine serti de jaspes, figurines en ivoire, couronne d'or et d'argent, statuette en jade, tapisserie brodée de fil d'or."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Objets d'art à 750 po")]),
          _vm._v(
            ". Masque cérémoniel en or serti d'ambre, dague sacrificielle damasquinée de platine, idole en or aux yeux de perle."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Objets d'art à 2500 po")]),
          _vm._v(
            ". Pectoral en platine serti d'opales, gantelet ouvragé en or et argent, calice en or serti de perles, sculpture en marbre d'un grand maître."
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _c("strong", [_vm._v("Objets d'art à 7500 po")]),
          _vm._v(
            ". Couronne d'un empereur en platine sertie d'opales noires, cor de chasse en ivoire relevé d'or et de platine, dague sacrificielle dont la lame est une dent de dragon."
          )
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "table-c" } }, [
          _vm._v("Table C "),
          _c(
            "a",
            { staticClass: "header-anchor", attrs: { href: "#table-c" } },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th"),
              _vm._v(" "),
              _c(
                "th",
                { staticClass: "has-text-centered", attrs: { colspan: "5" } },
                [_vm._v("Niveau de la rencontre")]
              )
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("th", { staticClass: "has-text-centered" }, [_vm._v("3d6")]),
              _vm._v(" "),
              _c("th", { staticClass: "has-text-centered" }, [_vm._v("0 à 3")]),
              _vm._v(" "),
              _c("th", { staticClass: "has-text-centered" }, [_vm._v("4 à 7")]),
              _vm._v(" "),
              _c("th", { staticClass: "has-text-centered" }, [
                _vm._v("8 à 11")
              ]),
              _vm._v(" "),
              _c("th", { staticClass: "has-text-centered" }, [
                _vm._v("12 à 16")
              ]),
              _vm._v(" "),
              _c("th", { staticClass: "has-text-centered" }, [
                _vm._v("17 et +")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("3-4")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("5-6")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1 objet à 25 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) gemmes à 50 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1 objet à 750 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("3d6 (10) gemmes à 500 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1 objet à 7500 po")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("7-9")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) gemmes à 10 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 (3) objets à 25 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("3d6 (10) gemmes à 50 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1 objet à 2500 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("3d6 (10) gemmes à 1000 po")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("10-13")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 (3) objets à 25 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 (3) gemmes à 100 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 (3) objets à 750 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) gemmes à 1000 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 (3) objets à 7500 po")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("14-16")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 (3) gemmes à 50 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) gemmes à 50 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) gemmes à 50 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 (3) objets à 2500 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 (3) gemmes à 5000 po")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("17-19")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1 objet à 250 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1 objet à 750 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) objets à 750 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1 objet à 7500 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) objets à 7500 po")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("20+")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) gemmes à 50 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 (7) gemmes à 100 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("3d6 (10) gemmes à 100 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("3d6 (10) gemmes à 1000 po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 (3) gemmes à 5000 po")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticClass: "has-text-centered" }, [
                _c("strong", [_vm._v("Bonus")])
              ]),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("5d6 × 100 (1700) pa"),
                _c("br"),
                _vm._v("2d6 × 10 (70) po")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("1d6 × 1000 (3500) pa"),
                _c("br"),
                _vm._v("3d6 × 100 (1050) po"),
                _c("br"),
                _vm._v("1d6 × 10 (35) pp")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("2d6 × 1000 (7000) pa"),
                _c("br"),
                _vm._v("6d6 × 100 (2100) po"),
                _c("br"),
                _vm._v("3d6 × 10 (105) pp")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("4d6 × 1000 (14000) po"),
                _c("br"),
                _vm._v("5d6 × 100 (1750) pp")
              ]),
              _vm._v(" "),
              _c("td", { staticClass: "has-text-centered" }, [
                _vm._v("12d6 × 1000 (42000) po"),
                _c("br"),
                _vm._v("8d6 × 1000 (28000) pp")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "table-d-objets-magiques" } }, [
        _vm._v("Table D – Objets magiques "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#table-d-objets-magiques" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ce dernier tableau vous permet de déterminer le nombre d'objets magiques, et les tableaux dans lesquels vous allez les tirer au hasard, possédés par les monstres de votre rencontre."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "table-d" } }, [
        _vm._v("Table D "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#table-d" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th"),
            _vm._v(" "),
            _c(
              "th",
              { staticClass: "has-text-centered", attrs: { colspan: "5" } },
              [_vm._v("Niveau de la rencontre")]
            )
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("4d6")]),
            _vm._v(" "),
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("0 à 3")]),
            _vm._v(" "),
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("4 à 7")]),
            _vm._v(" "),
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("8 à 11")]),
            _vm._v(" "),
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("12 à 16")]),
            _vm._v(" "),
            _c("th", { staticClass: "has-text-centered" }, [_vm._v("17 et +")])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("4")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("5")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [_vm._v("-")]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ]),
              _vm._v(" et"),
              _c("br"),
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("6")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ]),
              _vm._v(" et"),
              _c("br"),
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d8 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("7")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ]),
              _vm._v(" et"),
              _c("br"),
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ]),
              _c("br"),
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("8")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("9")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d8 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("10")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                _vm._v("OM5")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("11")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                _vm._v("OM5")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("12")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                _vm._v("OM5")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("13")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                _vm._v("OM5")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("14")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-6" } }, [
                _vm._v("OM6")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("15")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-6" } }, [
                _vm._v("OM6")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("16")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-6" } }, [
                _vm._v("OM6")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("17")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-1" } }, [
                _vm._v("OM1")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-6" } }, [
                _vm._v("OM6")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("18")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                _vm._v("OM5")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-6" } }, [
                _vm._v("OM6")
              ]),
              _c("br"),
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-7" } }, [
                _vm._v("OM7")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("19")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                _vm._v("OM5")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-7" } }, [
                _vm._v("OM7")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("20")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                _vm._v("OM2")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                _vm._v("OM5")
              ]),
              _c("br"),
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-6" } }, [
                _vm._v("OM6")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-7" } }, [
                _vm._v("OM7")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("21")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-7" } }, [
                _vm._v("OM7")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-7" } }, [
                _vm._v("OM7")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("22")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d3 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                _vm._v("OM3")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                _vm._v("OM5")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                _vm._v("OM5")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-7" } }, [
                _vm._v("OM7")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d4 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-8" } }, [
                _vm._v("OM8")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticClass: "has-text-centered" }, [
              _c("strong", [_vm._v("23+")])
            ]),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                _vm._v("OM4")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-6" } }, [
                _vm._v("OM6")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-6" } }, [
                _vm._v("OM6")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-8" } }, [
                _vm._v("OM8")
              ])
            ]),
            _vm._v(" "),
            _c("td", { staticClass: "has-text-centered" }, [
              _vm._v("1d6 fois sur "),
              _c("a", { attrs: { href: "#objets-magiques-8" } }, [
                _vm._v("OM8")
              ])
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("div", {}, [
        _c("h3", { attrs: { id: "objets-magiques-aleatoires" } }, [
          _vm._v("Objets magiques aléatoires "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#objets-magiques-aleatoires" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Les tableaux suivants vous seront utiles pour déterminer les objets magiques présents dans les trésors des monstres rencontrés par les personnages."
          )
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "objets-magiques-1" } }, [
          _vm._v("Objets magiques 1 "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#objets-magiques-1" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "center" } }, [
                _vm._v("3D6")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Objet magique")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("3-10")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Potions")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("11-14")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("**Parchemins de sorts **")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("15")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("**Munitions magiques **")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("16")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Broche")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("17")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Sac sans fond")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("18+")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Relancer sur "),
                _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                  _vm._v("table 2")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "objets-magiques-2" } }, [
          _vm._v("Objets magiques 2 "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#objets-magiques-2" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "center" } }, [
                _vm._v("3d6")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Objet magique")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("3")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Potions")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("4")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Parchemins de sorts")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("5")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Armes et armures")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("6")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _vm._v("Baguettes, bâtons et sceptres (lancer 1d6)")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("7")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Sac")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("8")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Bottes")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("9")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Bracelets")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("10")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Cape")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("11")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Carquois")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("12")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Amulette")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("13")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Anneau")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("14")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Figurine")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("15")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Gants")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("16")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Pierre")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("17")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Poussière")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("18+")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Relancer sur "),
                _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                  _vm._v("table 3")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "objets-magiques-3" } }, [
          _vm._v("Objets magiques 3 "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#objets-magiques-3" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "center" } }, [
                _vm._v("3d6")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Objet magique")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("3")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _vm._v("Relancer sur "),
                  _c("a", { attrs: { href: "#objets-magiques-2" } }, [
                    _vm._v("table 2")
                  ])
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("4")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Parchemins de sorts")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("5")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Armes et armures")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("6")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _vm._v("Baguettes, bâtons et sceptres (lancer 1d6)")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("7")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("beaume")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("8")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("heaume")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("9")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Bracelets")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("10")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("robe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("11")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("flûte")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("12")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Amulette")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("13")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Anneau")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("14")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Figurine")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("15")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("carafe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("16")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("gemme")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("17")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("huile")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("18+")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Relancer sur "),
                _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                  _vm._v("table 4")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "objets-magiques-4" } }, [
          _vm._v("Objets magiques 4 "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#objets-magiques-4" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "center" } }, [
                _vm._v("3d6")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Objet magique")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("3")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _vm._v("Relancer sur "),
                  _c("a", { attrs: { href: "#objets-magiques-3" } }, [
                    _vm._v("table 3")
                  ])
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("4")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Parchemins de sorts")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("5")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Armes et armures")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("6")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Baguettes, bâtons et sceptres")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("7")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("beaume")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("8")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("heaume")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("9")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Bracelets")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("10")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("robe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("11")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("flûte")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("12")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Amulette")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("13")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Anneau")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("14")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Figurine")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("15")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("carafe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("16")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("gemme")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("17")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("huile")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("18+")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Relancer sur "),
                _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                  _vm._v("table 5")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "objets-magiques-5" } }, [
          _vm._v("Objets magiques 5 "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#objets-magiques-5" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "center" } }, [
                _vm._v("3d6")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Objet magique")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("3")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _vm._v("Relancer sur "),
                  _c("a", { attrs: { href: "#objets-magiques-4" } }, [
                    _vm._v("table 4")
                  ])
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("4")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Parchemins de sorts")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("5")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Armes et armures")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("6")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _vm._v("Baguettes, bâtons et sceptres (lancer 1d6)")
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("7")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("beaume")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("8")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("heaume")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("9")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Bracelets")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("10")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("robe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("11")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("flûte")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("12")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Amulette")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("13")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Anneau")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("14")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Figurine")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("15")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("carafe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("16")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("gemme")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("17")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("huile")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("18+")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Relancer sur "),
                _c("a", { attrs: { href: "#objets-magiques-6" } }, [
                  _vm._v("table 6")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "objets-magiques-6" } }, [
          _vm._v("Objets magiques 6 "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#objets-magiques-6" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "center" } }, [
                _vm._v("3d6")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Objet magique")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("3")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _vm._v("Relancer sur "),
                  _c("a", { attrs: { href: "#objets-magiques-5" } }, [
                    _vm._v("table 5")
                  ])
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("4")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Parchemins de sorts")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("5")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Armes et armures")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("6")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Baguettes, bâtons et sceptres")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("7")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("beaume")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("8")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("heaume")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("9")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Bracelets")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("10")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("robe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("11")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("flûte")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("12")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Amulette")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("13")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Anneau")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("14")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Figurine")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("15")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("carafe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("16")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("gemme")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("17")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("huile")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("18+")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Relancer sur "),
                _c("a", { attrs: { href: "#objets-magiques-7" } }, [
                  _vm._v("table 7")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "objets-magiques-7" } }, [
          _vm._v("Objets magiques 7 "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#objets-magiques-7" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "center" } }, [
                _vm._v("3d6")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Objet magique")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("3")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _vm._v("Relancer sur "),
                  _c("a", { attrs: { href: "#objets-magiques-6" } }, [
                    _vm._v("table 6")
                  ])
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("4")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Parchemins de sorts")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("5")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Armes et armures")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("6")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Baguettes, bâtons et sceptres")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("7")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("beaume")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("8")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("heaume")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("9")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Bracelets")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("10")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("robe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("11")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("flûte")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("12")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Amulette")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("13")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Anneau")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("14")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Figurine")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("15")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("carafe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("16")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("gemme")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("17")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("huile")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("18+")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Relancer sur "),
                _c("a", { attrs: { href: "#objets-magiques-8" } }, [
                  _vm._v("table 8")
                ])
              ])
            ])
          ])
        ]),
        _vm._v(" "),
        _c("h4", { attrs: { id: "objets-magiques-8" } }, [
          _vm._v("Objets magiques 8 "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#objets-magiques-8" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("table", [
          _c("thead", [
            _c("tr", [
              _c("th", { staticStyle: { "text-align": "center" } }, [
                _vm._v("3d6")
              ]),
              _vm._v(" "),
              _c("th", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Objet magique")
              ])
            ])
          ]),
          _vm._v(" "),
          _c("tbody", [
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("3")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [
                  _vm._v("Relancer sur "),
                  _c("a", { attrs: { href: "#objets-magiques-7" } }, [
                    _vm._v("table 7")
                  ])
                ])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("4")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Parchemins de sorts")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("5")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("Armes et armures")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("6")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("**Baguettes, bâtons et sceptres **")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("7")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _c("strong", [_vm._v("beaume")])
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("8")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("heaume")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("9")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Bracelets")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("10")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("robe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("11")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("flûte")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("12")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Amulette")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("13")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Anneau")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("14")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Figurine")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("15")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("carafe")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("16")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("gemme")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("17")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("huile")
              ])
            ]),
            _vm._v(" "),
            _c("tr", [
              _c("td", { staticStyle: { "text-align": "center" } }, [
                _c("strong", [_vm._v("18+")])
              ]),
              _vm._v(" "),
              _c("td", { staticStyle: { "text-align": "left" } }, [
                _vm._v("Artefact")
              ])
            ])
          ])
        ])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}