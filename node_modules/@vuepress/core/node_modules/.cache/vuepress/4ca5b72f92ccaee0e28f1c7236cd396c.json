{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/docs/.vuepress/theme/components/MySpells.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/.vuepress/theme/components/MySpells.vue","mtime":1634294763185},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICIuLi9zdHlsZXMvY29sb3JzIjsKLnNwZWxsLXNsb3QgewogIG1hcmdpbjogMDsKfQo="},{"version":3,"sources":["MySpells.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0NA;AACA;AACA;AACA","file":"MySpells.vue","sourceRoot":"docs/.vuepress/theme/components","sourcesContent":["<template>\n  <main class=\"page content\">\n    <div class=\"theme-default-content\">\n      <div v-if=\"spells.length > 0\">\n        <div class=\"d-print-none mb-12\">\n\n          <v-data-table\n            class=\"data-table\"\n            :headers=\"headers\"\n            :items=\"spells\"\n            item-key=\"key\"\n            :sort-by=\"sortBy\"\n            :sort-desc=\"sortDesc\"\n            group-by=\"frontmatter.level\"\n            must-sort\n            :items-per-page=\"-1\"\n            hide-default-footer\n            show-expand\n            @click:row=\"onClickRow\"\n          >\n\n            <template v-slot:expanded-item=\"{ headers, item }\">\n              <td :colspan=\"headers.length\" class=\"pa-4\">\n                <Spell :spell=\"getSpell(item)\" />\n              </td>\n            </template>\n\n            <template v-slot:group.header=\"{ group, headers, isOpen, toggle }\">\n              <td class=\"group-header\" :colspan=\"headers.length\">\n                <div class=\"d-block d-md-flex align-center\">\n                  <div class=\"mr-md-12\">\n                    <v-btn dark small depressed icon @click.stop=\"toggle\"><v-icon v-if=\"isOpen\">mdi-minus</v-icon><v-icon v-else>mdi-plus</v-icon></v-btn>\n                    <span class=\"subtitle-2\"><strong>{{ displayLevel(group) }}</strong></span>\n                  </div>\n                  <div class=\"mx-md-12\">\n                    <div v-if=\"group > 0\" style=\"width: 125px;\">\n                      <v-text-field dark hide-details outlined dense label=\"Emplacements\" type=\"number\" min=\"0\" v-model=\"spellSlots[group]\" @input=\"onInputSpellSlots\"></v-text-field>\n                    </div>\n                  </div>\n                  <div class=\"ml-md-12\">\n                    <div class=\"d-flex\" v-if=\"spellSlots[group] > 0\">\n                      <div v-for=\"(slot, idx) in Number(spellSlots[group])\" :key=\"idx\">\n                        <v-checkbox dark hide-details class=\"spell-slot\"></v-checkbox>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </td>\n            </template>\n\n            <template v-slot:item.title=\"{ item }\">\n              <span class=\"subtitle-2\">{{ item.title }}</span>\n            </template>\n\n            <template v-slot:item.frontmatter.level=\"{ item }\">\n              <span v-if=\"item.frontmatter.level == 0\">Novice</span>\n              <span v-else>{{ item.frontmatter.level }}</span>\n            </template>\n\n            <template v-slot:item.frontmatter.concentration=\"{ item }\">\n              <span v-if=\"item.frontmatter.concentration\">concentration</span>\n            </template>\n\n            <template v-slot:item.frontmatter.ritual=\"{ item }\">\n              <span v-if=\"item.frontmatter.ritual\">rituel</span>\n            </template>\n\n            <template v-slot:item.frontmatter.components=\"{ item }\">\n              <template v-if=\"item.frontmatter.components\">\n                <template v-if=\"item.frontmatter.components.verbal\">V</template><template v-if=\"item.frontmatter.components.verbal && (item.frontmatter.components.somatic || item.frontmatter.components.material)\">,</template>\n                <template v-if=\"item.frontmatter.components.somatic\">S</template><template v-if=\"item.frontmatter.components.somatic && item.frontmatter.components.material\">,</template>\n                <template v-if=\"item.frontmatter.components.material\">M</template>\n              </template>\n            </template>\n\n            <template v-slot:item.actions=\"{ item }\">\n              <div class=\"text-no-wrap\">\n                <v-btn class=\"d-print-none\" v-if=\"item.custom\" small depressed icon @click=\"share(item)\"><v-icon>mdi-share-variant</v-icon></v-btn>\n                <v-btn class=\"d-print-none mr-2\" small depressed icon @click.stop=\"toggleHidePrint(item)\">\n                  <v-icon v-if=\"isHiddenPrint(item)\">mdi-printer-off</v-icon>\n                  <v-icon v-else>mdi-printer</v-icon>\n                </v-btn>\n                <v-btn class=\"d-print-none mr-2\" small depressed link icon :to=\"{ path: '/creation-de-sort/', query: { key: item.key } }\"><v-icon>mdi-pencil</v-icon></v-btn>\n                <v-btn color=\"error\" class=\"d-print-none\" small depressed icon @click=\"removeSpell(item)\"><v-icon>mdi-delete</v-icon></v-btn>\n              </div>\n            </template>\n\n          </v-data-table>\n        </div>\n        <div class=\"d-none d-print-block\">\n          <template v-for=\"(n, level) in 10\" v-if=\"hasSpellOfLevel(level)\">\n            <h2 v-if=\"level == 0\">Tours de magie</h2>\n            <h2 v-else>Sorts de niveau {{ level }}</h2>\n            <div class=\"column-count-2\">\n              <div v-for=\"spell in spells\">\n                <template v-if=\"spell.frontmatter.level == level && !isHiddenPrint(spell)\">\n                  <h3 class=\"d-flex align-center title\">\n                    <div class=\"mr-4\">{{ spell.title }}</div>\n                    <v-btn class=\"d-print-none mr-2\" small depressed link :to=\"{ path: '/creation-de-sort/', query: { key: spell.key } }\"><v-icon left>mdi-pencil</v-icon> Modifier</v-btn>\n                    <v-btn color=\"error\" class=\"d-print-none\" small depressed @click=\"removeSpell(spell)\"><v-icon left>mdi-delete</v-icon> Supprimer</v-btn>\n                  </h3>\n                  <Spell :spell=\"getSpell(spell)\" :isList=\"true\" :hideTitle=\"true\" />\n                </template>\n              </div>\n            </div>\n          </template>\n        </div>\n      </div>\n      <template v-else>\n        Vous n'avez écrit aucun sort dans votre grimoire.\n      </template>\n    </div>\n\n  </main>\n</template>\n\n<script>\nimport Spell from '@theme/components/Spell'\nimport { encode } from '@theme/util/homebrew'\n\nexport default {\n  name: 'MySpells',\n\n  components: {\n    Spell\n  },\n\n  data () {\n    return {\n      sortBy: 'frontmatter.level',\n      sortDesc: false,\n      headers: [\n        { text: \"Nom\", align: 'start', sortable: false, value: 'title' },\n        { text: \"Niveau\", align: 'center', sortable: false, value: 'frontmatter.level' },\n        { text: \"École\", align: 'start', sortable: false, value: 'frontmatter.school' },\n        { text: \"Temps d'incantation\", align: 'start', sortable: false, value: 'frontmatter.casting_time' },\n        { text: \"Durée\", align: 'start', sortable: false, value: 'frontmatter.duration' },\n        { text: \"Concentration\", align: 'center', sortable: false, value: 'frontmatter.concentration' },\n        { text: \"Rituel\", align: 'center', sortable: false, value: 'frontmatter.ritual' },\n        { text: \"Composantes\", align: 'center', sortable: false, value: 'frontmatter.components' },\n        { text: \"\", align: 'center', sortable: false, value: 'actions' },\n      ]\n    }\n  },\n\n  computed: {\n    spells () {\n      return this.$store.state.mySpells.spells\n    },\n    spellSlots: {\n      get () {\n        return this.$store.state.mySpells.spellSlots\n      },\n      set (value) {\n        this.$store.commit('mySpells/setSpells', value)\n      }\n    }\n  },\n\n  methods: {\n    displayLevel (level) {\n      if (level == 0 || level == \"0\") {\n        return 'Tours de magie'\n      } else {\n        return 'Sorts de niveau ' + level\n      }\n    },\n    onInputSpellSlots () {\n      this.$store.commit('mySpells/setSpellSlots', this.spellSlots)\n    },\n    hasSpellOfLevel (level) {\n      for (let spell of this.spells) {\n        if (spell.frontmatter.level == level && !this.isHiddenPrint(spell)) {\n          return true\n        }\n      }\n      return false\n    },\n    toggleHidePrint (spell) {\n      if (this.isHiddenPrint(spell)) {\n        this.$store.commit('mySpells/removeNotPrintedSpell', spell)\n      } else {\n        this.$store.commit('mySpells/addNotPrintedSpell', spell)\n      }\n    },\n    isHiddenPrint (spell) {\n      if (this.$store.state.mySpells.notPrintedSpells) {\n        let idx = this.$store.state.mySpells.notPrintedSpells.findIndex(item => item.key == spell.key)\n        if (idx >= 0) {\n          return true\n        }\n      }\n      return false\n    },\n    onClickRow (row, item) {\n      item.expand(!item.isExpanded)\n    },\n    removeSpell (spell) {\n      this.$store.commit('mySpells/removeSpell', spell)\n      this.$store.commit('setSnackbarText', \"Le sort \" + spell.title + \" a été supprimé de votre grimoire\")\n      this.$store.commit('setIsOpenSnackbar', true)\n    },\n    share (item) {\n      this.$store.commit('setShareURI', encode(item))\n      this.$store.commit('setIsOpenShareHomebrewDialog', true)\n    },\n    getSpell (item) {\n      if (!item.custom && item.path) {\n        let spell = this.$site.pages.find((el) => el.path === item.path || el.path === item.path + \"/\")\n        return spell\n      }\n      return item\n    }\n  },\n}\n</script>\n\n<style lang=\"scss\">\n@import \"../styles/colors\";\n.spell-slot {\n  margin: 0;\n}\n</style>\n"]}]}