{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/combattre/README.md?vue&type=template&id=12bbd11d&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/combattre/README.md","mtime":1638362994035},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h1", { attrs: { id: "combattre" } }, [
        _vm._v("Combattre "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#combattre" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "surprise" } }, [
        _vm._v("Surprise "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#surprise" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Le MJ détermine qui est susceptible d'être pris par surprise. Si aucun des deux camps ne cherche à être discret, ils se remarquent automatiquement. Sinon, le MJ compare les résultats des tests de Dextérité (Discrétion) de toutes les créatures qui se cachent avec la valeur passive de Sagesse (Perception) de toutes les créatures qui appartiennent à l'autre camp. Tout personnage ou monstre qui ne remarque pas une menace est "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#surpris" } },
            [_c("em", [_vm._v("surpris")])]
          ),
          _vm._v(" au début de la rencontre.")
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Si vous êtes "),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#surpris" } },
            [_c("em", [_vm._v("surpris")])]
          ),
          _vm._v(
            ", vous ne pouvez pas bouger ou accomplir d'action lors de votre premier tour de combat, et vous ne pouvez pas non plus réagir jusqu'à la fin de ce tour. Il est possible qu'un seul membre d'un groupe soit "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#surpris" } },
            [_c("em", [_vm._v("surpris")])]
          ),
          _vm._v(" et pas les autres.")
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "initiative" } }, [
        _vm._v("Initiative "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#initiative" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "L'initiative permet de déterminer l'ordre des tours pendant un combat. Au début du combat, chaque participant fait un test de Dextérité afin de déterminer son rang dans l'ordre d'initiative. Le MJ lance un seul dé pour un groupe de créatures identiques, de sorte que tous les membres de ce groupe agissent en même temps."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ classe les combattants par ordre de Dextérité, en commençant par celui qui a eu le résultat le plus élevé à son test de Dextérité et en terminant par celui dont le résultat était le moins élevé. C'est dans cet ordre, appelé ordre d'initiative, que les combattants agiront à chaque round. L'ordre d'initiative reste le même d'un round à l'autre."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "En cas d'égalité, s'il s'agit de créatures contrôlées par le MJ, ce dernier choisit quelle créature agira avant l'autre. Si l'égalité concerne les héros, c'est aux joueurs de décider quel personnage agira le premier. Si un monstre et le personnage d'un joueur se trouvent à égalité, le MJ peut décider de l'ordre. Le MJ peut aussi décider que les personnages et monstres à égalité résolvent la situation par un nouveau jet de 3d6, auquel cas la créature qui a le résultat le plus haut agira avant l'autre."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "votre-tour" } }, [
        _vm._v("Votre tour "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#votre-tour" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Pendant votre tour, vous pouvez "),
        _c("strong", [_vm._v("vous déplacer")]),
        _vm._v(" d'une distance égale à votre vitesse et "),
        _c("strong", [_vm._v("accomplir une action")]),
        _vm._v(
          ". C'est à vous de décider si vous voulez d'abord vous déplacer ou d'abord agir. Votre vitesse – parfois appelée aussi vitesse de déplacement  – est indiquée sur votre feuille de personnage."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les actions les plus courantes que vous pouvez accomplir sont décrites dans la section "
        ),
        _c("a", { attrs: { href: "#actions-en-combat" } }, [
          _c("em", [_vm._v("Actions en combat")])
        ]),
        _vm._v(
          ", plus loin dans ce chapitre. Certaines aptitudes de classes ou d'autres capacités vous donnent un choix d'actions plus important."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("La section "),
        _c("a", { attrs: { href: "#deplacement-et-position" } }, [
          _c("em", [_vm._v("Déplacement et position")])
        ]),
        _vm._v(" vous explique les règles de déplacement.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous pouvez décider de ne pas vous déplacer, ne pas agir, ou même de ne rien faire pendant votre tour. Si vous ne savez pas quoi faire pendant votre tour, vous pouvez envisager de choisir les actions "
        ),
        _c("a", { attrs: { href: "#esquiver" } }, [
          _c("em", [_vm._v("esquiver")])
        ]),
        _vm._v(" ou "),
        _c("a", { attrs: { href: "#se-tenir-pret" } }, [
          _c("em", [_vm._v("se tenir prêt")])
        ]),
        _vm._v(", décrites dans la section "),
        _c("a", { attrs: { href: "#actions-en-combat" } }, [
          _c("em", [_vm._v("Actions en combat")])
        ]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "action-bonus" } }, [
        _vm._v("Action bonus "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#action-bonus" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Plusieurs aptitudes de classes, sorts et autres capacités vous permettent d'accomplir une action supplémentaire lors de votre tour. L'aptitude ruse, par exemple, permet à un roublard d'accomplir une action bonus. Vous ne pouvez accomplir d'action bonus que si une capacité spéciale, un sort ou une aptitude stipule que vous pouvez « accomplir quelque chose comme action bonus ». Si ce n'est pas le cas, vous ne pouvez pas accomplir d'action bonus."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous ne pouvez accomplir qu'une seule action bonus pendant votre tour. Si vous avez le choix entre plusieurs actions bonus, vous devez donc choisir quelle action bonus accomplir."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous devez attendre votre tour pour accomplir une action bonus, sauf si celle-ci se déroule à un moment bien précis indiqué alors dans son descriptif. Tout effet qui vous empêche d'accomplir des actions vous empêche également d'accomplir des actions bonus."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "autres-activites-pendant-votre-tour" } }, [
        _vm._v("Autres activités pendant votre tour "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#autres-activites-pendant-votre-tour" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Pendant votre tour, vous pouvez faire de nombreuses choses qui ne vous demandent pas de vous déplacer ni d'utiliser une action."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous pouvez communiquer, dans la mesure du possible, par phrases brèves ou par gestes."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous pouvez aussi librement interagir avec un objet ou un élément de l'environnement, soit pendant votre déplacement, soit pendant votre action. Par exemple, vous pouvez profiter de votre mouvement vers un ennemi pour ouvrir une porte. Ou alors, vous pouvez dégainer votre arme pendant la même action que vous utilisez pour attaquer."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Néanmoins, si vous voulez interagir avec un second objet, alors vous devez utiliser une action. Par exemple, si vous souhaitez vous déplacer, ouvrir la porte et dégainer votre épée, alors votre tour de jeu sera terminé. Vous ne pourrez pas attaquer car votre action aura été utilisée pour interagir avec un second objet."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Pour utiliser certains objets magiques et autres objets spéciaux, vous devrez toujours utiliser une action, conformément à ce qui est indiqué dans la description de ces objets."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le MJ peut vous demander d'utiliser une action pour n'importe quelle activité qui requiert une attention particulière ou lorsque vous vous trouvez face à un obstacle inhabituel. Par exemple, le MJ peut raisonnablement vous demander d'utiliser une action pour forcer une porte coincée ou pour tourner une manivelle qui fera descendre un pont-levis."
        )
      ]),
      _vm._v(" "),
      _c("div", { staticClass: "hero" }, [
        _c("h4", { attrs: { id: "interagir-avec-les-objets-alentours" } }, [
          _vm._v("Interagir avec les objets alentours "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#interagir-avec-les-objets-alentours" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "Voici quelques exemples de ce que vous pouvez accomplir librement, en même temps que votre déplacement ou que votre action. Pour rappel, vous ne pouvez interagir librement qu'avec un seul objet par tour de jeu. Interagir avec deux objets vous oblige à utiliser votre action."
          )
        ]),
        _vm._v(" "),
        _c("ul", [
          _c("li", [_vm._v("Dégainer ou rengainer une épée")]),
          _vm._v(" "),
          _c("li", [_vm._v("Ouvrir ou fermer une porte")]),
          _vm._v(" "),
          _c("li", [_vm._v("Prendre une potion dans votre sac à dos")]),
          _vm._v(" "),
          _c("li", [_vm._v("Ramasser une hache tombée au sol")]),
          _vm._v(" "),
          _c("li", [_vm._v("Prendre un bibelot posé sur une table")]),
          _vm._v(" "),
          _c("li", [_vm._v("Retirer un anneau de votre doigt")]),
          _vm._v(" "),
          _c("li", [_vm._v("Enfourner de la nourriture dans votre bouche")]),
          _vm._v(" "),
          _c("li", [_vm._v("Planter une bannière dans le sol")]),
          _vm._v(" "),
          _c("li", [_vm._v("Prendre de l'argent dans votre bourse")]),
          _vm._v(" "),
          _c("li", [_vm._v("Finir toute la bière d'une cruche")]),
          _vm._v(" "),
          _c("li", [_vm._v("Actionner un levier ou un interrupteur")]),
          _vm._v(" "),
          _c("li", [_vm._v("Retirer une torche de son support")]),
          _vm._v(" "),
          _c("li", [
            _vm._v(
              "Prendre un livre sur une étagère qui se trouve à votre portée"
            )
          ]),
          _vm._v(" "),
          _c("li", [_vm._v("Éteindre une petite flamme")]),
          _vm._v(" "),
          _c("li", [_vm._v("Mettre un masque")]),
          _vm._v(" "),
          _c("li", [
            _vm._v("Vous couvrir la tête avec la capuche de votre manteau")
          ]),
          _vm._v(" "),
          _c("li", [_vm._v("Plaquer votre oreille contre une porte")]),
          _vm._v(" "),
          _c("li", [_vm._v("Donner un coup de pied dans une petite pierre")]),
          _vm._v(" "),
          _c("li", [_vm._v("Tourner une clef dans une serrure")]),
          _vm._v(" "),
          _c("li", [_vm._v("Frapper le sol avec un bâton de 3 mètres")]),
          _vm._v(" "),
          _c("li", [_vm._v("Tendre un objet à un autre personnage")])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "reaction" } }, [
        _vm._v("Réaction "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#reaction" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Certaines capacités spéciales, sorts ou situations permettent à votre personnage d'accomplir une action spéciale appelée une "
        ),
        _c("strong", [_vm._v("réaction")]),
        _vm._v(
          ". Une réaction est une réponse instantanée déclenchée par un stimulus qui peut se produire pendant votre tour ou celui de quelqu'un d'autre. Le type de réaction le plus courant est l'attaque d'opportunité, décrite plus loin dans ce chapitre."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Quand vous réagissez, vous ne pouvez pas réagir de nouveau avant le début de votre prochain tour. Si la réaction interrompt le tour d'une autre créature, celle-ci finit son tour normalement après la résolution de la réaction."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "deplacement-et-position" } }, [
        _vm._v("Déplacement et position "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#deplacement-et-position" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Au cours d'un combat, les héros et leurs adversaires sont constamment en mouvement et utilisent souvent leur déplacement ou leur position pour tenter de prendre le dessus sur leurs ennemis."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Lors de votre tour, vous pouvez vous déplacer d'une distance inférieure ou égale à votre vitesse. Dans les limites de votre vitesse, vous pouvez parcourir la distance que vous souhaitez pendant votre tour en suivant les règles présentées ici."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Dans le cadre de votre mouvement, vous pouvez sauter, escalader et nager. Ces différents modes de déplacement peuvent être combinés avec la marche ou constituer l'ensemble de votre déplacement. Quelle que soit la manière dont vous vous déplacez, vous devez déduire de votre vitesse la distance utilisée par chacun de vos modes de déplacement jusqu'à ce que vous ayez épuisé votre jauge de déplacement ou que vous ayez décidé de vous arrêter."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "fragmenter-votre-mouvement" } }, [
        _vm._v("Fragmenter votre mouvement "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#fragmenter-votre-mouvement" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Pendant votre tour, vous pouvez fragmenter votre déplacement et utiliser une partie de votre déplacement avant votre action et le reste après celle-ci. Par exemple, si votre vitesse est de 9 mètres, vous pouvez vous déplacer de 3 mètres, faire une action, puis parcourir les 6 mètres restant."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "se-deplacer-entre-des-attaques" } }, [
        _vm._v("Se déplacer entre des attaques "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#se-deplacer-entre-des-attaques" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Si vous utilisez une action qui vous permet de porter plusieurs attaques avec une arme, vous pouvez fragmenter encore plus votre déplacement et vous déplacer entre ces attaques. Par exemple, un guerrier qui peut porter deux attaques grâce à l'aptitude attaque supplémentaire et qui a une vitesse de 7,50 mètres peut se déplacer de 3 mètres, porter sa première attaque, se déplacer de 4,50 mètres supplémentaires et porter sa seconde attaque."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "utiliser-differentes-vitesses" } }, [
        _vm._v("Utiliser différentes vitesses "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#utiliser-differentes-vitesses" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Si vous avez la capacité de vous déplacer à plusieurs vitesses, comme une vitesse au sol et une vitesse en nage, par exemple, vous pouvez alterner les deux lors de votre déplacement. À chaque fois que vous passez d'un type de vitesse à l'autre, vous devez soustraire la distance que vous avez déjà parcourue de la nouvelle jauge de vitesse. Le résultat indique quelle distance vous pouvez encore parcourir. Si ce résultat est de 0 ou moins, vous ne pouvez plus vous déplacer pendant ce tour."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "terrain-difficile" } }, [
        _vm._v("Terrain difficile "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#terrain-difficile" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Un combat se déroule rarement sur le sol d'une pièce vide ou dans une plaine bien dégagée. Que ce soit sur le sol irrégulier d'une caverne, au milieu d'une forêt envahie de bruyères, ou dans un escalier glissant, un champ de bataille est généralement un terrain difficile."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Chaque mètre parcouru sur un terrain difficile coûte un mètre de déplacement supplémentaire. Votre vitesse est ainsi divisée par deux. Si plusieurs obstacles qui justifieraient en eux-mêmes de considérer un terrain comme difficile se cumulent sur un seul terrain (un escalier raide ET encombré de gravats), le coût du déplacement reste le même et ne se cumule pas. Votre vitesse reste divisée par deux, et non par trois ou quatre..."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Des meubles bas, des gravats, des buissons, des escaliers raides, de la neige ou des fondrières sont autant d'exemples de terrains difficiles. L'emplacement occupé par une autre créature est également considéré comme un terrain difficile."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "etre-a-terre" } }, [
        _vm._v("Être à terre "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#etre-a-terre" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Il n'est pas rare que des combattants se trouvent au sol, allongés par terre, qu'ils aient été renversés ou qu'ils se soient eux-mêmes jetés au sol. Dans le cadre du jeu, on dit qu'ils sont "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#a-terre" } },
            [_c("em", [_vm._v("à terre")])]
          ),
          _vm._v(", un état décrit dans le chapitre "),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#a-terre" } },
            [_c("em", [_vm._v("Gérer la santé du personnage - À terre")])]
          ),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v("Vous pouvez vous "),
        _c("strong", [_vm._v("jeter au sol")]),
        _vm._v(" sans avoir à utiliser de votre déplacement. Vous "),
        _c("strong", [_vm._v("relever")]),
        _vm._v(
          " vous demande plus d'efforts et vous coûte la moitié de votre déplacement total."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Par exemple, si votre vitesse est de 9 mètres, vous devez utiliser 4,50 mètres pour vous relever. Vous ne pouvez pas vous relever si votre jauge de déplacement n'est pas suffisante ou est réduite à 0."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Pour vous déplacer quand vous êtes "),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#a-terre" } },
            [_c("em", [_vm._v("à terre")])]
          ),
          _vm._v(", vous devez "),
          _c("strong", [_vm._v("ramper")]),
          _vm._v(
            " ou utiliser une magie comme la téléportation. Quand vous rampez, chaque mètre parcouru vous coûte 1 mètre supplémentaire. Votre vitesse de déplacement est donc divisée par deux. De plus, si vous rampez sur 1 mètre en terrain difficile, cela vous coûte en réalité 3 mètres de déplacement, votre vitesse est donc divisée par trois."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "se-deplacer-au-milieux-d-autres-creatures" } }, [
        _vm._v("Se déplacer au milieux d'autres créatures "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#se-deplacer-au-milieux-d-autres-creatures" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous pouvez traverser l'emplacement d'une créature qui ne vous est pas hostile. En revanche, vous ne pouvez traverser l'emplacement occupé par une créature hostile que si celle-ci fait deux tailles de plus ou de moins que vous. N'oubliez pas que l'emplacement occupé par une autre créature est considéré comme un terrain difficile."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Qu'une créature soit amie ou ennemie, vous ne pouvez pas volontairement vous arrêter sur l'emplacement qu'elle occupe."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Si vous vous mettez hors de portée de la capacité d'allonge d'une créature pendant votre déplacement, vous provoquez une attaque d'opportunité, ainsi qu'expliqué plus loin dans ce chapitre."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "deplacement-en-vol" } }, [
        _vm._v("Déplacement en vol "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#deplacement-en-vol" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Les créatures volantes bénéficient d'une grande mobilité. En revanche elles doivent également composer avec le risque de tomber. Si une créature volante est jetée "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#a-terre" } },
            [_c("em", [_vm._v("à terre")])]
          ),
          _vm._v(
            ", voit sa vitesse réduite à 0 ou se retrouve d'une manière ou d'une autre dans l'incapacité de bouger, elle chute, à moins d'être en mesure de faire du vol stationnaire ou d'être maintenue dans les airs."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "taille-des-creatures" } }, [
        _vm._v("Taille des créatures "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#taille-des-creatures" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Chaque créature occupe une surface plus ou moins importante en fonction de sa taille. Le "
        ),
        _c("a", { attrs: { href: "#categories-de-tailles" } }, [
          _vm._v("tableau des catégories de tailles")
        ]),
        _vm._v(
          " qui suit indique la taille de la surface occupée et contrôlée en combat par une créature d'une taille donnée. Les objets utilisent parfois les mêmes catégories de taille."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "categories-de-tailles" } }, [
        _vm._v("Catégories de tailles "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#categories-de-tailles" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Taille")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Espace occupé")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Très petit")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("TP")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Carré de 0,75 mètre de côté")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Petit")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("P")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Carré de 1,50 mètres de côté")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Moyen")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("M")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Carré de 1,50 mètres de côté")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Grand")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("G")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Carré de 3 mètres de côté")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Très grand")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("TG")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Carré de 4,50 mètres de côté")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _c("strong", [_vm._v("Gigantesque")])
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Gig")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "left" } }, [
              _vm._v("Carré de 6 mètres de côté")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "emplacement" } }, [
        _vm._v("Emplacement "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#emplacement" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "L'emplacement d'une créature correspond à la surface qu'elle contrôle lors d'un combat et non à la surface qu'elle occupe réellement. Par exemple, une créature de taille moyenne classique ne fait pas 1,50 mètre de large, mais elle contrôle une surface de 1,50 mètre de côté. Si un hobgobelin de taille moyenne se trouve dans l'embrasure d'une porte de 1,50 mètre de large, les autres créatures ne peuvent passer que si le hobgobelin leur permet."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "L'emplacement occupé par une créature donne aussi la taille de l'espace qu'il lui faut pour combattre efficacement. C'est pour cette raison qu'il y a une limite au nombre de créatures qui peuvent en encercler une autre en combat. En imaginant un combat entre des créatures de taille moyenne, huit créatures seulement peuvent tenir dans un rayon de 1,50 mètre autour d'une autre."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les créatures plus grandes occupent un emplacement plus important. Et le nombre maximum d'entre elles qui permet d'encercler en même temps une créature est donc plus réduit. Par exemple, si des grandes créatures veulent encercler une créature de taille moyenne ou plus petite, le chiffre maximum est alors de cinq. En revanche, une créature gigantesque peut être encerclée par vingt créatures de taille moyenne."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "se-faufiler-dans-un-espace-reduit" } }, [
        _vm._v("Se faufiler dans un espace réduit "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#se-faufiler-dans-un-espace-reduit" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Une créature peut se faufiler dans un espace minimum d'une taille égale à l'espace contrôlé par une créature de la catégorie de taille inférieure à la sienne. Ainsi, une grande créature peut se faufiler dans un passage qui ne fait que 1,50 mètre de large. Mais en se faufilant dans un tel espace, chaque mètre parcouru par la créature lui coûte 1 mètre de déplacement supplémentaire et elle subit un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(
            " sur les jets d'attaque et les jets de sauvegarde de Dextérité. À l'inverse, toute créature qui attaque celle qui se faufile obtient l'"
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(
            " sur ses jets d'attaque tant que sa cible se trouve dans un espace trop petit pour elle."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "actions-en-combat" } }, [
        _vm._v("Actions en combat "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#actions-en-combat" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Quand vous accomplissez une action lors de votre tour, vous avez le choix entre les actions présentées ci-dessous, une action qui dépend de votre classe ou d'une aptitude particulière, ou, enfin, une action que vous improvisez. De nombreux monstres possèdent des actions qui leurs sont propres et qui sont présentées dans leur profils statistiques."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Quand vous décrivez une action qui n'est pas présentée dans les règles, c'est au MJ de décider si vous pouvez accomplir cette action et si vous devez faire un jet de dés spécifique pour déterminer votre succès ou votre échec."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "aider" } }, [
        _vm._v("Aider "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#aider" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Vous pouvez apporter votre aide à une autre créature pour réaliser une tâche. Quand vous choisissez l'action "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#aider" } }, [
            _c("em", [_vm._v("aider")])
          ]),
          _vm._v(", la créature que vous aidez obtient un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" sur le prochain "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#tests-de-caracteristique"
              }
            },
            [_vm._v("test de caractéristique")]
          ),
          _vm._v(
            " qu'elle fait dans le but d'accomplir la tâche pour laquelle vous coopérez, mais seulement si elle fait ce test avant le début de votre prochain tour."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Vous pouvez aussi "),
          _c("RouterLink", { attrs: { to: "/combattre/#aider" } }, [
            _c("em", [_vm._v("aider")])
          ]),
          _vm._v(" une créature amicale qui veut "),
          _c("RouterLink", { attrs: { to: "/combattre/#attaquer" } }, [
            _c("em", [_vm._v("attaquer")])
          ]),
          _vm._v(
            " une autre créature qui se trouve dans un rayon de 1,50 mètre de vous. Vous faites une feinte, tentez de distraire la cible ou participez d'une manière ou d'une autre afin de rendre l'attaque de votre allié plus efficace. Si votre allié attaque la cible avant le début de votre prochain tour, il obtient un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" sur son premier "),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "attaquer" } }, [
        _vm._v("Attaquer "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#attaquer" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("L'action de combat la plus courante est "),
          _c("RouterLink", { attrs: { to: "/combattre/#attaquer" } }, [
            _c("em", [_vm._v("attaquer")])
          ]),
          _vm._v(
            ", que ce soit en frappant avec une épée, en tirant une flèche avec un arc ou en combattant à mains nues."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Cette action vous permet de réaliser une attaque de corps-à-corps ou à distance. Reportez-vous à la section "
        ),
        _c("a", { attrs: { href: "#porter-une-attaque" } }, [
          _c("em", [_vm._v("Porter une attaque")])
        ]),
        _vm._v(" pour découvrir les règles qui s'appliquent à l'attaque.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Certaines aptitudes, comme l'attaque supplémentaire du guerrier, permettent à votre personnage de porter plus d'une attaque avec cette action.\nUn résultat de trois 6 sur le jet initial d'attaque est toujours un coup critique. Le coup critique à plusieurs effets : il peut entrainer sur un personnage ou un PNJ important une blessure majeure."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "chercher" } }, [
        _vm._v("Chercher "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#chercher" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Quand vous choisissez l'action "),
        _c("em", [_vm._v("chercher")]),
        _vm._v(
          ", toute votre attention est tournée vers l'objet de votre recherche. En fonction de ce que vous cherchez, le MJ peut vous demander de faire un test de Sagesse (Perception) ou un d'Intelligence (Investigation)."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "esquiver" } }, [
        _vm._v("Esquiver "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#esquiver" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Quand vous choisissez l'action "),
          _c("RouterLink", { attrs: { to: "/combattre/#esquiver" } }, [
            _c("em", [_vm._v("esquiver")])
          ]),
          _vm._v(
            ", votre unique objectif est d'éviter les attaques. Jusqu'au début de votre tour suivant, tout "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(" qui vous prend pour cible subit un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(" si vous pouvez voir l'attaquant, et vous bénéficiez d'un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" pour tout "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            " de Dextérité. Vous perdez les bénéfices de cette action si vous êtes "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#neutralise" } },
            [_c("em", [_vm._v("neutralisé")])]
          ),
          _vm._v(
            " ou si votre vitesse est réduite à 0. Il ne faut pas confondre l’action esquiver et la réaction défensive esquiver. Les deux modes peuvent être utilisés simultanément dans le même tour."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "lancer-un-sort" } }, [
        _vm._v("Lancer un sort "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#lancer-un-sort" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les lanceurs de sort, comme les magiciens et les clercs ainsi que de nombreux monstres, ont accès à des sorts qu'ils peuvent utiliser avec une redoutable efficacité en combat. À chaque sort correspond un temps d'incantation : le descriptif du sort indique si le lancement du sort nécessite d'utiliser une action ou une réaction, ou doit être préparé pendant plusieurs minutes ou heures. "
        ),
        _c("em", [_vm._v("Lancer un sort")]),
        _vm._v(
          " n'est donc pas nécessairement une action. La plupart des sorts ont un temps d'incantation d'une action, un lanceur de sort utilisera à ce moment une action de combat pour lancer un tel sort."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "se-cacher" } }, [
        _vm._v("Se cacher "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#se-cacher" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Quand vous choisissez l'action "),
          _c("RouterLink", { attrs: { to: "/combattre/#se-cacher" } }, [
            _c("em", [_vm._v("se cacher")])
          ]),
          _vm._v(
            ", vous devez faire un test de Dextérité (Discrétion) pour tenter de vous cacher en suivant les règles appropriées. Si vous réussissez, vous gagnez certains des bénéfices associés à cet état, tels qu'ils sont décrits dans la section "
          ),
          _c("a", { attrs: { href: "#attaquants-et-cibles-invisibles" } }, [
            _c("em", [_vm._v("Attaquants et cibles invisibles")])
          ]),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "se-desengager" } }, [
        _vm._v("Se désengager "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#se-desengager" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Si vous choisissez l'action "),
          _c("RouterLink", { attrs: { to: "/combattre/#se-desengager" } }, [
            _c("em", [_vm._v("se désengager")])
          ]),
          _vm._v(
            ", vous pouvez vous déplacer sans risquer de créer des attaques d'opportunités jusqu'à la fin du tour."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "se-precipiter" } }, [
        _vm._v("Se précipiter "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#se-precipiter" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Quand vous choisissez l'action "),
          _c("RouterLink", { attrs: { to: "/combattre/#se-precipiter" } }, [
            _c("em", [_vm._v("se précipiter")])
          ]),
          _vm._v(
            ", la distance que vous pouvez parcourir est augmentée jusqu'à la fin du tour. Ce bonus de déplacement est égal à votre vitesse, après avoir appliqué tous les modificateurs éventuels. Donc si votre vitesse est de 9 mètres, par exemple, si vous utilisez l'action se précipiter, vous pourrez parcourir 18 mètres lors de votre tour."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Tout effet qui a une incidence positive ou négative sur votre vitesse a le même effet sur votre bonus de déplacement. Par exemple, si votre vitesse est de 9 mètres et qu'elle se trouve réduite à 4,50 mètres, vous ne pourrez parcourir que 9 mètres lors de votre tour en utilisant l'action se précipiter."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "se-tenir-pret" } }, [
        _vm._v("Se tenir prêt "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#se-tenir-pret" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Il peut vous arriver de vouloir surprendre un ennemi ou attendre une configuration particulière avant d'agir. Pour cela, vous devez choisir l'action "
        ),
        _c("em", [_vm._v("se tenir prêt")]),
        _vm._v(
          " pendant votre tour. Cette action vous permet d'utiliser votre réaction avant le début de votre prochain tour."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous devez d'abord décider quelle situation particulière va déclencher votre réaction, puis choisir la façon dont vous réagirez à ce stimulus. Par exemple : « "
        ),
        _c("em", [
          _vm._v(
            "Si le cultiste marche sur cette trappe, je déclenche le levier qui permet de l'ouvrir."
          )
        ]),
        _vm._v(" » Ou : « "),
        _c("em", [_vm._v("Si le pillard s'approche, je m'éloigne")]),
        _vm._v(" ».")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Quand l'événement déclencheur se produit, vous pouvez choisir entre réagir immédiatement après que l'événement s'est produit ou l'ignorer. Gardez en mémoire que vous ne pouvez réagir qu'une fois par round."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("De la même manière, quand vous choisissez l'action "),
          _c("em", [_vm._v("se tenir prêt")]),
          _vm._v(
            " avec un sort, vous le lancez normalement mais vous contenez son énergie, que vous ne relâcherez grâce à votre réaction qu'après que le déclencheur se soit produit. Pour pouvoir être lancé de la sorte, un sort doit avoir un temps d'incantation d'une action et il est impératif de rester concentré pour en contenir l'énergie magique jusqu'au moment où il est finalement lancé. Si votre état de concentration est interrompu, le sort se dissipe et n'a aucun effet. Par exemple, si vous vous concentrez pour contenir le sort "
          ),
          _c("RouterLink", { attrs: { to: "/grimoire/toile-d-araignee/" } }, [
            _c("em", [_vm._v("toile d'araignée")])
          ]),
          _vm._v(" et que vous préparez ensuite le sort "),
          _c("RouterLink", { attrs: { to: "/grimoire/projectile-magique/" } }, [
            _c("em", [_vm._v("projectile magique")])
          ]),
          _vm._v(", le sort "),
          _c("RouterLink", { attrs: { to: "/grimoire/toile-d-araignee/" } }, [
            _c("em", [_vm._v("toile d'araignée")])
          ]),
          _vm._v(
            " se dissipe. Et si vous subissez des dégâts avant d'avoir lancé "
          ),
          _c("RouterLink", { attrs: { to: "/grimoire/projectile-magique/" } }, [
            _c("em", [_vm._v("projectile magique")])
          ]),
          _vm._v(
            " avec votre réaction, cela risque de briser votre concentration."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "utiliser-un-objet" } }, [
        _vm._v("Utiliser un objet "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#utiliser-un-objet" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Normalement, vous interagissez avec un objet en faisant quelque chose d'autre, par exemple quand vous dégainez votre épée dans le cadre de l'action "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#attaquer" } }, [
            _c("em", [_vm._v("attaquer")])
          ]),
          _vm._v(
            ". Quand un objet nécessite une action pour que vous puissiez l'utiliser, vous choisissez l'action "
          ),
          _c("em", [_vm._v("utiliser un objet")]),
          _vm._v(
            ". Cette action se montre aussi pratique quand vous voulez interagir avec plus d'un objet pendant votre tour."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "autre-chose" } }, [
        _vm._v("Autre chose ? "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#autre-chose" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Dans "),
        _c("em", [_c("strong", [_vm._v("Douaratil")])]),
        _vm._v(
          ", la seule limite au jeu est votre imagination. Les précédentes actions résument les principales possibilités qui s'offrent à votre héros lors d'une scène de combat. Mais rien ne vous empêche de faire autre chose : tenter de faire rire votre adversaire, tenter de casser une fiole à sa ceinture, tout est possible. C'est alors au MJ de déterminer les chances de réussite de votre action et de vous demander, s'il le souhaite, un lancer de dés."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "porter-une-attaque" } }, [
        _vm._v("Porter une attaque "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#porter-une-attaque" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Que vous portiez une attaque avec une arme de corps-à-corps, une arme à distance ou que vous fassiez un "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(" dans le cadre d'un sort, cette attaque se décompose ainsi :")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("1. Choisir une cible")]),
        _vm._v(
          ". Choisissez une cible qui se trouve à distance d'attaque : un adversaire, un objet ou un lieu."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("2. Déterminer les modificateurs")]),
          _vm._v(
            ". Le MJ détermine si la cible est à l'abri et si vous bénéficiez d'un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" ou subissez un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(
            " par rapport à elle. Les sorts, capacités spéciales et autres effets peuvent permettre d'appliquer des bonus ou des malus à votre "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("3. Résoudre l'attaque")]),
        _vm._v(
          ". Lancez les dés. Si vous touchez votre cible, vous lancez les dés de dégâts, sauf si les règles de votre attaque précisent autre chose. Certaines attaques ont en effet des effets spécifiques qui viennent s'ajouter aux dégâts ou les remplacer."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Si vous vous demandez si une action que vous êtes en train de faire peut être considérée comme une attaque, rappelez-vous une règle simple : si vous faites un "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(", c'est que vous être en train de faire une attaque.")
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "jets-d-attaque" } }, [
        _vm._v("Jets d'attaque "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#jets-d-attaque" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Quand vous faites une attaque, votre "),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            " permet de déterminer si vous touchez votre cible ou non. Pour faire un "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            ", lancez un 3d6 et ajoutez les modificateurs appropriés, il s'agit de la "
          ),
          _c("strong", [_vm._v("Valeur Offensive (VO)")]),
          _vm._v(
            ". Si le total du dé et des modificateurs est supérieur ou égal à la "
          ),
          _c("strong", [_vm._v("Valeur de défense (VD)")]),
          _vm._v(
            " de votre cible, votre attaque est réussie. La VD d'un personnage est déterminée au moment de sa création, tandis que la VD d'un adversaire est indiquée dans ses statistiques."
          ),
          _c("br"),
          _vm._v(
            "\nLe jet d'attaque peut modifier les dégâts : pour chaque 6 obtenu il est rajouté +1 aux dégâts."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h4", { attrs: { id: "modificateurs-du-jet" } }, [
        _vm._v("Modificateurs du jet "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#modificateurs-du-jet" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Quand un joueur fait un "),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            ", les deux modificateurs les plus courants sont un modificateur de caractéristique et le bonus de maîtrise du personnage. Quand un adversaire porte une attaque, il faut appliquer les modificateurs indiqués dans ses statistiques."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Modificateur de caractéristique")]),
        _vm._v(
          ". Le modificateur de caractéristique utilisé pour une attaque avec une arme de corps-à-corps est la Force. Pour une attaque avec une arme à distance, il s'agit de la Dextérité. Cette règle ne s'applique pas aux armes qui possèdent la propriété finesse ou lancer."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Un "),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            " peut être demandé pour lancer certains sorts. Le modificateur de caractéristique utilisé pour une attaque magique de ce type dépend de la caractéristique d'incantation du lanceur de sorts."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Bonus de maîtrise")]),
          _vm._v(
            ". Quand vous faites une attaque en utilisant une arme que vous maîtrisez, vous ajoutez votre bonus de maîtrise à votre "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(". Il en va de même pour les sorts.")
        ],
        1
      ),
      _vm._v(" "),
      _c("h4", { attrs: { id: "faire-un-triple-1-ou-un-triple-6" } }, [
        _vm._v("Faire un triple 1 ou un triple 6 "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#faire-un-triple-1-ou-un-triple-6" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Parfois, le destin se montre particulièrement cruel ou clément envers un combattant. Et donc, un novice va parfois réussir une attaque très improbable et le vétéran confirmé va rater un coup tout fait."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Si les d6 lancés pour un jet d'attaque donne un résultat de trois 6 \"naturels\" ou plus, l'attaque réussit automatiquement, peu importent les modificateurs ou la VD de la cible. Il s'agit d'un "
        ),
        _c("strong", [_vm._v("coup critique")]),
        _vm._v(", expliqué plus loin dans ce chapitre.")
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Si les d6 lancés pour un jet d'attaque donne un résultat de trois 1 \"naturels\" ou plus, l'attaque échoue automatiquement, peu importent les modificateurs ou la VD de la cible. Il s'agit d'un "
        ),
        _c("strong", [_vm._v("échec critique")]),
        _vm._v(", expliqué plus loin dans ce chapitre.")
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "valeur-de-defense" } }, [
        _vm._v("Valeur de Défense "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#valeur-de-defense" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("La Valeur de Défense (VD) est égale à :"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [
          _vm._v(
            "10 + (Bonus de Dextérité + Bonus de Sagesse) + Bonus (d’armure et bouclier)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "valeur-de-offensive" } }, [
        _vm._v("Valeur de Offensive "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#valeur-de-offensive" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("La Valeur de Offensive (VO) est égale à :"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [
          _vm._v(
            "Bonus de Maîtrise (Si applicable) + Modificateur de caractéristique + Bonus (arme magique par ex)"
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "valeur-de-offensive-globale" } }, [
        _vm._v("Valeur de Offensive globale "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#valeur-de-offensive-globale" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("La Valeur de Offensive globale (VOG) est égale à :"),
        _c("br"),
        _vm._v(" "),
        _c("strong", [
          _vm._v(
            "10 + Bonus de Maîtrise (Si applicable) + Modificateur de caractéristique + Bonus (arme magique par ex)."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "attaquants-et-cibles-invisibles" } }, [
        _vm._v("Attaquants et cibles invisibles "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#attaquants-et-cibles-invisibles" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Les combattants essaient souvent d'échapper à la vigilance de leurs ennemis en se cachant, en lançant un sort d'"
          ),
          _c("RouterLink", { attrs: { to: "/grimoire/invisibilite/" } }, [
            _c("em", [_vm._v("invisibilité")])
          ]),
          _vm._v(" ou en se fondant dans les ténèbres.")
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Quand vous attaquez une cible que vous ne pouvez pas voir, vous subissez un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(" sur le "),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            ". Cette règle s'applique même si vous devinez la position de votre cible ou que vous prenez pour cible une créature que vous pouvez entendre mais que vous ne voyez pas. Si la cible n'est pas à l'endroit que vous avez ciblé, vous ratez automatiquement votre attaque. Cela dit, le MJ vous informe uniquement de l'échec de votre attaque, il ne vous dit pas si vous avez effectivement deviné où se trouvait votre cible ou non."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Quand une créature ne peut pas vous voir, vous bénéficiez d'un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("avantage")])]
          ),
          _vm._v(" quand vous faites un "),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            " la ciblant. Si vous étiez caché (qu'elle ne vous voit pas et ne vous entend pas) et que vous attaquez, quel que soit le résultat de votre attaque, votre position est immédiatement révélée au moment de la résolution de l'attaque."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "attaque-a-distance" } }, [
        _vm._v("Attaque à distance "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#attaque-a-distance" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous faites une attaque à distance quand vous utilisez une arme ou un projectile quelconque qui permet de toucher un ennemi qui se trouve à distance, comme un arc, une arbalète ou une hachette que vous lancez. Un monstre qui projette des épines avec sa queue fait lui aussi une attaque à distance. De nombreux sorts sont également considérés comme des attaques à distance."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "portee" } }, [
        _vm._v("Portée "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#portee" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous ne pouvez faire d'attaque à distance que contre des cibles qui se trouvent à une portée spécifique."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Si seule une portée est indiquée pour une attaque à distance, comme dans la description d'un sort, par exemple, vous ne pouvez pas attaquer une cible qui se trouve à une distance supérieure à cette portée."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Certaines attaques à distance, comme celles faites avec un arc long ou un arc court, ont deux portées qui leurs sont associées. Le plus petit nombre indiqué correspond à la portée normale de l'attaque et le plus grand à la longue portée. Si votre cible se trouve au-delà de la portée normale de votre arme (le petit nombre), vous subissez un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(" sur votre "),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            ". Vous ne pouvez pas attaquer une cible qui se trouve au-delà de la longue portée (le plus grand nombre)."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "h4",
        { attrs: { id: "attaque-a-distance-dans-un-combat-au-corps-a-corps" } },
        [
          _vm._v("Attaque à distance dans un combat au corps-à-corps "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#attaque-a-distance-dans-un-combat-au-corps-a-corps"
              }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Il est plus difficile de faire une attaque à distance si un ennemi est à côté de vous. Quand vous faites une attaque à distance en utilisant une arme, un sort, ou par un autre moyen, vous subissez un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(" sur votre "),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            " si vous vous trouvez dans un rayon de 1,50 mètre d'une créature hostile qui se trouve dans votre champ de vision et qui n'est pas "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#neutralise" } },
            [_c("em", [_vm._v("neutralisée")])]
          ),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "attaque-au-corps-a-corps" } }, [
        _vm._v("Attaque au corps-à-corps "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#attaque-au-corps-a-corps" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Une attaque de corps-à-corps vous permet d'attaquer un ennemi qui se trouve à la portée de votre allonge. Une attaque de corps-à-corps est généralement portée avec une arme tenue à une ou deux mains, comme une épée, un marteau de guerre ou une hache. Les monstres peuvent également attaquer en frappant avec leurs griffes, leurs cornes, leurs dents, leurs tentacules ou tout autre membre. Il existe aussi quelques sorts qui permettent de porter une attaque de corps-à-corps."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("La majorité des créatures possède une "),
        _c("strong", [_vm._v("allonge")]),
        _vm._v(
          " de 1,50 mètre. Elles peuvent donc porter une attaque de corps-à-corps contre les cibles qui se trouvent dans un rayon de 1,50 mètre autour d'elles. Certaines créatures, généralement celles qui sont plus grandes que la taille moyenne, possèdent une allonge qui dépasse 1,50 mètre. C'est alors indiqué dans leur description."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Quand vous êtes au corps-à-corps, vous pouvez aussi porter une "
        ),
        _c("strong", [_vm._v("attaque à mains nues")]),
        _vm._v(
          " au lieu d'utiliser une arme : un coup de poing, de pied, de tête ou un coup similaire (aucune de ces parties du corps n'étant considérée comme une arme). Si vous réussissez, votre attaque à mains nues inflige un nombre de dégâts égal à 1 + votre modificateur de Force. Vous maîtrisez automatiquement les attaques à mains nues."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "attaque-d-opportunite" } }, [
        _vm._v("Attaque d'opportunité "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#attaque-d-opportunite" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Au cœur d'un combat, chacun reste à l'affût d'une chance de frapper un ennemi qui baisse sa garde parce qu'il est en train de fuir ou de passer devant soi. Une telle attaque est appelée une attaque d'opportunité."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous pouvez porter une attaque d'opportunité quand une créature hostile qui se trouve dans votre champ de vision se déplace hors de portée de votre allonge. Pour porter cette attaque d'opportunité, vous utilisez votre réaction pour porter une attaque de corps-à-corps à cette créature. L'attaque intervient juste avant que celle-ci ne se mette hors de votre portée."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Vous pouvez éviter de provoquer une attaque d'opportunité en utilisant l'action "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#se-desengager" } }, [
            _c("em", [_vm._v("se désengager")])
          ]),
          _vm._v(
            ". Vous n'en provoquez pas non plus si quelqu'un ou quelque chose vous fait vous déplacer sans que vous utilisiez votre déplacement, une action ou une réaction. Par exemple, si une explosion vous projette hors de portée d'un ennemi ou si la gravité vous fait chuter à côté d'un ennemi, ces déplacements ne provoquent pas d'attaque d'opportunité de sa part."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h4", { attrs: { id: "combat-a-deux-armes" } }, [
        _vm._v("Combat à deux armes "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#combat-a-deux-armes" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Quand vous choisissez l'action attaquer et que vous utilisez pour attaquer une arme de corps-à-corps légère que vous tenez dans une main, vous pouvez utiliser une action bonus pour attaquer avec une autre arme légère de corps-à-corps que vous tenez dans votre autre main. Vous n'ajoutez pas votre modificateur de caractéristique à cette attaque bonus, sauf si ce modificateur est négatif."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Si l'une ou l'autre des deux armes possède la propriété lancer, vous pouvez la lancer au lieu de l'utiliser pour faire une attaque de corps-à-corps."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "reaction-defensive" } }, [
        _vm._v("Réaction défensive "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#reaction-defensive" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Durant un combat, un personnage à l’opportunité de porter des attaques mais les jets de dés correspondent à celles qui sont censées porter et blesser. Quelqu’un qui subit des attaques peut tenter de s’en soustraire en bloquant ou en esquivant et cela sous forme de réactions (actions gratuites en réponse), pour les différencier des réactions habituelles, elles sont appelées "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/combattre/#reaction-defensive" } },
            [_c("em", [_vm._v("réactions défensives")])]
          ),
          _vm._v(
            ". Pour cela, il faut évidemment être conscient de subir une agression. On peut réaliser une réaction défensives par tranche de 5 points de dextérité soit au commencement 2 en général puis 3 à 15 et 4 à 20. Il est possible de faire une seule tentative par attaque. On ne peut pas par exemple tenter de bloquer et si le test est raté tenter d’esquiver. Une attaque subie entraîne au maximum une seule réaction."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h4", { attrs: { id: "reaction-blocage" } }, [
        _vm._v("Réaction blocage "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#reaction-blocage" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Le blocage est une "),
          _c(
            "RouterLink",
            { attrs: { to: "/combattre/#reaction-defensive" } },
            [_c("em", [_vm._v("réaction défensive")])]
          ),
          _vm._v(
            " désespérées pour éviter un coup. Peu importe la valeur de dextérité par rapport à l’adversaire (contrairement à l’esquive plus bas). Il s’agit d’une parade mais il n’est pas possible de tout parer. Par logique, une attaque à main nue peut être parée à main nue. Si elle est parée avec une arme, les dégâts de base de l’arme s’applique immédiatement.\nUne attaque avec une arme à une main peut être bloquée par une autre arme à une main, une arme à deux mains ou un bouclier."
          ),
          _c("br"),
          _vm._v(
            "\nUne attaque avec une arme à deux mains peut être bloquée avec une autre arme à deux mains ou un bouclier."
          ),
          _c("br"),
          _vm._v(
            "\nUne attaque par arme naturelle (morsure, griffe) peut être bloquée à main nue pour une même catégorie de taille ou inférieure, avec une arme à une main ou à deux main (les dégâts de l’arme s’appliquent immédiatement), pour une même catégorie de taille ou une supérieure, avec un bouclier pour toute catégorie de taille jusqu’à TG (Très Grande). Les créature grandes (G) bousculent et font reculer celui qui se protège derrière son bouclier. Les créatures très grandes (TG) font tomber le défenseur qui devient à terre."
          ),
          _c("br"),
          _vm._v(
            "\nLa blocage stoppe les dommages en réussissant un test de combat contre la Valeur offensive globale (VOG) de l'adversaire. Cette valeur est augmentée de 1 par dés explosif réussi par l'attaquant."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h4", { attrs: { id: "reaction-esquive" } }, [
        _vm._v("Réaction esquive "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#reaction-esquive" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("L’esquive est une "),
          _c(
            "RouterLink",
            { attrs: { to: "/combattre/#reaction-defensive" } },
            [_c("em", [_vm._v("réaction défensive")])]
          ),
          _vm._v(
            ". L’esquive sous forme d’action est décrite plus haut à la section "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#esquiver" } }, [
            _c("em", [_vm._v("esquiver")])
          ]),
          _vm._v(
            ". L’esquive est la meilleure solution dans un combat mais elle nécessite une grande dextérité de la part de celui qui l’utilise car l’attaque doit être anticipée. "
          ),
          _c("strong", [
            _vm._v(
              "Une esquive est utilisable si et seulement si la valeur de dextérité du défenseur est supérieure à la dextérité de l’attaquant"
            )
          ]),
          _vm._v("."),
          _c("br"),
          _vm._v(
            "\nL'esquive ignore les dommages en réussissant un test JS de dextérité contre la Valeur offensive globale (VOG) de l'adversaire."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("div", { staticClass: "hero" }, [
        _c("h3", { attrs: { id: "regle-optionnelle" } }, [
          _vm._v("Règle optionnelle "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: { href: "#regle-optionnelle" }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]),
        _vm._v(" "),
        _c("p", [
          _vm._v(
            "L'utilisation des réactions défensives entraine beaucoup plus de lancer de dés et d'interactions. Cependant, le jeu étant particulièrement mortel avec le système des dés explosifs, il serait injuste d'en priver les joueurs qui peuvent par un lancer de dés bien ajusté se sortir d'une situation périlleuse. "
          ),
          _c("strong", [
            _vm._v(
              "Nous préconisons donc pour améliorer la fluidité du jeu de n'utiliser ces règles que pour les personnages joueurs et les PNJ importants"
            )
          ]),
          _vm._v(
            ". Pour le reste des opposants, la valeur de défense est suffisante pour représenter la capacité de survie de l'adversaire."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "opposition-en-combat" } }, [
        _vm._v("Opposition en combat "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#opposition-en-combat" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Au cours d'une bataille, vos prouesses ne valent que si elles sont supérieures à celles de votre ennemi. Une telle compétition est représentée par une opposition. Cette section présente les oppositions les plus courantes en combat qui nécessitent d'utiliser une action : empoigner ou bousculer une créature. Le MJ peut s'inspirer de ces règles pour improviser d'autres oppositions."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "empoignade" } }, [
        _vm._v("Empoignade "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#empoignade" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Quand vous tentez d'empoigner une créature ou de lutter avec elle, vous utilisez l'action "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#attaquer" } }, [
            _c("em", [_vm._v("attaquer")])
          ]),
          _vm._v(" pour faire une attaque de corps-à-corps spéciale appelée "),
          _c("em", [_vm._v("empoignade")]),
          _vm._v(
            ". Si vous avez la possibilité de faire plusieurs attaques pendant votre action "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#attaquer" } }, [
            _c("em", [_vm._v("attaquer")])
          ]),
          _vm._v(", l'"),
          _c("em", [_vm._v("empoignade")]),
          _vm._v(" remplace l'une d'entre elle.")
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "La cible de votre empoignade ne doit pas faire plus d'une taille de plus que vous et doit se trouver à portée de votre allonge à mains nues. Vous devez avoir au moins une main de libre pour tenter d'empoigner la cible. Pour cela, vous faites un test d'empoignade à la place d'un "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            ". Il s'agit d'un test de Force (Athlétisme) opposé à un test de Force (Athlétisme) ou de Dextérité (Acrobaties) de la cible (celle-ci choisit la caractéristique qu'elle préfère utiliser). Si vous réussissez, votre cible se trouve soumise à l'état "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#empoigne" } },
            [_c("em", [_vm._v("empoigné")])]
          ),
          _vm._v(
            ". La description de cet état indique les conditions qui y mettent fin. En ce qui vous concerne, vous pouvez relâcher votre cible quand vous le voulez et gratuitement (aucune action requise)."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Échapper à une empoignade")]),
          _vm._v(". Une créature "),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#empoigne" } },
            [_c("em", [_vm._v("empoignée")])]
          ),
          _vm._v(
            " peut utiliser une action pour tenter de s'échapper. Elle doit pour cela réussir un test de Force (Athlétisme) ou de Dextérité (Acrobaties) en opposition à un test de Force (Athlétisme) que vous faites."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Déplacer une créature empoignée")]),
        _vm._v(
          ". Quand vous vous déplacez, vous pouvez traîner ou porter la créature que vous avez empoignée, mais votre vitesse est divisée par deux, sauf si la créature fait au moins deux tailles de moins que vous."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "bousculer-un-adversaire" } }, [
        _vm._v("Bousculer un adversaire "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#bousculer-un-adversaire" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Vous pouvez utiliser l'action "),
          _c("RouterLink", { attrs: { to: "/combattre/#attaquer" } }, [
            _c("em", [_vm._v("attaquer")])
          ]),
          _vm._v(
            " pour porter une attaque de corps-à-corps spéciale consistant à bousculer une créature, soit pour la faire tomber "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#a-terre" } },
            [_c("em", [_vm._v("à terre")])]
          ),
          _vm._v(
            ", soit pour la repousser loin de vous. Si vous pouvez accomplir plusieurs attaques pendant votre action attaquer, cette attaque spéciale remplace l'une d'entre elles."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "La cible ne doit pas faire plus d'une taille de plus que vous et doit se trouver à portée de votre allonge. Au lieu de faire un "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            ", vous faites un test de Force (Athlétisme) opposé à un test de Force (Athlétisme) ou à un test de Dextérité (Acrobaties) de la cible (celle-ci choisit la caractéristique qu'elle préfère utiliser). Si vous remportez la confrontation, vous avez le choix entre faire tomber votre cible "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#a-terre" } },
            [_c("em", [_vm._v("à terre")])]
          ),
          _vm._v(" ou la repousser d'1,50 mètre loin de vous.")
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "abri" } }, [
        _vm._v("Abri "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#abri" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les murs, les arbres, les créatures, et d'autres obstacles constituent pendant un combat autant d'abris potentiels qui rendent une cible plus difficile à blesser. Une cible ne bénéficie d'un abri que si une attaque ou un autre effet provient depuis l'autre côté de ce qui sert d'abri."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Il existe plusieurs types d'abris. Si une cible se positionne derrière plusieurs abris, ces derniers ne s'additionnent pas. Seule le meilleur abri, le plus couvrant, est pris en compte. Par exemple, si une cible se trouve derrière une créature qui lui offre un abri partiel et un tronc d'arbre qui lui offre un abri important, on considère que la cible est protégée par un abri important."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Une cible qui bénéficie d'un "),
        _c("strong", [_vm._v("abri partiel")]),
        _vm._v(
          " applique un bonus de +2 à sa VD et à ses jets de sauvegarde de Dextérité. Une cible bénéficie d'un abri partiel si un obstacle protège au moins la moitié de son corps. L'obstacle en question peut être un muret, un grand meuble, un tronc d'arbre étroit ou une créature, que celle-ci soit amie ou ennemie."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Une cible qui bénéficie d'un "),
        _c("strong", [_vm._v("abri important")]),
        _vm._v(
          " applique un bonus de +5 à sa VD et à ses jets de sauvegarde de Dextérité. Une cible bénéficie d'un abri important si un obstacle protège au moins les trois quarts de son corps. L'obstacle en question peut être une herse, une meurtrière ou un épais tronc d'arbre."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Une cible qui bénéficie d'un "),
        _c("strong", [_vm._v("abri total")]),
        _vm._v(
          " ne peut pas être ciblée directement par des attaques ou des sorts. Cela dit, elle peut être affectée par certains sorts qui ont une zone d'effet. Une cible bénéficie d'un abri total si elle est complètement dissimulée par un obstacle."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "degats" } }, [
        _vm._v("Dégâts "),
        _c("a", { staticClass: "header-anchor", attrs: { href: "#degats" } }, [
          _c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Lorsqu'une attaque est réussie, l'adversaire ciblé subit des dégâts. Certaines capacités ou un coup critique peuvent altérer la quantité de dégâts infligés."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "jets-de-degats-ou-degats-fixes" } }, [
        _vm._v("Jets de dégâts ou dégâts fixes "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#jets-de-degats-ou-degats-fixes" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Pour chaque arme, sort ou capacité offensive de monstre, les dégâts infligés sont décrits dans la rubrique correspondante.\nCertains sorts, ou dégâts liés à des chutes ou des expositions à des substances dangereuses infligent des dés de dégât que vous devez lancer (un ou plusieurs d6), vous devez ajouter tous les modificateurs, puis infliger ces dégâts à votre cible. La règle explosive s’applique ici aussi. Les armes magiques, les capacités spéciales et d'autres facteurs peuvent infliger des dégâts bonus. Il est également possible qu'un malus vous fasse infliger un nombre de dégâts égal à 0, mais vous ne pouvez jamais infliger de dégâts négatifs."
        ),
        _c("br"),
        _vm._v(
          "\nLe descriptif d'un sort vous indique quel dé lancer pour calculer les dégâts et si vous devez y ajouter ou non un modificateur."
        ),
        _c("br"),
        _vm._v("\nSi un sort ou un effet inflige des dégâts à "),
        _c("strong", [_vm._v("plus d'une créature")]),
        _vm._v(
          " au même moment, les dégâts sont lancés une seule fois pour toutes les créatures. Par exemple, les dégâts infligés par le sort sont lancés une seule fois pour toutes les créatures qui sont prises dans l'explosion."
        )
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "coups-critiques" } }, [
        _vm._v("Coups critiques "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#coups-critiques" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v("Un "),
        _c(
          "a",
          { attrs: { href: "/tables-de-degats-et-de-coups-critiques" } },
          [_vm._v("coup critique")]
        ),
        _vm._v(
          " est un coup tellement puissant qu’il peut rendre inconscient un adversaire immédiatement ou le tuer sur le coup. Un coup critique est infligé lorsqu’un adversaire subit un montant supérieur à la valeur de sa constitution en un seul coup (on parle de seuil de critique (SC)) ou que l’adversaire subit des dégâts alors qu’il ne lui reste plus de points d’action ou que le résultat du jet d'attaque contient trois 6 au moins. Le coup critique entraine de plus immédiatement une blessure majeure qui est résolue immédiatement dans la section "
        ),
        _c("a", { attrs: { href: "/gerer-la-sante-du-personnage" } }, [
          _vm._v("Gérer la santé du personnage")
        ]),
        _vm._v(".")
      ]),
      _vm._v(" "),
      _c("h4", { attrs: { id: "types-de-degats" } }, [
        _vm._v("Types de dégâts "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#types-de-degats" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Il existe de nombreux types d'attaques, de sorts et d'effets préjudiciables qui infligent différents types de dégâts. Les types de dégâts eux-mêmes n'ont pas de règle de fonctionnement spécifique, mais ils sont liés à d'autres règles, comme la résistance aux dégâts."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Voilà ci-dessous la liste des différents types de dégâts, avec des exemples pour aider le MJ à assigner un type de dégât à un nouvel effet."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Acide")]),
        _vm._v(
          ". Le souffle corrosif et les enzymes dissolvants de certaines créatures infligent des dégâts d'acide."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Contondant")]),
        _vm._v(
          ". Les attaques de force brute – coup de marteau, chute, constriction, etc. – infligent des dégâts contondants."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Feu")]),
        _vm._v(
          ". Certaines créatures crachent du feu et de nombreux sorts permettent d'invoquer des flammes et d'infliger des dégâts de feu."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Force")]),
          _vm._v(
            ". La force est le résultat de l'énergie magique pure, concentrée pour infliger des dégâts. La plupart des effets qui infligent des dégâts de force sont des sorts, notamment "
          ),
          _c("RouterLink", { attrs: { to: "/grimoire/projectile-magique/" } }, [
            _c("em", [_vm._v("projectile magique")])
          ]),
          _vm._v(" et "),
          _c("RouterLink", { attrs: { to: "/grimoire/arme-spirituelle/" } }, [
            _c("em", [_vm._v("arme spirituelle")])
          ]),
          _vm._v(".")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Foudre")]),
        _vm._v(
          ". Un sort d'éclair inflige des dégâts de foudre, tout comme le souffle de certaines créatures."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Froid")]),
        _vm._v(
          ". Le froid infernal qui irradie d'un Diagede et le souffle glacé de certaines créatures infligent des dégâts de froid."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Nécrotique")]),
          _vm._v(
            ". Les dégâts nécrotiques infligés par certains morts-vivants et des sorts comme "
          ),
          _c("RouterLink", { attrs: { to: "/grimoire/contact-glacial/" } }, [
            _c("em", [_vm._v("contact glacial")])
          ]),
          _vm._v(" font se flétrir la matière et même l'âme.")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Perforant")]),
        _vm._v(
          ". Les attaques portées dans le but de percer ou d'empaler, notamment celles portées avec des lances ou par des morsures de monstres, infligent des dégâts perforants."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Poison")]),
        _vm._v(
          ". Les piqûres venimeuses et les gaz toxiques dégagés par le souffle de certaines créatures, par exemple, infligent des dégâts de poison."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Psychique")]),
        _vm._v(
          ". Les capacités mentales de certains monstres infligent des dégâts psychiques."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Radiant")]),
          _vm._v(". Les dégâts radiants infligés par le sort "),
          _c("RouterLink", { attrs: { to: "/grimoire/colonne-de-flamme/" } }, [
            _c("em", [_vm._v("colonne de flamme")])
          ]),
          _vm._v(
            " d'un clerc ou les armes brandies par de certaines créatures brûlent les chairs comme le feu et submergent l'esprit de pouvoir."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _c("strong", [_vm._v("Tonnerre")]),
          _vm._v(". Un bruit commotionnant, comme l'effet du sort "),
          _c("RouterLink", { attrs: { to: "/grimoire/vague-tonnante/" } }, [
            _c("em", [_vm._v("vague tonnante")])
          ]),
          _vm._v(", inflige des dégâts de tonnerre.")
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _c("strong", [_vm._v("Tranchant")]),
        _vm._v(
          ". Les épées, les haches et les griffes des monstres infligent des dégâts tranchants."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "resistance-et-vulnerabilite-aux-degats" } }, [
        _vm._v("Résistance et vulnérabilité aux dégâts "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#resistance-et-vulnerabilite-aux-degats" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Certaines créatures sont particulièrement difficiles ou faciles à blesser selon qu'on leur inflige certains types de dégâts. Il en va de même pour certains objets."
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v("Si une créature ou un objet possède une "),
          _c("strong", [_vm._v("résistance")]),
          _vm._v(
            " à un type de dégâts, les dégâts de ce type qui lui sont infligés sont réduits de moitié."
          )
        ]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Si une créature ou un objet possède une "),
          _c("strong", [_vm._v("vulnérabilité")]),
          _vm._v(
            " à un type de dégâts, les dégâts de ce type qui lui sont infligés sont doublés."
          )
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "La résistance puis la vulnérabilité sont appliqués après tous les autres modificateurs de dégâts. Prenons l'exemple d'une créature résistante aux dégâts contondants. Elle reçoit un coup qui lui inflige 25 dégâts contondants, mais elle se trouve aussi dans l'aire d'effet d'une aura magique qui réduit tous les dégâts de 5. Les dégâts qu'elle reçoit (25) sont donc d'abord réduits de 5 (donc ramenés à 20) puis divisés par deux. La créature subit donc 10 dégâts."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Si une créature ou un objet possède plusieurs fois une résistance ou une vulnérabilité à un même type de dégât, cette spécificité n'est prise en compte qu'une seule fois. Par exemple, si une créature possède une résistance aux dégâts de feu ainsi qu'une résistance à tous les dégâts non-magiques, les dégâts qu'elle subit d'un feu non-magique sont réduits de moitié et non de trois quarts."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "assommer-un-adversaire" } }, [
        _vm._v("Assommer un adversaire "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#assommer-un-adversaire" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Parfois, un attaquant souhaite neutraliser un ennemi plutôt que le tuer. Quand il réussit à faire tomber cette créature à 0 point d'action suite à une attaque de corps-à-corps, il a la possibilité de l'assommer. L'attaquant peut faire ce choix au moment d'infliger les dégâts. L'adversaire est "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#inconscient" } },
            [_c("em", [_vm._v("inconscient")])]
          ),
          _vm._v(
            " s'il échoue un JS de CON(stitution) DD 16 et est considérée comme stabilisée."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("h2", { attrs: { id: "combat-monte" } }, [
        _vm._v("Combat monté "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#combat-monte" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Une personne qui charge en plein cœur de la bataille sur son cheval de guerre bénéficie de la vitesse et de la mobilité de leur monture."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Une créature consentante qui fait au minimum une taille de plus qu'un personnage et qui a une anatomie appropriée peut être utilisée comme monture en suivant les règles suivantes."
        )
      ]),
      _vm._v(" "),
      _c("h3", { attrs: { id: "monter-et-descendre-de-sa-monture" } }, [
        _vm._v("Monter et descendre de sa monture "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#monter-et-descendre-de-sa-monture" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Au cours de votre déplacement, vous pouvez descendre de votre monture ou monter sur celle-ci si elle se trouve dans un rayon de 1,50 mètre de vous. Vous ne pouvez accomplir ce déplacement spécial qu'une fois par tour et il vous coûte la moitié de votre vitesse. Par exemple, si votre vitesse est de 9 mètres, vous devez utiliser 4,50 mètres de votre jauge de déplacement pour monter à cheval. Vous ne pourrez par monter à cheval s'il vous reste moins de 4,50 mètres ou si votre vitesse est réduite à 0."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Si un effet a pour conséquence de faire se déplacer votre monture contre sa volonté pendant que vous la chevauchez, vous devez réussir un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#jets-de-sauvegarde"
              }
            },
            [_vm._v("jet de sauvegarde")]
          ),
          _vm._v(
            " de Dextérité DD 10 pour éviter de tomber de celle-ci et de vous retrouver "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#a-terre" } },
            [_c("em", [_vm._v("à terre")])]
          ),
          _vm._v(
            " dans un rayon de 1,50 mètre de votre monture. Vous devez faire un test similaire si on tente de vous jeter "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#a-terre" } },
            [_c("em", [_vm._v("à terre")])]
          ),
          _vm._v(" pendant que vous êtes encore sur votre monture.")
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Si votre monture est jetée "),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#a-terre" } },
            [_c("em", [_vm._v("à terre")])]
          ),
          _vm._v(
            ", vous pouvez utiliser votre réaction pour en descendre et retomber sur vos pieds pendant qu'elle chute. Sinon, vous démontez de votre monture et tombez "
          ),
          _c(
            "RouterLink",
            { attrs: { to: "/gerer-la-sante-du-personnage/#a-terre" } },
            [_c("em", [_vm._v("à terre")])]
          ),
          _vm._v(" dans un rayon de 1,50 mètre autour de votre monture.")
        ],
        1
      ),
      _vm._v(" "),
      _c("h3", { attrs: { id: "controler-sa-monture" } }, [
        _vm._v("Contrôler sa monture "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#controler-sa-monture" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Tant que vous êtes sur le dos de votre monture, vous avez deux options : soit vous pouvez contrôler vous-même votre monture, soit vous la laissez agir à sa guise. Les créatures intelligentes, comme certaines montures, restent toujours libres de leurs actions."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v(
            "Vous ne pouvez contrôler une monture que si elle a été entraînée à accepter un cavalier. On considère que les chevaux domestiqués, les ânes et les créatures similaires ont déjà été dressés quand votre personnage les monte. L'initiative d'une monture que vous contrôlez se calque sur la vôtre, à partir du moment où vous montez sur son dos. Elle se déplace en fonction de vos indications et a le choix entre trois actions possibles en combat : "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#se-precipiter" } }, [
            _c("em", [_vm._v("se précipiter")])
          ]),
          _vm._v(", "),
          _c("RouterLink", { attrs: { to: "/combattre/#se-desengager" } }, [
            _c("em", [_vm._v("se désengager")])
          ]),
          _vm._v(" et "),
          _c("RouterLink", { attrs: { to: "/combattre/#esquiver" } }, [
            _c("em", [_vm._v("esquiver")])
          ]),
          _vm._v(
            ". Une monture contrôlée peut bouger et agir même durant le tour où vous montez dessus."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Une monture indépendante conserve une place propre dans l'ordre d'initiative. Le fait qu'elle porte un cavalier ne limite pas ses actions. Elle se déplace et agit à son gré. Une telle monture peut éventuellement fuir un combat, se jeter dans le cœur de la mêlée, dévorer un ennemi gravement blessé, ou tout simplement agir à l'encontre de vos souhaits."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Dans tous les cas, si votre monture provoque une attaque d'opportunité pendant que vous êtes sur son dos, l'attaquant peut choisir de vous cibler ou de cibler votre monture."
        )
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "combat-sous-marin" } }, [
        _vm._v("Combat sous-marin "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#combat-sous-marin" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Quand les aventuriers affrontent des requins au cœur d'une épave antique ou se trouvent dans une salle de donjon inondée, ils sont contraints de se battre dans un environnement difficile. Sous l'eau, les règles suivantes s'appliquent."
        )
      ]),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Quand elle porte une "),
          _c("strong", [_vm._v("attaque de corps-à-corps")]),
          _vm._v(
            ", une créature qui n'a pas de vitesse de nage (qu'elle soit d'origine naturelle ou magique) subit un "
          ),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(" sur son "),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(
            ", sauf si elle utilise une dague, une javeline, une épée courte, une lance ou un trident."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c(
        "p",
        [
          _vm._v("Une "),
          _c("strong", [_vm._v("attaque à distance")]),
          _vm._v(
            " manque automatiquement une cible qui se trouve au-delà de la portée normale de l'arme. Et même contre une cible qui se trouve à portée normale de l'arme, le "
          ),
          _c("RouterLink", { attrs: { to: "/combattre/#jets-d-attaque" } }, [
            _vm._v("jet d'attaque")
          ]),
          _vm._v(" de la créature attaquante subit un "),
          _c(
            "RouterLink",
            {
              attrs: {
                to: "/utiliser-les-caracteristiques/#avantage-et-desavantage"
              }
            },
            [_c("em", [_vm._v("désavantage")])]
          ),
          _vm._v(
            ", sauf si elle utilise une arbalète, un filet ou une arme de lancer comme une javeline (ou une lance, un trident ou une fléchette)."
          )
        ],
        1
      ),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Les créatures et les objets complètement immergés sont résistants aux dégâts de feu."
        )
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}