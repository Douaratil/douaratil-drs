{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/tables-de-degats-et-de-coups-critiques/README.md?vue&type=template&id=6e85edee&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/tables-de-degats-et-de-coups-critiques/README.md","mtime":1638362994043},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ContentSlotsDistributor",
    { attrs: { "slot-key": _vm.$parent.slotKey } },
    [
      _c("h2", { attrs: { id: "coups-critiques" } }, [
        _vm._v("Coups critiques "),
        _c(
          "a",
          { staticClass: "header-anchor", attrs: { href: "#coups-critiques" } },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Vous avez l'impression que le jeu devient ennuyeux ? Vous avez l'impression que les combats ne présentent aucune menace réelle ? Ces tables ajouteront de la vie et de la surprise au jeu.  Bien sûr, certains joueurs vont se plaindre que l'idée d'un sale voleur obtienne une mort instantanée contre leur guerrier ou mage de 20ème niveau est stupide mais est-ce vraiment le cas ? La chance est un facteur de combat, ces tables ne font que la répartir davantage. Avec les bons et les mauvais jets, nous avons appris à apprécier les critiques et les maladresses."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Ces règles viennent se rajouter à celles qui existent déjà et ne sont qu'optionnelles."
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Comment cela fonctionne : Quand un joueur ou un monstre fait un jet d'attaque, il y a une chance de faire un critique ou une maladresse. Le coup critique est obtenu de trois manières :"
        )
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "obtenir au moins trois 6 dans une attaque (y compris l'incantation d'un sort qui inflige des dégâts)."
          )
        ]),
        _vm._v(" "),
        _c("li", [_vm._v("Dépasser le seuil de critique.")]),
        _vm._v(" "),
        _c("li", [
          _vm._v("Infliger des coups à un adversaire qui a 0 point d'action.")
        ])
      ]),
      _vm._v(" "),
      _c("p", [
        _vm._v(
          "Le jet effectué sur la table varie selon l'origine des dégâts.\nLes armes courantes lancent 2d6."
        ),
        _c("br"),
        _vm._v("\nLes armes de guerres lancent 3d6."),
        _c("br"),
        _vm._v(
          "\nSi trois 1 sont obtenus sur le test de toucher c'est une maladresse (un jet de maladresse peut être aussi demandé dans le cadre des jets critiques).\nSi trois 6 sont obtenus sur le test de toucher pour le critique."
        )
      ]),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Types")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dés")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Armes courantes")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("2d6")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Armes de guerres")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("3d6")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Armes magiques")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+1d6")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Armes sacrées")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+2d6")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Armes tueuses")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("+3d6")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("ul", [
        _c("li", [
          _vm._v(
            "Éléments entre parenthèses : Un (casque) ou un (bouclier) à côté d'un résultat critique signifie que si la cible possède l'objet approprié, l'effet ne se produit pas."
          )
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "coups-critiques-2" } }, [
        _vm._v("Coups critiques "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#coups-critiques-2" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "https://www.douaratil.fr/illustrations/regles/coupcritique.jpg",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("img", {
              attrs: {
                src:
                  "https://www.douaratil.fr/illustrations/regles/coupcritiquem.png",
                alt: "Coups critiques"
              }
            }),
            _c("OutboundLink")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: {
            id:
              "jets-critiques-tranchants-contondants-perforants-contre-les-grandes-creatures-contre-les-tres-grandes-creatures-et-creatures-gigantesques"
          }
        },
        [
          _vm._v(
            "Jets critiques Tranchants, contondants, perforants, contre les grandes créatures, contre les très grandes créatures et créatures gigantesques. "
          ),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#jets-critiques-tranchants-contondants-perforants-contre-les-grandes-creatures-contre-les-tres-grandes-creatures-et-creatures-gigantesques"
              }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]
      ),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Jet")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tranchant")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("contondant")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Perforant")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Contre Grandes Créatures")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Contre Très grandes & Gigantesques")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("2-4")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +5 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +5 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +6 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +10 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +15 dgts")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("5-8")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +10 dgts, arrachage du bouclier (6)")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +11 dgts, arrachage du bouclier (6)")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant (bouclier), +9 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +15 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +20 dgts")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("9-12")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, + 15 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, + 16 dgts, adv étourdi 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, + 13 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +20 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +30 dgts")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("13")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Main, -1 au combat, +5 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Main, -2 au combat, +4 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Main, -3 au combat, +3 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Membre supérieur, -1 au combat, +10 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Membre supérieur, -1 au combat, +15 dgts")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("14")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main, plaie ouverte (blessure mineure), -1 au combat, +10 dgts, 1 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Main, (fracture mineure), -1 au combat, +12 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main transpercée (blessure mineure), -2 au combat, +9 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Membre supérieur transpercé (blessure mineure), -2 au combat, +15 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Membre supérieur transpercé (blessure mineure), -2 au combat, +25 dgts"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("15")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied,  (blessure mineure) 1/2 mvt, +5 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (blessure mineure) 1/2 mvt, +7 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied,  (blessure mineure) 1/2 mvt, +5 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied,  (blessure mineure) 1/2 mvt, +15 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (blessure mineure) 1/2 mvt, +20 dgts")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("16")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Pied, plaie ouverte (blessure mineure), 1/2 mvt, +10 dgts, 1 PA/ rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied (fracture mineure), 1/2 mvt, +12 dgts, étourdi 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied (blessure mineure), 1/2 mvt, +9 dgts, 2 PA/rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied (blessure mineure), 1/2 mvt, +20 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied (blessure mineure), 1/2 mvt, +25 dgts")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("17")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Cuisse,  (blessure mineure) 1/2 mvt, +15 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Cuisse,  (blessure mineure) 1/2 mvt, +17 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Cuisse,  (blessure mineure) 1/2 mvt, +12 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Cuisse,  (blessure mineure) 1/2 mvt, +22 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Cuisse,  (blessure mineure) 1/2 mvt, +32 dgts")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("18")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Thorax, plaie ouverte (blessure mineure), + 10 dgts, 2 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Thorax (fracture mineure), + 12 dgts, étourdit 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Thorax, plaie ouverte (blessure mineure), + 9 dgts, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Thorax, plaie ouverte (blessure mineure), + 15 dgts, 5 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Thorax, plaie ouverte (blessure mineure), + 25 dgts, 7 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("19")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, plaie ouverte (blessure mineure), -1 au combat, +15 dgts, 2 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen (fracture mineure), -1 au combat, +17 dgts, étourdi 2 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, plaie ouverte (blessure mineure), -2 au combat, +12 dgts, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, plaie ouverte (blessure mineure), -1 au combat, +20 dgts, 4 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, plaie ouverte (blessure mineure), -1 au combat, +25 dgts, 6 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("20")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, frappe au ventre, la lame sort de l'autre côté de l'adversaire, Mort en 1d6 rounds, +1 à la prochaine attaque et  à l'initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, frappe au ventre, dégâts internes massifs, Mort en 1d6 rounds, +1 à la prochaine attaque et à l’initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, perforaton au ventre, la lame sort de l'autre côté de l'adversaire, Mort en 1d6 rounds, +1 à la prochaine attaque et à l’initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, frappe au ventre, +30 dgts, Mort en 1d6 rounds (agit normalement jusque là), +1 à la prochaine attaque et à l’initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, frappe au ventre,  +40 dgts, Mort en 1d6 rounds (agit normalement jusque là), +1 à la prochaine attaque et à l’initiative."
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("21")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, plaie ouverte (blessure mineure), -2 au combat, +12 dgts, 2 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, plaie ouverte (fracture mineure), -2 au combat, +15 dgts, étourdi 2rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, plaie ouverte (blessure mineure), -2 au combat, +10 dgts, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, plaie ouverte (blessure mineure), -2 au combat, +17 dgts, 4 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, plaie ouverte (blessure mineure), -2 au combat, +27 dgts, 8 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("22")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe, plaie ouverte (blessure majeure), étourdi 4 rds, +12 dgts, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe, plaie ouverte (fracture majeure), étourdi 6 rds, +16 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe, plaie ouverte (blessure majeure), étourdi 2 rds, +10 dgts, 5 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe, plaie ouverte (blessure majeure), étourdi 4 rds, +17 dgts, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe, plaie ouverte (blessure majeure), étourdi 4 rds, +27 dgts, 9 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("23")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, arrachage du bouclier (5-6) ou de l'arme (4-6), + 10 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, arrachage du bouclier (4-6) ou de l'arme (3-6), + 15 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, arrachage du bouclier (6) ou de l'arme (5-6), + 8 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Bras + 20 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Bras + 30 dgts")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("24")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +8 dgts, étourdi 4 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +12 dgts, étourdi 6 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +7 dgts, étourdi 2 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +18 dgts, étourdi 2 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +23 dgts, étourdi 4 rds")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("25")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen cisaillé, intestins sortent par la plaie, mort en 1d6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen cisaillé, intestins sortent par la plaie, mort en 1d6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen cisaillé, intestins sortent par la plaie, mort en 1d6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen cisaillé, intestins sortent par la plaie, mort en 1d6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen cisaillé, intestins sortent par la plaie, mort en 1d6 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("26")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge cisaillée (blessure majeure), cordes vocales touchées, plus de voix pendant 1d6 jours, +7 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge (fracture majeure), cordes vocales touchées, plus de voix pendant 1d6 jours, +9 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge cisaillée (blessure majeure), cordes vocales touchées, plus de voix pendant 1d6 jours, +5 dgts, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge cisaillée (blessure majeure), cordes vocales touchées, plus de voix pendant 1d6 jours, +12 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge cisaillée (blessure majeure), cordes vocales touchées, plus de voix pendant 1d6 jours, +22 dgts"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("27")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (blessure majeure), +5 dgts, 5 PA/rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (blessure majeure), +8 dgts, étourdis 5 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (blessure majeure), +4 dgts, 6 PA/rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (blessure majeure), +15 dgts, 10 PA/rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (blessure majeure), +20 dgts, 15 PA/rds")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("28")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (blessure majeure), inconscient 1d6 heures, + 20 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (blessure majeure), inconscient 2d6 heures, + 25 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (blessure majeure), inconscient 1d3 heures, + 15 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Nuque, trauma crânien (blessure majeure), + 30 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Nuque, trauma crânien (blessure majeure), + 40 dgts")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("29")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos lacéré (blessure majeure), + 12 dgts, étourdi 6 rds, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos (blessure majeure), + 16 dgts, étourdi 9 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos lacéré (blessure majeure), + 9 dgts, étourdi 4 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos lacéré (blessure majeure), + 17 dgts, étourdi 2 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos lacéré (blessure majeure), + 22 dgts, étourdi 4 rds, 9 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("30")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge tranchée, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge enfoncée, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge transpercée, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge tranchée, Mort en 1d6 rounds (agit normalement jusque là), +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge tranchée, Mort en 1d6 rounds (agit normalement jusque là), +3 init pour le rd suivant"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("31")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main lacérée (blessure majeure), + 8 dgts, étourdi 2 rds, 4 PA/rd, lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main (frature majeure), + 14 dgts, étourdi 4 rds, lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main lacérée (blessure majeure), + 6 dgts, étourdi 1 rds, 6 PA/rd, lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main (blessure majeure), + 18 dgts, étourdi 1 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main lacérée (blessure majeure), + 25 dgts, étourdi 2 rds, 10 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("32")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse lacérée (blessure majeure) 1/2 mvt, + 8 dgts, étourdi 3 rds, 5 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse (fracture majeure) 1/2 mvt, + 15 dgts, étourdi 5 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse transpercée (blessure majeure) 1/2 mvt, + 6 dgts, étourdi 2 rds, 7 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse lacérée (blessure majeure) 1/2 mvt, + 13 dgts, étourdi 1 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse lacérée (blessure majeure) 1/2 mvt, + 18 dgts, étourdi 2 rds, 8 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("33")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule lacérée (blessure majeure), + 10 dgts, étourdi 4 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Épaule (fracture majeure), + 15 dgts, étourdi 6 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule (blessure majeure), + 7 dgts, étourdi 2 rds, 8 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule (blessure majeure), + 15 dgts, étourdi 2 rds, 10 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule lacérée (blessure majeure), + 20 dgts, étourdi 1 rds, 12 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("34")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine transpercée (blessure majeure), + 15 dgts, étourdi 5 rds, 8 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Poitrine (blessure majeure), + 20 dgts, étourdi 8 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine transpercée (blessure majeure), + 12 dgts, étourdi 2 rds, 10 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine transpercée (blessure majeure), + 25 dgts, étourdi 2 rds, 16 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine transpercée (blessure majeure), + 35 dgts, étourdi 2 rds, 20 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("35")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +15 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +20 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +12 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +25 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +35 dgts"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("36")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure) +20 dgts, étourdi 10 rds (casque, sinon +10 dgts et étourdi 3 rds)"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure) +25 dgts, étourdi 15 rds (casque sinon +10 dgts et étourdi 6 rds)"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure) +15 dgts, étourdi 6 rds (casque, sinon +10 dgts et étourdi 1 rds)"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure) +30 dgts, étourdi 5 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure) +40 dgts, étourdi 3 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("37")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure), casque arrachée, +20 dgts, étourdi 10 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure), casque arrachée, +25 dgts, étourdi 12 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure), casque arrachée, +15 dgts, étourdi 8 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure), +30 dgts, étourdi 5 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure), +40 dgts, étourdi 2 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("38")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez lacéré qui ne tient plus qu'à un lambeau de chair (blessure majeure), +20 dgts, 10 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez écrasé qui ne tient plus qu'à un lambeau de chair (blessure majeure), +25 dgts, étourdi 10 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez lacéré qui ne tient plus qu'à un lambeau de chair (blessure majeure), +15 dgts, 12 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, nez lacéré(blessure majeure), +30 dgts, 10 PA/rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, nez lacéré(blessure majeure), +45 dgts, 10 PA/rd")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("39")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("40+")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, décapitation, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête enfoncée, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, transperçée, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort instantanée, +5 init pour le rd suivant")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort instantanée, +5 init pour le rd suivant")
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c("h2", { attrs: { id: "coups-critiques-3" } }, [
        _vm._v("Coups critiques "),
        _c(
          "a",
          {
            staticClass: "header-anchor",
            attrs: { href: "#coups-critiques-3" }
          },
          [_c("i", { staticClass: "v-icon notranslate mdi mdi-link-variant" })]
        )
      ]),
      _vm._v(" "),
      _c("p", [
        _c(
          "a",
          {
            attrs: {
              href:
                "https://www.douaratil.fr/illustrations/regles/coupcritique2.jpg",
              target: "_blank",
              rel: "noopener noreferrer"
            }
          },
          [
            _c("img", {
              attrs: {
                src:
                  "https://www.douaratil.fr/illustrations/regles/coupcritique2m.png",
                alt: "Coups critiques"
              }
            }),
            _c("OutboundLink")
          ],
          1
        )
      ]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: {
            id: "jets-critiques-de-feu-de-froid-foudre-radiant-tonnerre"
          }
        },
        [
          _vm._v("Jets critiques de feu, de froid, foudre, radiant, tonnerre "),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href: "#jets-critiques-de-feu-de-froid-foudre-radiant-tonnerre"
              }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]
      ),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Jet")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Feu")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Froid")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Foudre")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Radiant")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tonnerre")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("2-4")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Chaleur intense, +6 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Froid intense, +4 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Charge intense, +5 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Lumière intense, +2 dgts, aveuglé 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Détonation intense, +3 dgts, assourdi 1 rd")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("5-8")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Chaleur intense, +11 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Froid intense, +9 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Charge intense, +10 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Lumière intense, +4 dgts aveuglé 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Détonation intense, +6 dgts, assourdi 1 rd")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("9-12")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Chaleur intense, + 16 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Froid intense, + 14 dgts, adv étourdi 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Charge intense, + 15 dgts aveuglé 2 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Lumière intense, +8 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Détonation intense, +12 dgts, assourdi 2 rds")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("13")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Brûlure à la main, -1 au combat, +6 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Gelure à la main, -2 au combat, +4 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Charge électrique à la Main, -1 au combat, +5 dgts, étourdi 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Flash lumineux à la Main, -1 au combat, +2 dgts, aveuglé 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Détonation au niveau de la main, -1 au combat, +3 dgts, assourdi 1 rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("14")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Main, (brûlure mineure), -1 au combat, +8 dgts, 1 PA/rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Main, (gelure mineure), -1 au combat, +6 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Charge électrique à la Main (blessure mineure), -2 au combat, +7 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Flash lumineux à la Main (blessure mineure), -2 au combat, +4 dgts aveuglé 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Détonation au niveau de la main (blessure mineure), -2 au combat, +3 dgts, assourdi 1 rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("15")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (brûlure mineure), 1/2 mvt, +5 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (gelure mineure), 1/2 mvt, +3 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (brûlure mineure), 1/2 mvt, +4 dgts, étourdi 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Flash lumineux au pied, (blessure mineure), 1/2 mvt, +1 dgts, aveuglé 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Détonation au pied, (blessure mineure), 1/2 mvt, +2 dgts, aveuglé 1 rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("16")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (brûlure mineure), 1/2 mvt, +10 dgts, 1 PA/ rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (gelure mineure), 1/2 mvt, +8 dgts, 1 PA/ rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (brûlure mineure), 1/2 mvt, +9 dgts, étourdi 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Flash lumineux au pied, (blessure mineure), 1/2 mvt, +2 dgts, aveuglé 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Détonation au pied, (blessure mineure), 1/2 mvt, +4 dgts,assourdi rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("17")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Cuisse, (brûlure mineure), 1/2 mvt, +13 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Cuisse, (gelure mineure), 1/2 mvt, +11 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse, (brûlure mineure), 1/2 mvt, +12 dgts, étourdi 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse, (blessure mineure), 1/2 mvt, +3 dgts, aveuglé 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse, (blessure mineure), 1/2 mvt, +6 dgts, assourdi 1 rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("18")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Thorax (brûlure mineure), + 11 dgts, 2 PA/rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Thorax (gelure mineure), + 9 dgts, 2 PA/rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Thorax (brûlure mineure), + 10 dgts, étourdi 2 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Thorax (blessure mineure), + 3 dgts, aveuglé 2 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Thorax (blessure mineure), + 5 dgts, assourdi 2 rds")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("19")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen (brûlure mineure), -1 au combat, +16 dgts, 2 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, plaie (gelure mineure), -1 au combat, +14 dgts, 2 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, (brûlure mineure), -1 au combat, +15 dgts, étourdi 2 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, (blessure mineure), -1 au combat, +4 dgts, aveuglé 2 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen (blessure mineure), -1 au combat, +8 dgts, assourdi 2 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("20")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, explosion, il est possible de voir au travers, Mort en 2 rounds, +1 à la prochaine attaque et  à l'initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, ventre gelé profondément, Mort en 3 rounds, +1 à la prochaine attaque et  à l'initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, organes bouillis, une vapeur nauséabonde s'échappe, Mort en 1d6 rounds, +1 à la prochaine attaque et  à l'initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, adversaire se sépare en deux dans une grande lumière, Mort en 1d6 rounds, +1 à la prochaine attaque et  à l'initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, explosion éparpillant les organes et intestins sur 1d6 mètres, Mort immédiate, +1 à la prochaine attaque et  à l'initiative."
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("21")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête (brûlure mineure), -2 au combat, +13 dgts, 2 PA/rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête (gelure mineure), -2 au combat, +11 dgts, 2 PA/rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête (brûlure mineure), -2 au combat, +12 dgts, étourdi 2 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête flash (blessure mineure), -2 au combat, +4 dgts, aveuglé 2 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête détonation (blessure mineure), -2 au combat, +8 dgts, assourdi 2 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("22")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe (brûlure majeure, plus de barbe ni de cheveux sur la face de l'impact), étourdi 4 rds, +13 dgts, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe (gelure majeure), oreille gelée étourdi 4 rds, +11 dgts, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tempe (brûlure majeure), étourdi 8 rds, +12 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe flash (blessure majeure), étourdi 6 rds, +4 dgts, aveuglé 2 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe, détonation (blessure majeure), étourdi 6 rds, +8 dgts, surdité pour une journée"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("23")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, explosion, arrachage du bouclier (5-6) ou de l'arme (4-6), + 11 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, glaciation, arrachage du bouclier (5-6) ou de l'arme (4-6), + 19 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, arc éléctrique, arrachage du bouclier (5-6) ou de l'arme (4-6), + 10 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, flash, arrachage du bouclier (5-6) ou de l'arme (4-6), + 3 dgts, aveuglé 2 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, détonation, arrachage du bouclier (5-6) ou de l'arme (4-6), + 6 dgts, assourdi 2 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("24")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +9 dgts, étourdi 4 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +7 dgts, étourdi 4 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +8 dgts, étourdi 6 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +2 dgts, aveuglé 4 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +8 dgts, assourdi 4 rds")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("25")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Abdomen brûlé, viscères visibles, mort en 1d6 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Abdomen gelé, organes internes congelés, mort en 1d6 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen électrocuté, intestins sortent par la plaie, mort en 1d6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Abdomen flash, mort en 1d6 rds suite à dommages internes")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen détonation, mort en 1d6 rds suite à dommages internes"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("26")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge (brûlure majeure), cordes vocales touchées, plus de voix pendant 1d6 jours, +8 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge (gelure majeure), cordes vocales touchées, plus de voix pendant 1d6 jours, +6 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge (blessure majeure), cordes vocales touchées, plus de voix pendant 1 jours, +7 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge flash (blessure majeure), cordes vocales touchées, plus de voix pendant 1d6 jours, +1 dgts, aveuglé 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge détonation (blessure majeure), cordes vocales touchées, plus de voix pendant 1d6 jours, +3 dgts, assourdi 1 rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("27")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (brûlure majeure), +6 dgts, 5 PA/rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (gelure majeure), +4 dgts, 5 PA/rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (brûlure majeure), +5 dgts, 5 PA/rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (blessure majeure), +2 dgts, aveuglé 5 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (blessure majeure), +4 dgts, assourdi 5 rds")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("28")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (brûlure majeure), inconscient 1d6 heures, + 24 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (gelure majeure), inconscient 1d6 heures, + 26 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (brûlure majeure), inconscient 1d6 heures, + 20 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (blessure majeure), aveuglé 1d6 heures, + 5 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (blessure majeure), assourdi 1d6 heures, + 10 dgts"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("29")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos brûlé (brûlure majeure), + 13 dgts, étourdi 6 rds, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos gelé (gelure majeure), + 11 dgts, étourdi 6 rds, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos brûlé (brûlure majeure), + 12 dgts, étourdi 6 rds, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos flash sourd et intense (blessure majeure), + 4 dgts, étourdi 6 rds, aveuglé 3 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos détonation (blessure majeure), + 8 dgts, étourdi 6 rds, assourdi 3 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("30")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge brûlée, vertèbres fusionnées, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge gelée, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge ouverte, arcs électriques entre les dents, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge ouverte dans un grand flash, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge ouverte dans un grand bruit, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("31")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main brûlée (brûlure majeure), + 9 dgts, étourdi 2 rds, 4 PA/rd, lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main gelée (gelure majeure), + 7 dgts, étourdi 2 rds, 4 PA/rd, lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main électrifiée (brûlure majeure), + 8 dgts, étourdi 2 rds, 4 PA/rd, lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main flash (blessure majeure), + 2 dgts, étourdi 2 rds, aveuglé, 4 rds lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main flash (blessure majeure), + 4 dgts, étourdi 2 rds, assourdi 4 rds, lâche l'arme tenue en main"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("32")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse brûlée (brûlure majeure) 1/2 mvt, + 8 dgts, étourdi 3 rds, 5 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse gelée (gelure majeure) 1/2 mvt, + 7 dgts, étourdi 3 rds, 4 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse brûlée (brûlure majeure) 1/2 mvt, + 8 dgts, étourdi 3 rds, 5 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse flash (blessure majeure) 1/2 mvt, + 2 dgts, étourdi 3 rds, aveuglé 5 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse détonation (blessure majeure) 1/2 mvt, + 4 dgts, étourdi 3 rds, assourdi 5 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("33")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule brûlée (brûlure majeure), + 11 dgts, étourdi 4 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule gelure (gelure majeure), + 9 dgts, étourdi 4 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule brûlée (brûlure majeure), + 10 dgts, étourdi 4 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule falsh (blessure majeure), + 3 dgts, étourdi 4 rds, aveulgé 6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule détonation (blessure majeure), + 6 dgts, étourdi 4 rds, assourdi 6 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("34")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine (brûlure majeure), + 16 dgts, étourdi 5 rds, 8 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine (gelure majeure), + 14 dgts, étourdi 6 rds, 8 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine (brûlure majeure), + 15 dgts, étourdi 5 rds, 8 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine flash (blessure majeure), + 5 dgts, étourdi 5 rds, aveuglé 8 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine détonation (blessure majeure), + 10 dgts, étourdi 5 rds, assourdi 8 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("35")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((brûlure majeure), perception visuelle avec un désavantage jusqu'à guérison, +16 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((gelure majeure), perception visuelle avec un désavantage jusqu'à guérison, +14 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((brûlure majeure), perception visuelle avec un désavantage jusqu'à guérison, +15 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +5 dgts, aveuglé 5 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +10 dgts, assourdi 5 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("36")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille carbonisée (brûlure majeure) +24 dgts, étourdi 10 rds (casque, sinon +14 dgts et étourdi 3 rds)"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille explose en petits morceaux scintillants (blessure majeure) +16 dgts, étourdi 10 rds (casque, sinon +6 dgts et étourdi 3 rds)"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille vaporisée (blessure majeure) +20 dgts, étourdi 15 rds (casque, sinon +10 dgts et étourdi 6 rds)"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure) +5 dgts, étourdi 10 rds (casque, sinon +2 dgts et étourdi 3 rds), aveuglé 5 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure) +10 dgts, étourdi 10 rds (casque, sinon +4 dgts et étourdi 3 rds), assourdi 5 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("37")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille carbonisée (brûlure majeure), casque arraché, +24 dgts, étourdi 10 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille congelée (gelure majeure), casque arrachée, +16 dgts, étourdi 12 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille vaporisée (blessure majeure), casque arrachée, +20 dgts, étourdi 15 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure), casque arrachée, +7 dgts, étourdi 10 rds, aveuglé 6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure), casque arrachée, +14 dgts, étourdi 10 rds, assourdi 6 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("38")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez carbonisé qui ne tient plus qu'à un lambeau de chair en charbon (blessure majeure), +24 dgts, 10 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez gelé qui ne tient plus qu'à un lambeau de chair en stalagmite (blessure majeure), +16 dgts, 10 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez vaporisé qui ne tient plus qu'à un lambeau de chair fumant (blessure majeure), +20 dgts, 10 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, flash, nez éparpillé qui ne tient plus qu'à un lambeau de chair (blessure majeure), +10 dgts, aveuglé 10 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez broyé qui ne tient plus qu'à un lambeau de chair (blessure majeure), +15 dgts, assourdi 10 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("39")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("40+")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, trognon carbonisé, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, cône glacé, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, vaporisée, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, explosion, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, explosion, Mort instantanée, +5 init pour le rd suivant"
              )
            ])
          ])
        ])
      ]),
      _vm._v(" "),
      _c(
        "h3",
        {
          attrs: {
            id:
              "jets-critiques-de-force-d-acide-necrotiques-de-poison-psychiques"
          }
        },
        [
          _vm._v(
            "Jets critiques de force, d'acide, nécrotiques, de poison, psychiques "
          ),
          _c(
            "a",
            {
              staticClass: "header-anchor",
              attrs: {
                href:
                  "#jets-critiques-de-force-d-acide-necrotiques-de-poison-psychiques"
              }
            },
            [
              _c("i", {
                staticClass: "v-icon notranslate mdi mdi-link-variant"
              })
            ]
          )
        ]
      ),
      _vm._v(" "),
      _c("table", [
        _c("thead", [
          _c("tr", [
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Jet")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Force")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Acide")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Nécrotique")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Poison")
            ]),
            _vm._v(" "),
            _c("th", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Psychique")
            ])
          ])
        ]),
        _vm._v(" "),
        _c("tbody", [
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("2-4")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +6 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "brûlure intense, +4 dgts au premier rd, +2 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("dessèchement intense, +5 dgts, -1 au combat pendant 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("douleur intense, +4 dgts, empoisonné 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Céphalée intense, +3 dgts, étourdi 1 rd")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("5-8")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, +11 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "brûlure intense, +9 dgts au premier rd, +6 dgts au deuxième rd, +3 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "dessèchement intense, +10 dgts, -1 au combat pendant 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("douleur intense, +6 dgts, empoisonné 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Céphalée intense, +6 dgts, étourdi 1 rd")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("9-12")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup puissant, + 16 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "brûlure intense, +12 dgts au premier rd, +8 dgts au deuxième rd, +4 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "dessèchement intense, +15 dgts, -1 au combat pendant 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("douleur intense, +8 dgts, empoisonné 1 rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Céphalée intense, +12 dgts, étourdi 2 rds")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("13")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Coup à la main, -1 au combat, +6 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Brûlure à la main, -2 au combat, +4 dgts le premier rd, +2 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "dessèchement à la Main, -1 au combat, +5 dgts, étourdi 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "douleur intense à la Main, -1 au combat, +2 dgts, empoisonné 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Céphalée, -1 au combat, +3 dgts, étourdi 1 rd")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("14")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Main, (blessure mineure), -1 au combat, +8 dgts, 1 PA/rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Main, (brûlure mineure), -1 au combat, +6 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "dessèchement à la Main (blessure mineure), -2 au combat, +7 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main (blessure mineure), -2 au combat, +4 dgts empoisonné 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Choc émotionnel (blessure mineure), -2 au combat, +3 dgts, étourdi 1 rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("15")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (blessure mineure), 1/2 mvt, +7 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (brûlure mineure), 1/2 mvt, +3 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Pied dessèchement, (blessure mineure), 1/2 mvt, +4 dgts, étourdi 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Pied, (blessure mineure), 1/2 mvt, +1 dgts, empoisonné 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Charge mentale, yeux injectés de sang (blessure mineure), 1/2 mvt, +2 dgts, étourdi 1 rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("16")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Pied, (blessure mineure), 1/2 mvt, +9 dgts, 1 PA/ rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Pied, (brûlure mineure), 1/2 mvt, +9 dgts au premier rd, +6 dgts au deuxième rd, +3 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Pied, dessèchement (blessure mineure), 1/2 mvt, +9 dgts, 1 PA/ rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Pied, (blessure mineure), 1/2 mvt, +9 dgts, 1 PA/ rd, empoisonné 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Ego cinglé, saigne du nez (blessure mineure), 1/2 mvt, +9 dgts, 1 PA/ rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("17")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Cuisse, (blessure mineure), 1/2 mvt, +13 dgts")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse, (brûlure mineure), 1/2 mvt, +12 dgts au premier rd, +8 dgts au deuxième rd, +4 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse, dessèchement (blessure mineure), 1/2 mvt, +12 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse, (blessure mineure), 1/2 mvt, +12 dgts, empoisonné 1 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Surmoi en miette, (blessure mineure), 1/2 mvt, +12 dgts, étourdi 2 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("18")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Thorax, coup puissant (blessure mineure), + 11 dgts, 2 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Thorax (brûlure mineure), +9 dgts au premier rd, +6 dgts au deuxième rd, +3 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Thorax, dessèchement (blessure mineure), + 10 dgts, 2 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Thorax (brûlure mineure), + 10 dgts, empoisonné 2 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "flagellation égotique (blessure mineure), + 10 dgts, 2 PA/rd, étourdi 2 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("19")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen (blessure mineure), -1 au combat, +15 dgts, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen (brûlure mineure), -1 au combat, +15 dgts au premier rd, +10 dgts au deuxième rd, +5 dgts au deuxième rd, 2 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, dessèchement (blessure mineure), -1 au combat, +15 dgts, 2 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen (blessure mineure), -1 au combat, +15 dgts, empoisonné 2 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Débordement psychique (blessure mineure), -1 au combat, +15 dgts, étourdi 2 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("20")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, frappe au ventre, adversaire se plie en deux, Mort en 1d6 rounds, +1 à la prochaine attaque et  à l'initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, brûlure profondes qui disloque la sangle abdominale, Mort en 1d6 rounds, +1 à la prochaine attaque et  à l'initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, le ventre se craquelle , Mort en 1d6 rounds, +1 à la prochaine attaque et  à l'initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, grosse dysenterie, Mort en 1d6 rounds, +1 à la prochaine attaque et  à l'initiative."
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Le regard est vide, saigne du nez et des oreilles, Mort en 1d6 rounds, +1 à la prochaine attaque et  à l'initiative."
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("21")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête (blessure mineure), -2 au combat, +13 dgts, 2 PA/rd")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête (brûlure mineure), -2 au combat, +12 dgts au premier rd, +8 dgts au deuxième rd, +4 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, dessèchement (blessure mineure), -2 au combat, +12 dgts, 2 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête (blessure mineure), -2 au combat, +12 dgts, empoisonné 2 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Syndrome méningé(blessure mineure), -2 au combat, +14 dgts, étourdi 2 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("22")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe (blessure majeure), étourdi 4 rds, +12 dgts, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe (brûlure majeure), étourdi 4 rds, +12 dgts au premier rd, +8 dgts au deuxième rd, +4 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe dessèchement (blessure majeure), étourdi 4 rds, +12 dgts, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tempe (blessure majeure), étourdi 4 rds, +12 dgts, empoisonné 3 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Céphalée puissante (blessure majeure), étourdi 7 rds, +12 dgts"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("23")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, arrachage du bouclier (5-6) ou de l'arme (4-6), + 12 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, destruction du bouclier (5-6) ou de l'arme (4-6), +9 dgts au premier rd, +6 dgts au deuxième rd, +3 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, dessèchement, lâche le bouclier (5-6) ou l'arme (4-6), + 10 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Bras, fonte du bouclier (5-6) ou de l'arme (4-6), +9 dgts, empoisonné 3 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "stupéfaction, lâche le bouclier (5-6) ou l'arme (4-6), + 10 dgts, étourdi 4 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("24")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +9 dgts, étourdi 4 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos, à terre, +9 dgts au premier rd, +6 dgts au deuxième rd, +3 dgts au deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, dessèchement, à terre, +8 dgts, étourdi 2 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Dos, à terre, +8 dgts, empoisonné 4 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Cinglement égotique, +7 dgts, étourdi 4 rds")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("25")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, intestins sortent par l'arrière, mort en 1d6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, intestins apparents par la plaie, mort en 1d6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Abdomen, dessèchement, intestins déshydratés, mort en 1d6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Abdomen, intestins se vident, mort en 1d6 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Hemrragie cérébrale, les yeux sont ejectés des orbites, mort en 1d6 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("26")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge (blessure majeure), cordes vocales touchées, plus de voix pendant 1d6 jrs, +10 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge (brûlure majeure), cordes vocales touchées, plus de voix pendant 1d6 jrs, +7 dgts le premier rd, +4 dgts le second rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge, dessèchement (blessure majeure), cordes vocales touchées, plus de voix pendant 1d6 jrs, +6 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge (blessure majeure), cordes vocales touchées, plus de voix pendant 1d6 jrs, +5 dgts, empoisonné 4 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Zone de la parole affectée (blessure majeure), plus de voix pendant 1d6 jrs, +6 dgts"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("27")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (blessure majeure), +6 dgts, 6 PA/rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Aine (brûlure majeure), +15 dgts le premier rd, +5 dgts le deuxième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Ain, dessèchement(blessure majeure), +5 dgts, 5 PA/rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Aine (blessure majeure), +5 dgts, empoisonné 5 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "écrasement cérébral (blessure majeure), +4 dgts, 4 PA/rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("28")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (blessure majeure), inconscient 1d6 heures, + 20 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (brûlure majeure), inconscient 1d6 heures, + 15 dgts le premier rd, +10 dgts le second rd, + 5 dgts le troisième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque, trauma crânien (blessure majeure), inconscient 1d6 heures, + 17 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Nuque (blessure majeure), empoisonné 1d6 heures, + 20 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "explosion psychique, trauma crânien (blessure majeure), inconscient 1d6 heures, + 16 dgts"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("29")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos (blessure majeure), + 13 dgts, étourdi 6 rds, 3 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos (brûlure majeure), + 12 dgts le premier rd, +8 dgts le second rd, +4 le troisième rd, étourdi 6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos, dessèchement (blessure majeure), + 12 dgts, étourdi 4 rds, 4 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Dos (blessure majeure), + 12 dgts, étourdi 6 rds, empoisonné 6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Frappe psychique (blessure majeure), + 12 dgts, étourdi 6 rds, 3 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("30")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge enfoncée, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge fondue, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge ratatinée, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Gorge gonflée et violacée, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "explosion neurale, Mort en 1d6 rounds, +3 init pour le rd suivant"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("31")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main (blessure majeure), + 9 dgts, étourdi 2 rds, 4 PA/rd, lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main (brûlure majeure), + 8 dgts le premier rd, +4 dgts le second rd, étourdi 2 rds, lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main, dessèchement (blessure majeure), + 8 dgts, étourdi 2 rds, 4 PA/rd, lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Main (blessure majeure), + 8 dgts, étourdi 2 rds, empoisonné 4 rds, lâche l'arme tenue en main"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Frappe psychique (blessure majeure), + 6 dgts, étourdi 6 rds, lâche l'arme tenue en main"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("32")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse (blessure majeure) 1/2 mvt, + 9 dgts, étourdi 3 rds, 5 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse (brûlure majeure) 1/2 mvt, + 12 dgts le premier rd, +8 dgts le second rd, +4 dgts le troisième rd, étourdi 3 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse dessèchement (blessure majeure) 1/2 mvt, + 7 dgts, étourdi 3 rds, 4 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Cuisse (blessure majeure) 1/2 mvt, + 6 dgts,  empoisonné 8 rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "lacération dépressive (blessure majeure) 1/2 mvt, + 8 dgts, étourdi 8 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("33")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule (blessure majeure), + 12 dgts, étourdi 4 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule (brûlure majeure), + 10 dgts le premier rd, +6 dgts le second rd, +3 dgts le troisième rd, étourdi 10 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Épaule lacérée (blessure majeure), + 10 dgts, étourdi 4 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Épaule (blessure majeure), + 10 dgts, empoisonné 10 rds")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "claque psychique (blessure majeure), + 10 dgts, étourdi 10 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("34")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine (blessure majeure), + 16 dgts, étourdi 5 rds, 8 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine (brûlure majeure), + 15 dgts le premier rd, +10 dgts le second rd, +5 dgts le troisième rd, étourdi 5 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine dessèchement (blessure majeure), + 13 dgts, étourdi 6 rds, 6 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Poitrine (blessure majeure), + 15 dgts, empoisonné 13 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "gifle égotique (blessure majeure), + 12 dgts, étourdi 10 rds, 3 PA/rd"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("35")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +17 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((brûlure majeure), perception visuelle avec un désavantage jusqu'à guérison, +15 dgts le premier rd, +10 dgts le second rd et +5 dgts le troisième rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché dessèchement ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +13 dgts"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, œil touché ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +15 dgts, aveugle et empoisonné 1d6 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, zone de la vision touchée ((blessure majeure), perception visuelle avec un désavantage jusqu'à guérison, +10 dgts, aveugle 2d6 jours"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("36")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure) +20 dgts, étourdi 10 rds (casque, sinon +10 dgts et étourdi 3 rds)"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille fondue (brûlure majeure) +18 dgts le premier rd, +12 dgts le second rd et +6 dgts le troisième rd, étourdi 10 rds (casque, sinon +10 dgts et étourdi 3 rds)"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille dessèchement (blessure majeure) +18 dgts, étourdi 10 rds (casque, sinon +10 dgts et étourdi 3 rds)"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille (blessure majeure) +15 dgts, empoisonné et assourdi 10 rds (casque, sinon +10 dgts et étourdi 3 rds)"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Audition affectée (blessure majeure) +10 dgts, étourdi 10 rds, surdité 1d6 jours"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("37")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille arrachée (blessure majeure), casque arrachée, +22 dgts, étourdi 12 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille fondue (brûlure majeure), casque arrachée, +20 dgts pendant 2 rds, étourdi 5 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille dessèchement (blessure majeure), casque arrachée, +16 dgts, étourdi 11 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, oreille violette (blessure majeure), casque arrachée, +14 dgts, empoisonné 10 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Audition touchée (blessure majeure), casque arrachée, +20 dgts, surdité 1d6 jours"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("38")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez explosé qui ne tient plus qu'à un lambeau de chair (blessure majeure), +20 dgts, 10 PA/rd"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez brûlé qui ne tient plus qu'à un lambeau de chair (brûlure majeure), +15 dgts pendant 3 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez dessèchement qui ne tient plus qu'à un lambeau de chair (blessure majeure), +18 dgts, étourdi 10 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, nez brûlé par le poison qui ne tient plus qu'à un lambeau de chair (brûlure majeure), +20 dgts, empoisonné 10 rds"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Frappe psychique (blessure majeure), +20 dgts, étourdi 10 rds"
              )
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("39")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("Tête, Mort (casque) sinon comas 1d6 jours")
            ])
          ]),
          _vm._v(" "),
          _c("tr", [
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v("40+")
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, arrachage, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, fondue, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, dessèchement, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, empoisonnée, Mort instantanée, +5 init pour le rd suivant"
              )
            ]),
            _vm._v(" "),
            _c("td", { staticStyle: { "text-align": "center" } }, [
              _vm._v(
                "Tête, explosion, Mort instantanée, +5 init pour le rd suivant"
              )
            ])
          ])
        ])
      ])
    ]
  )
}
var staticRenderFns = []
render._withStripped = true

export { render, staticRenderFns }"}]}