{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/bestiaire/cnuth-athelsen/README.md?vue&type=template&id=077a43b8&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/bestiaire/cnuth-athelsen/README.md","mtime":1634910080118},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}