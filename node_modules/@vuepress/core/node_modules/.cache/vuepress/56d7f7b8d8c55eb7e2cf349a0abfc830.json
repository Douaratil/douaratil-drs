{"remainingRequest":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/olivier/Documents/douaratil-drs/docs/pieges/README.md?vue&type=template&id=5d73a6a2&","dependencies":[{"path":"/home/olivier/Documents/douaratil-drs/docs/pieges/README.md","mtime":1634294763329},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/olivier/Documents/douaratil-drs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgIkNvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yIiwKICAgIHsgYXR0cnM6IHsgInNsb3Qta2V5IjogX3ZtLiRwYXJlbnQuc2xvdEtleSB9IH0sCiAgICBbCiAgICAgIF9jKCJoMSIsIHsgYXR0cnM6IHsgaWQ6ICJsZXMtcGllZ2VzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkxlcyBwacOoZ2VzICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2xlcy1waWVnZXMiIH0gfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZGVjbGVuY2hlci11bi1waWVnZSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJEw6ljbGVuY2hlciB1biBwacOoZ2UgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZGVjbGVuY2hlci11bi1waWVnZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTGEgcGx1cGFydCBkZXMgcGnDqGdlcyBzZSBkw6ljbGVuY2hlbnQgcXVhbmQgdW5lIGNyw6lhdHVyZSBzZSByZW5kIGRhbnMgdW4gZW5kcm9pdCBvdSB0b3VjaGUgw6AgcXVlbHF1ZSBjaG9zZSBxdWUgbGUgY3LDqWF0ZXVyIGR1IHBpw6hnZSB2ZXV0IHByb3TDqWdlci4gUGFybWkgbGVzIGTDqWNsZW5jaGV1cnMgbGVzIHBsdXMgY291cmFudHMsIG9uIHRyb3V2ZSBsZXMgcGxhcXVlcyBkZSBwcmVzc2lvbiBldCBsZXMgc2VjdGlvbnMgZGUgZmF1eC1wbGFuY2hlciBzdXIgbGVzcXVlbHMgaWwgbmUgZmF1dCBwYXMgbWFyY2hlciwgbGVzIGZpbHMgdGVuZHVzIGVuIHRyYXZlcnMgZCd1biBjaGVtaW4gZGFucyBsZXNxdWVscyBpbCBuZSBmYXV0IHBhcyBzZSBwcmVuZHJlIGxlcyBwaWVkcywgbGVzIHBvaWduw6llcyBkZSBwb3J0ZSDDoCBuZSBwYXMgdG91cm5lciwgbGVzIHNlcnJ1cmVzIGV4aWdlYW50IGxhIGJvbm5lIGNsZWYuLi4gTGVzIHBpw6hnZXMgbWFnaXF1ZXMgc2UgZMOpY2xlbmNoZW50IHNvdXZlbnQgcXVhbmQgdW5lIGNyw6lhdHVyZSBlbnRyZSBkYW5zIHVuIGxpZXUgb3UgdG91Y2hlIHF1ZWxxdWUgY2hvc2UuIENlcnRhaW5zLCBjb21tZSBsZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9ncmltb2lyZS9nbHlwaGUtZGUtcHJvdGVjdGlvbi8iIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoImdseXBoZSBkZSBwcm90ZWN0aW9uIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIsIHNvbnQgZG90w6lzIGRlIGNvbmRpdGlvbnMgZGUgZMOpY2xlbmNoZW1lbnQgcGx1cyBjb21wbGV4ZXMsIGNvbXByZW5hbnQgdW4gbW90IGRlIGNvbW1hbmRlIGxlcyBlbXDDqmNoYW50IGRlIHNlIGTDqWNsZW5jaGVyLiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMiIsIHsgYXR0cnM6IHsgaWQ6ICJyZXBlcmVyLWV0LW5ldXRyYWxpc2VyLXVuLXBpZWdlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlJlcMOpcmVyIGV0IG5ldXRyYWxpc2VyIHVuIHBpw6hnZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNyZXBlcmVyLWV0LW5ldXRyYWxpc2VyLXVuLXBpZWdlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJFbiBnw6luw6lyYWwsIHVuIHBpw6hnZSBwb3Nzw6hkZSB1biDDqWzDqW1lbnQgdmlzaWJsZSBhcHLDqHMgdW4gZXhhbWVuIGTDqXRhaWxsw6kgZGVzIGxpZXV4LiBVbiBwZXJzb25uYWdlIHBldXQgcmVww6lyZXIgdW5lIHBpZXJyZSBkZXNjZWxsw6llIHF1aSBjYWNoZSB1bmUgcGxhcXVlIGRlIHByZXNzaW9uLCByZW1hcnF1ZXIgbGEgbHVtacOocmUgcXVpIHNlIHJlZmzDqHRlIHN1ciB1biBmaWwgdGVuZHUgZW4gdHJhdmVycyBkdSBjaGVtaW4sIGTDqWNlbGVyIGRlIHBldGl0cyB0cm91cyBkYW5zIGxlIG11ciBkJ2/DuSBzb3J0aXJvbnQgZGVzIGpldHMgZGUgZmxhbW1lcyBvdSBkw6l0ZWN0ZXIgbidpbXBvcnRlIHF1ZWwgw6lsw6ltZW50IHRyYWhpc3NhbnQgbGEgcHLDqXNlbmNlIGQndW4gcGnDqGdlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxhIGRlc2NyaXB0aW9uIGR1IHBpw6hnZSBwcsOpY2lzZSBxdWVscyB0ZXN0cywgYWNjb21wYWduw6lzIGRlIHF1ZWxzIERELCBwZXJtZXR0ZW50IGRlIGTDqXRlY3RlciB1biBwacOoZ2UsIGRlIGxlIGTDqXNhbW9yY2VyIG91IGxlcyBkZXV4LiBVbiBwZXJzb25uYWdlIHF1aSBjaGVyY2hlIGFjdGl2ZW1lbnQgdW4gcGnDqGdlIGEgZHJvaXQgw6AgdW4gdGVzdCBkZSBTYWdlc3NlIChQZXJjZXB0aW9uKSBjb250cmUgbGUgREQgZHUgcGnDqGdlLiBWb3VzIHBvdXZleiDDqWdhbGVtZW50IGNvbXBhcmVyIGxlIEREIMOgIGF0dGVpbmRyZSBwb3VyIHJlcMOpcmVyIGxlIHBpw6hnZSBhdmVjIGxhIHZhbGV1ciBkZSBTYWdlc3NlIChQZXJjZXB0aW9uKSBwYXNzaXZlIGRlIGNoYXF1ZSBwZXJzb25uYWdlLCBhZmluIGRlIHNhdm9pciBzaSBsJ3VuIGQnZXV4IGxlIHJlbWFycXVlIGF1IHBhc3NhZ2UuIFNpIGxlcyBhdmVudHVyaWVycyByZXDDqHJlbnQgbGUgcGnDqGdlIGF2YW50IGRlIGxlIGTDqWNsZW5jaGVyLCBpbHMgb250IHVuZSBjaGFuY2UgZGUgbGUgZMOpc2Ftb3JjZXIsIHNvaXQgZMOpZmluaXRpdmVtZW50LCBzb2l0IGp1c3RlIGxlIHRlbXBzIGRlIHBhc3Nlci4gUG91ciBjZWxhLCB2b3VzIHBvdXZleiBkZW1hbmRlciDDoCB1biBwZXJzb25uYWdlIGRlIGZhaXJlIHVuIHRlc3QgZCdJbnRlbGxpZ2VuY2UgKEludmVzdGlnYXRpb24pIHBvdXIgY29tcHJlbmRyZSBjb21tZW50IGTDqXNhY3RpdmVyIGxlIHBpw6hnZSwgc3VpdmkgZCd1biB0ZXN0IGRlIERleHTDqXJpdMOpIGVmZmVjdHXDqSDDoCBsJ2FpZGUgZCdvdXRpbHMgZGUgdm9sZXVyIHBvdXIgYWNjb21wbGlyIGwnYWN0ZSBkZSBzYWJvdGFnZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJOJ2ltcG9ydGUgcXVlbCBwZXJzb25uYWdlIHBldXQgdGVudGVyIHVuIHRlc3QgZCdJbnRlbGxpZ2VuY2UgKEFyY2FuZXMpIHBvdXIgZMOpdGVjdGVyIG91IGTDqXNhbW9yY2VyIHVuIHBpw6hnZSBtYWdpcXVlLCBlbiBwbHVzIGRlcyBhdXRyZXMgdGVzdHMgaW5kaXF1w6lzIGRhbnMgbGEgZGVzY3JpcHRpb24gZHUgcGnDqGdlLiBMZXMgREQgc29udCBsZXMgbcOqbWVzLCBxdWVsIHF1ZSBzb2l0IGxlIHR5cGUgZGUgdGVzdC4gRGUgcGx1cywgbGEgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ3JpbW9pcmUvZGlzc2lwYXRpb24tZGUtbGEtbWFnaWUvIiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJkaXNzaXBhdGlvbiBkZSBsYSBtYWdpZSIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGEgdW5lIGNoYW5jZSBkZSBkw6lzYWN0aXZlciBsYSBwbHVwYXJ0IGRlcyBwacOoZ2VzIG1hZ2lxdWVzLiBMZSBERCBkdSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jdGVzdHMtZGUtY2FyYWN0ZXJpc3RpcXVlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigidGVzdCBkZSBjYXJhY3TDqXJpc3RpcXVlIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIMOgIGVmZmVjdHVlciBsb3JzIGRlIGxhIGRpc3NpcGF0aW9uIGRlIGxhIG1hZ2llIGVzdCBpbmRpcXXDqSBkYW5zIGxhIGRlc2NyaXB0aW9uIGR1IHBpw6hnZS4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiRW4gZ8OpbsOpcmFsLCBsYSBkZXNjcmlwdGlvbiBkdSBwacOoZ2UgZXN0IGFzc2V6IGNsYWlyZSBwb3VyIHF1ZSB2b3VzIHNhY2hpZXogc2kgbGVzIGFjdGlvbnMgZCd1biBwZXJzb25uYWdlIGx1aSBwZXJtZXR0ZW50IGRlIGxlIGxvY2FsaXNlciBvdSBsZSBkw6lqb3Vlci4gQ29tbWUgc291dmVudCwgbmUgbGFpc3NleiBwYXMgbGVzIGpldHMgZGUgZMOpIGwnZW1wb3J0ZXIgc3VyIHVuZSBmYcOnb24gZGUgam91ZXIgaW50ZWxsaWdlbnRlIGV0IHVuZSBib25uZSBwcsOpcGFyYXRpb24uIFV0aWxpc2V6IHZvdHJlIGJvbiBzZW5zIGVuIHZvdXMgYXBwdXlhbnQgc3VyIGxhIGRlc2NyaXB0aW9uIGR1IHBpw6hnZSBwb3VyIGTDqWNpZGVyIGRlIGNlIHF1aSBzZSBwcm9kdWl0LiBBdWN1biBwacOoZ2UgbmUgcGV1dCwgcGFyIHNhIGNvbmNlcHRpb24sIGFudGljaXBlciB0b3V0ZXMgbGVzIGFjdGlvbnMgZGVzIHBlcnNvbm5hZ2VzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlNpIGxlcyBhY3Rpb25zIGQndW4gcGVyc29ubmFnZSBsdWkgcGVybWV0dGVudCBsb2dpcXVlbWVudCBkZSBkw6ljb3V2cmlyIHVuIHBpw6hnZSwgdm91cyBkZXZyaWV6IGFubm9uY2VyIHF1J2lsIGxlIHJlcMOocmUgc2FucyBsdWkgZmFpcmUgZmFpcmUgZGUgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86ICIvdXRpbGlzZXItbGVzLWNhcmFjdGVyaXN0aXF1ZXMvI3Rlc3RzLWRlLWNhcmFjdGVyaXN0aXF1ZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoInRlc3QgZGUgY2FyYWN0w6lyaXN0aXF1ZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIi4gUGFyIGV4ZW1wbGUsIHMnaWwgc291bMOodmUgbGUgdGFwaXMgcXVpIGNhY2hlIHVuZSBwbGFxdWUgZGUgcHJlc3Npb24sIGlsIGTDqWNvdXZyZSBsZSBkw6ljbGVuY2hldXIgZHUgcGnDqGdlIGV0IG4nYSBwYXMgYmVzb2luIGRlIGZhaXJlIGRlIHRlc3QuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlBvdXIgZMOpam91ZXIgdW4gcGnDqGdlLCBsZXMgY2hvc2VzIHNvbnQgdW4gcGV1IHBsdXMgY29tcGxpcXXDqWVzLiBQcmVub25zIGNvbW1lIGV4ZW1wbGUgdW4gY29mZnJlIGF1IHRyw6lzb3IgcGnDqWfDqS4gU2kgY2UgZGVybmllciBlc3Qgb3V2ZXJ0IHNhbnMgYXZvaXIgYXUgcHLDqWFsYWJsZSB0aXLDqSBzdXIgbGVzIGRldXggcG9pZ27DqWVzIHNpdHXDqWVzIHN1ciBzZXMgZmxhbmNzLCBzb24gbcOpY2FuaXNtZSBpbnRlcm5lIGVudm9pZSB1bmUgdm9sw6llIGQnYWlndWlsbGVzIGVtcG9pc29ubsOpZXMgc3VyIGxhIHBlcnNvbm5lIHF1aSBzZSB0aWVudCBkZXZhbnQgbHVpLiBMZXMgcGVyc29ubmFnZXMgaW5zcGVjdGVudCBsZSBjb2ZmcmUgbWFpcywgYXByw6hzIHF1ZWxxdWVzIHRlc3RzLCBpbHMgbmUgc29udCB0b3Vqb3VycyBwYXMgc8O7cnMgcXUnaWwgc29pdCBwacOpZ8OpLiBBdSBsaWV1IGRlIGwnb3V2cmlyIHRvdXQgc2ltcGxlbWVudCwgaWxzIHBvc2VudCB1biBib3VjbGllciBjb250cmUgbGUgZGV2YW50IGR1IGNvZmZyZSBldCBsJ291dnJlbnQgZGUgbG9pbiBhdmVjIHVuZSB0aWdlIGRlIGZlci4gRGFucyBjZSBjYXMsIGxlIHBpw6hnZSBzZSBkw6ljbGVuY2hlIGJpZW4sIG1haXMgbGVzIGFpZ3VpbGxlcyBzJ8OpY3Jhc2VudCBzYW5zIGRhbmdlciBjb250cmUgbGUgYm91Y2xpZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTGVzIHBpw6hnZXMgc29udCBzb3V2ZW50IGRvdMOpcyBkJ3VuIG3DqWNhbmlzbWUgcGVybWV0dGFudCBkZSBsZXMgZMOpc2FybWVyIG91IGRlIGxlcyBuZXV0cmFsaXNlci4gRW4gZWZmZXQsIGxlcyBtb25zdHJlcyBpbnRlbGxpZ2VudHMgcXVpIGluc3RhbGxlbnQgZGVzIHBpw6hnZXMgZGFucyBsZXVyIGFudHJlIG91IGFsZW50b3VyIG9udCBiZXNvaW4gZGUgcGFzc2VyIHNhbnMgZW4gw6p0cmUgdmljdGltZXMuIENlcyBwacOoZ2VzIG9udCBkb25jIHBhcmZvaXMgZGVzIGxldmllcnMgcGVybWV0dGFudCBkZSBkw6lzYWN0aXZlciBsZXVyIGTDqWNsZW5jaGV1ciBvdSBiaWVuIHNlIHRyb3V2ZW50IG5vbiBsb2luIGQndW5lIHBvcnRlIGTDqXJvYsOpZSBkaXNzaW11bGFudCB1biBwYXNzYWdlIHBlcm1ldHRhbnQgZGUgY29udG91cm5lciBsZSBwacOoZ2UuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAibGVzLWVmZmV0cy1kZXMtcGllZ2VzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkxlcyBlZmZldHMgZGVzIHBpw6hnZXMgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjbGVzLWVmZmV0cy1kZXMtcGllZ2VzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMZXMgZWZmZXRzIGRlcyBwacOoZ2VzIHZvbnQgZGUgbGEgZ8OqbmUgw6AgbGEgbW9ydCwgZ3LDomNlIMOgIGRlcyB2b2zDqWVzIGRlIGZsw6hjaGVzLCBkZXMgcG9pbnRlcywgZGVzIGxhbWVzLCBkdSBwb2lzb24sIGRlcyBnYXogdG94aXF1ZXMsIGRlcyBnZXJiZXMgZGUgZmV1IG91IGVuY29yZSBkZXMgZm9zc2VzIHByb2ZvbmRlcy4gTGVzIHBsdXMgZGFuZ2VyZXV4IGNvbWJpbmVudCBwbHVzaWV1cnMgZGUgY2VzIMOpbMOpbWVudHMgcG91ciB0dWVyLCBibGVzc2VyLCByZXRlbmlyIG91IHJlcG91c3NlciBsZXMgY3LDqWF0dXJlcyBhc3NleiBtYWxjaGFuY2V1c2VzIHBvdXIgbGVzIGTDqWNsZW5jaGVyLiBMYSBkZXNjcmlwdGlvbiBkdSBwacOoZ2UgcHLDqWNpc2UgdG91dCBjZSBxdWkgc2UgcGFzc2UgbG9yc3F1J2lsIHNlIGTDqWNsZW5jaGUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KCJMZSBib251cyBkJ2F0dGFxdWUgZCd1biBwacOoZ2UsIGxlIEREIGR1ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jamV0cy1kZS1zYXV2ZWdhcmRlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiamV0IGRlIHNhdXZlZ2FyZGUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgcG91ciByw6lzaXN0ZXIgw6Agc2VzIGVmZmV0cyBldCBsZXMgZMOpZ8OidHMgcXUnaWwgaW5mbGlnZSBkw6lwZW5kZW50IGRlIHNhIHPDqXbDqXJpdMOpLiBVdGlsaXNleiBsZXMgdGFibGVzICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIGhyZWY6ICIjZGQtZHUtamV0LWRlLXNhdXZlZ2FyZGUtZXQtYm9udXMtZC1hdHRhcXVlLWRlcy1waWVnZXMiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJERCBkdSBqZXQgZGUgc2F1dmVnYXJkZSBldCBib251cyBkJ2F0dGFxdWUgZGVzIHBpw6hnZXMiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBldCAiKSwKICAgICAgICAgIF9jKCJhIiwgeyBhdHRyczogeyBocmVmOiAiI3NldmVyaXRlLWRlcy1kZWdhdHMtcGFyLW5pdmVhdSIgfSB9LCBbCiAgICAgICAgICAgIF92bS5fdigiU8OpdsOpcml0w6kgZGVzIGTDqWfDonRzIHBhciBuaXZlYXUiKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgcG91ciBvYnRlbmlyIGRlcyBpbmRpY2F0aW9ucyBlbiBmb25jdGlvbiBkZXMgdHJvaXMgbml2ZWF1eCBkZSBzw6l2w6lyaXTDqSBkZXMgcGnDqGdlcy4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVW4gcGnDqGdlIGfDqm5hbnQgYSBwZXUgZGUgcmlzcXVlcyBkZSB0dWVyIG91IGJsZXNzZXIgZ3Jpw6h2ZW1lbnQgdW4gcGVyc29ubmFnZSBkdSBuaXZlYXUgaW5kaXF1w6ksIGVuIHJldmFuY2hlLCB1biBwacOoZ2UgZGFuZ2VyZXV4IHByb3ZvcXVlIGRlcyBibGVzc3VyZXMgZ3JhdmVzIGNoZXogbGVzIHBlcnNvbm5hZ2VzIGR1IG5pdmVhdSBpbmRpcXXDqSAoZXQgcGV1dCBtw6ptZSBlbiB0dWVyIGNlcnRhaW5zKS4gVW4gcGnDqGdlIG1vcnRlbCBlc3QgY29uw6d1IHBvdXIgdHVlciBsZXMgcGVyc29ubmFnZXMgZHUgbml2ZWF1IGluZGlxdcOpLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgImgzIiwKICAgICAgICB7CiAgICAgICAgICBhdHRyczogeyBpZDogImRkLWR1LWpldC1kZS1zYXV2ZWdhcmRlLWV0LWJvbnVzLWQtYXR0YXF1ZS1kZXMtcGllZ2VzIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoIkREIGR1ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jamV0cy1kZS1zYXV2ZWdhcmRlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiamV0IGRlIHNhdXZlZ2FyZGUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBldCBib251cyBkJ2F0dGFxdWUgZGVzIHBpw6hnZXMgIiksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgaHJlZjogIiNkZC1kdS1qZXQtZGUtc2F1dmVnYXJkZS1ldC1ib251cy1kLWF0dGFxdWUtZGVzLXBpZWdlcyIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiaSIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IgogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJ0YWJsZSIsIFsKICAgICAgICBfYygidGhlYWQiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0aCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAibGVmdCIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJTw6l2w6lyaXTDqSBkdSBwacOoZ2UiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0aCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIkREIGR1IEpkUyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiQm9udXMgZCdhdHRhcXVlIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSksCiAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgX2MoInRib2R5IiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImxlZnQiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJHw6puYW50IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjEwLTExIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIrMyDDoCArNSIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImxlZnQiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCJEYW5nZXJldXgiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMTItMTUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIis2IMOgICs4IikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAibGVmdCIgfSB9LCBbCiAgICAgICAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIk1vcnRlbCIpXSkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIxNi0yMCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiKzkgw6AgKzEyIikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAic2V2ZXJpdGUtZGVzLWRlZ2F0cy1wYXItbml2ZWF1IiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlPDqXbDqXJpdMOpIGRlcyBkw6lnw6J0cyBwYXIgbml2ZWF1ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NldmVyaXRlLWRlcy1kZWdhdHMtcGFyLW5pdmVhdSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygidGFibGUiLCBbCiAgICAgICAgX2MoInRoZWFkIiwgWwogICAgICAgICAgX2MoInRyIiwgWwogICAgICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJOaXZlYXUgZHUgcGVyc29ubmFnZSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiR8OqbmFudCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRoIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiRGFuZ2VyZXV4IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGgiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJNb3J0ZWwiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdKSwKICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICBfYygidGJvZHkiLCBbCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMS00IildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjJkNiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiM2Q2IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCI3ZDYiKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgIF9jKCJ0ciIsIFsKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF9jKCJzdHJvbmciLCBbX3ZtLl92KCI1LTEwIildKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIjNkNiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiN2Q2IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIxMGQ2IikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMTEtMTYiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiN2Q2IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIxMGQ2IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF92bS5fdigiICIpLAogICAgICAgICAgICBfYygidGQiLCB7IHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfSB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCIxNWQ2IikKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pLAogICAgICAgICAgX3ZtLl92KCIgIiksCiAgICAgICAgICBfYygidHIiLCBbCiAgICAgICAgICAgIF9jKCJ0ZCIsIHsgc3RhdGljU3R5bGU6IHsgInRleHQtYWxpZ24iOiAiY2VudGVyIiB9IH0sIFsKICAgICAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiMTctMjAiKV0pCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMTBkNiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMTVkNiIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfdm0uX3YoIiAiKSwKICAgICAgICAgICAgX2MoInRkIiwgeyBzdGF0aWNTdHlsZTogeyAidGV4dC1hbGlnbiI6ICJjZW50ZXIiIH0gfSwgWwogICAgICAgICAgICAgIF92bS5fdigiMjBkNiIpCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgyIiwgeyBhdHRyczogeyBpZDogImxlcy1waWVnZXMtY29tcGxleGVzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkxlcyBwacOoZ2VzIGNvbXBsZXhlcyAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNsZXMtcGllZ2VzLWNvbXBsZXhlcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiTGVzIHBpw6hnZXMgY29tcGxleGVzIGZvbmN0aW9ubmVudCBjb21tZSBsZXMgcGnDqGdlcyBvcmRpbmFpcmVzIG1haXMsIHVuZSBmb2lzIGFjdGl2w6lzLCBpbHMgZWZmZWN0dWVudCB1bmUgc8OpcmllIGQnYWN0aW9ucyDDoCBjaGFxdWUgcm91bmQuIFVuZSByZW5jb250cmUgYXZlYyB1biBwacOoZ2UgY29tcGxleGUgdGllbnQgYWxvcnMgYmVhdWNvdXAgZHUgY29tYmF0LiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlF1YW5kIHVuIHBpw6hnZSBjb21wbGV4ZSBzJ2FjdGl2ZSwgaWwgZmF1dCBsYW5jZXIgbGUgZMOpIHBvdXIgZMOpdGVybWluZXIgc29uIGluaXRpYXRpdmUuIFNhIGRlc2NyaXB0aW9uIG1lbnRpb25uZSBzb24gYm9udXMgZCdpbml0aWF0aXZlLiDDgCBzb24gdG91ciwgaWwgcydhY3RpdmUgZGUgbm91dmVhdSBldCBlZmZlY3R1ZSBzb3V2ZW50IHVuZSBhY3Rpb24uIElsIHBldXQgcG9ydGVyIGRlcyBhdHRhcXVlcyBzdWNjZXNzaXZlcyBjb250cmUgbGVzIGludHJ1cywgY3LDqWVyIHVuIGVmZmV0IHF1aSBzZSBtb2RpZmllIGF1IGZpbCBkdSB0ZW1wcyBvdSBvZmZyaXIgdW4gZMOpZmkgZHluYW1pcXVlLiBFbiBkZWhvcnMgZGUgY2VsYSwgaWwgc2UgcmVww6hyZSBldCBzZSBkw6lzYW1vcmNlIG91IHNlIG5ldXRyYWxpc2UgY29tbWUgbGVzIGF1dHJlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJQcmVub25zIGNvbW1lIGV4ZW1wbGUgdW4gcGnDqGdlIHF1aSBpbm9uZGUgcHJvZ3Jlc3NpdmVtZW50IHVuZSBzYWxsZS4gSWwgZm9uY3Rpb25uZSBtaWV1eCBzb3VzIGZvcm1lIGRlIHBpw6hnZSBjb21wbGV4ZS4gw4Agc29uIHRvdXIsIGxlIG5pdmVhdSBkZSBsJ2VhdSBtb250ZSBldCwgYXUgYm91dCBkZSBwbHVzaWV1cnMgcm91bmRzLCBsYSBzYWxsZSBlc3QgY29tcGzDqHRlbWVudCBpbW1lcmfDqWUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDIiLCB7IGF0dHJzOiB7IGlkOiAiZXhlbXBsZXMtZGUtcGllZ2VzIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkV4ZW1wbGVzIGRlIHBpw6hnZXMgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjZXhlbXBsZXMtZGUtcGllZ2VzIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMZXMgcGnDqGdlcyBtYWdpcXVlcyBldCBtw6ljYW5pcXVlcyBwcsOpc2VudMOpcyBpY2kgc29udCBwbHVzIG91IG1vaW5zIGRhbmdlcmV1eCBldCBzb250IGNsYXNzw6lzIHBhciBvcmRyZSBhbHBoYWLDqXRpcXVlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImFpZ3VpbGxlLWVtcG9pc29ubmVlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkFpZ3VpbGxlIGVtcG9pc29ubsOpZSAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNhaWd1aWxsZS1lbXBvaXNvbm5lZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiZW0iLCBbX3ZtLl92KCJQacOoZ2UgbcOpY2FuaXF1ZSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJVbmUgYWlndWlsbGUgZW1wb2lzb25uw6llIHNlIGNhY2hlIGRhbnMgbGEgc2VycnVyZSBkJ3VuIGNvZmZyZSBhdSB0csOpc29yIG91IGRhbnMgcXVlbHF1ZSBjaG9zZSBxdSd1bmUgY3LDqWF0dXJlIGVzdCBzdXNjZXB0aWJsZSBkJ291dnJpci4gU2kgcXVlbHF1J3VuIG91dnJlIGxlIGNvZmZyZSBzYW5zIHV0aWxpc2VyIGxhIGNsZWYgYWTDqXF1YXRlLCBsJ2FpZ3VpbGxlIGphaWxsaXQgZXQgbHVpIGluamVjdGUgdW5lIGRvc2UgZGUgcG9pc29uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIlF1YW5kIGxlIHBpw6hnZSBzZSBkw6ljbGVuY2hlLCBsJ2FpZ3VpbGxlIHNvcnQgc3VyIDEwIGNlbnRpbcOodHJlcyBkZXB1aXMgbGEgc2VycnVyZS4gVW5lIGNyw6lhdHVyZSDDoCBwb3J0w6llIHN1Yml0IDEgZMOpZ8OidCBwZXJmb3JhbnQgZXQgMmQ2IGTDqWfDonRzIGRlIHBvaXNvbi4gRGUgcGx1cywgZWxsZSBkb2l0IHLDqXVzc2lyIHVuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3V0aWxpc2VyLWxlcy1jYXJhY3RlcmlzdGlxdWVzLyNqZXRzLWRlLXNhdXZlZ2FyZGUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJqZXQgZGUgc2F1dmVnYXJkZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiIGRlIENvbnN0aXR1dGlvbiBERCAxNiBvdSDDqnRyZSAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ2VyZXItbGEtc2FudGUtZHUtcGVyc29ubmFnZS8jZW1wb2lzb25uZSIgfSB9LAogICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigiZW1wb2lzb25uw6llIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBwZW5kYW50IDEgaGV1cmUuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJVbiB0ZXN0IGQnSW50ZWxsaWdlbmNlIChJbnZlc3RpZ2F0aW9uKSBERCAyMCBwZXJtZXQgZGUgZGV2aW5lciBsYSBwcsOpc2VuY2UgZGUgbCdhaWd1aWxsZSBlbiByYWlzb24gZGVzIG1vZGlmaWNhdGlvbnMgYXBwb3J0w6llcyDDoCBsYSBzZXJydXJlIHBvdXIgbHVpIGZhaXJlIGRlIGxhIHBsYWNlLiBVbiB0ZXN0IGRlIERleHTDqXJpdMOpIEREIDE2IGVmZmVjdHXDqSBhdmVjIGRlcyBvdXRpbHMgZGUgdm9sZXVyIGTDqXNhcm1lIGxlIHBpw6hnZSBlbiByZXRpcmFudCBsJ2FpZ3VpbGxlIGRlIGxhIHNlcnJ1cmUuIExlIHBpw6hnZSBzZSBkw6ljbGVuY2hlIHNpIHF1ZWxxdSd1biB0ZW50ZSBkZSBjcm9jaGV0ZXIgbGEgc2VycnVyZSBldCDDqWNob3VlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImFzY2Vuc2V1ci1zb3BvcmlmaXF1ZSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJBc2NlbnNldXIgc29wb3JpZmlxdWUgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsCiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIjYXNjZW5zZXVyLXNvcG9yaWZpcXVlIiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJlbSIsIFtfdm0uX3YoIlBpw6hnZSBtw6ljYW5pcXVlIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxlIHBpw6hnZSBjb21iaW5lIHVuIGdheiBzb3BvcmlmaXF1ZSDDoCBsYSBmb3JjZSBkZSBncmF2aXTDqS4gVW5lIGNhZ2UgZW4gbcOpdGFsIHNlcnQgZCdhc2NlbnNldXIgcG91ciBtb250ZXIgw6AgbCfDqXRhZ2Ugc3Vww6lyaWV1ciBkYW5zIHVuIGNvbmR1aXQgZGUgMTUgbcOodHJlcyBkZSBoYXV0ZXVyIChwbHVzLCBwb3VyIGRlcyBkw6lnw6J0cyBzdXDDqXJpZXVycykuIEwnYXNjZW5zZXVyIGZvbmN0aW9ubmUgw6AgbGEgZm9yY2UgZGVzIGJyYXMsIGVuIHRpcmFudCBzdXIgdW5lIGNvcmRlIHBsYWPDqWUgZGFucyBsYSBjYWdlIGV0IHJlbGnDqWUgw6AgdW5lIHBvdWxpZSDDoCBsJ8OpdGFnZSBkdSBkZXNzdXMuIEZhaXJlIG1vbnRlciBsJ2FzY2Vuc2V1ciBkZSA1IG0gZGVtYW5kZSB1biB0ZXN0IGRlIEZvcmNlIEREIDEwKzUgcGFyIGNyw6lhdHVyZSBzdXBwbMOpbWVudGFpcmUgZGFucyBsYSBjYWdlLiBJbCBlc3QgcG9zc2libGUgZGUgdGlyZXIgc3VyIGxhIGNvcmRlIMOgIHBsdXNpZXVycywgZG9ubmFudCArMyBhdSB0ZXN0IHBhciBjcsOpYXR1cmUgc3VwcGzDqW1lbnRhaXJlIHF1aSB0aXJlLiBVbiB0ZXN0IGRlIFNhZ2Vzc2UgKFBlcmNlcHRpb24pIEREIDEwIHBlcm1ldCBkZSBzZSByZW5kcmUgY29tcHRlIHF1ZSBsYSBjYWdlIGVzdCBhYsOubcOpZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICLDgCBsJ8OpdGFnZSBzdXDDqXJpZXVyLCBsJ2FpciBlc3QgY2hhcmfDqSBkJ3VuIGdheiBzb3BvcmlmaXF1ZSAobmF0dXJlbCBvdSBub24sIGVuIGZvbmN0aW9uIGRlIGwnZW52aXJvbm5lbWVudCBldCBkdSBsaWV1KS4gQXUgZnVyIGV0IMOgIG1lc3VyZSBxdWUgbCdhc2NlbnNldXIgbW9udGUsIGwnYWlyIGVudHJhw65uZSB1biBlbmRvcm1pc3NlbWVudCBkZSBwbHVzIGVuIHBsdXMgaW50ZW5zZSBldCByYXBpZGUuIEVudHJlIDUgZXQgMTAgbcOodHJlcyBhdS1kZXNzdXMgZHUgc29sLCBsZXMgY3LDqWF0dXJlcyBkb2l2ZW50IHLDqXVzc2lyIHVuIHRlc3QgZGUgc2F1dmVnYXJkZSBkZSBDb25zdGl0dXRpb24gREQgIDEwIG91IHRvbWJlciAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyNpbmNvbnNjaWVudCIgfSB9LAogICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigiaW5jb25zY2llbnRlcyIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLiBFbnRyZSAxMCBldCAxNSBtw6h0cmVzLCBsZSB0ZXN0IGVzdCDDoCBERCAxNSBldCBhaW5zaSBkZSBzdWl0ZSB0b3VzIGxlcyA1IG0gZHUgY29uZHVpdC4gTGVzIGNyw6lhdHVyZXMgcGV1dmVudCBzdXNwZWN0ZXIgbGEgcHLDqXNlbmNlIGQndW4gZ2F6IGF2ZWMgc2VzIHByZW1pZXJzIGVmZmV0cyBzZWNvbmRhaXJlcyAodW5lIGhpbGFyaXTDqSwgdW5lIGZhaWJsZXNzZSBkZXMgamFtYmVzLCB1biB0cmVtYmxlbWVudCwgZGVzIG1haW5zIG1vaXRlcy4uLikgYXZlYyB1biB0ZXN0IGQnSW50ZWxsaWdlbmNlIChOYXR1cmUpIG91IGRlIFNhZ2Vzc2UgKE3DqWRlY2luZSkgREQgMTYuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlNpIGxhIChvdSBsZXMpIGNyw6lhdHVyZShzKSB0ZW5hbnQgbGEgY29yZGUgcydlbmRvcm1lKG50KSwgbGEgY2FnZSB0b21iZS4gTGVzIGNyw6lhdHVyZXMgcmXDp29pdmVudCAxZDYgZMOpZ8OidHMgY29udG9uZGFudHMgZGUgY2h1dGUgcGFyIHRyYW5jaGUgZGUgMyBtw6h0cmVzLiBVbmUgY3LDqWF0dXJlIMOpdmVpbGzDqWUgZXQgw6AgcHJveGltaXTDqSBkZSBjZWx1aSBxdWkgdGVuYWl0IGxhIGNvcmRlIHBldXQgbGEgcmV0ZW5pciBhdmVjIHVuIHRlc3QgZGUgRGV4dMOpcml0w6kgREQgMTIgcHVpcyBkZSBGb3JjZSBERCAxMCs1IHBhciBjcsOpYXR1cmUgZGFucyBsYSBjYWdlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlRvdXQgdHlwZSBkZSBnYXogcGV1dCDDqnRyZSB1dGlsaXPDqSwgZW4gZm9uY3Rpb24gZGUgbCdlZmZldCBzb3VoYWl0w6kgKHBhciBleGVtcGxlLCBpbCBwZXV0IHMnYWdpciBkJ3VuIGdheiBwcm92b3F1YW50IHVuZSBmcsOpbsOpc2llIG91IHVuZSBwaG9iaWUpLiBMZSBnYXogcGV1dCBzZSB0cm91dmVyIHVuaXF1ZW1lbnQgZGFucyB1bmUgcG9jaGUgZCdhaXIgYXUgbWlsaWV1IGR1IGNvbmR1aXQgYWZpbiBkZSBjb25zZXJ2ZXIgbCfDqXRhZ2Ugc2Fpbi4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJlZmZvbmRyZW1lbnQtZHUtcGxhZm9uZCIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJFZmZvbmRyZW1lbnQgZHUgcGxhZm9uZCAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNlZmZvbmRyZW1lbnQtZHUtcGxhZm9uZCIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiZW0iLCBbX3ZtLl92KCJQacOoZ2UgbcOpY2FuaXF1ZSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJDZSBwacOoZ2UgdXRpbGlzZSB1biBmaWwgdGVuZHUgcXVpLCB1bmUgZm9pcyB0b3VjaMOpLCBwcm92b3F1ZSBsJ2VmZm9uZHJlbWVudCBkJ3VuZSBzZWN0aW9uIGRlIHBsYWZvbmQgaW5zdGFibGUgZW4gw6lsaW1pbmFudCBzZXMgc3VwcG9ydHMuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTGUgZmlsIGVzdCB0ZW5kdSDDoCAxMCBjZW50aW3DqHRyZXMgZHUgc29sLCBlbnRyZSBkZXV4IHBvdXRyZXMgZGUgc291dGllbi4gTGUgREQgcG91ciBsZSByZXDDqXJlciBlc3QgZGUgMTIuIFVuIHRlc3QgZGUgRGV4dMOpcml0w6kgREQgMTYgw6AgbCdhaWRlIGQnb3V0aWxzIGRlIHZvbGV1ciBwZXJtZXQgZGUgZMOpc2Ftb3JjZXIgbGUgZmlsIGVuIHRvdXRlIHPDqWN1cml0w6kuIFVuIHBlcnNvbm5hZ2UgZMOpcG91cnZ1IGRlIHRlbHMgb3V0aWxzIHBldXQgdG91dCBkZSBtw6ptZSB0ZW50ZXIgbGUgdGVzdCBhdmVjIHVuZSBhcm1lIG91IHVuIG91dGlsIGFmZsO7dMOpLCBtYWlzIGlsIHN1Yml0IGFsb3JzIHVuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3V0aWxpc2VyLWxlcy1jYXJhY3RlcmlzdGlxdWVzLyNhdmFudGFnZS1ldC1kZXNhdmFudGFnZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJkw6lzYXZhbnRhZ2UiKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiBTJ2lsIHJhdGUgbGUgdGVzdCwgbGUgcGnDqGdlIHNlIGTDqWNsZW5jaGUuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJUb3V0ZSBwZXJzb25uZSBxdWkgaW5zcGVjdGUgbGVzIHBvdXRyZXMgcmVtYXJxdWUgZmFjaWxlbWVudCBxdSdlbGxlcyBzb250IGp1c3RlcyBjb2luY8OpZXMgdGVtcG9yYWlyZW1lbnQuIElsIHN1ZmZpdCBkJ3VuZSBhY3Rpb24gcG91ciBkw6lsb2dlciB1bmUgcG91dHJlIGV0IGTDqWNsZW5jaGVyIGxlIHBpw6hnZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMZSBwbGFmb25kIHF1aSBzdXJwbG9tYmUgbGUgZmlsIGVzdCBlbiBtYXV2YWlzIMOpdGF0IGV0IHRvdXRlIHBlcnNvbm5lIHF1aSBsZSByZW1hcnF1ZSBlbiBkw6lkdWl0IHF1J2lsIHJpc3F1ZSBkZSBzJ2VmZm9uZHJlci4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJRdWFuZCBsZSBwacOoZ2Ugc2UgZMOpY2xlbmNoZSwgbGUgcGxhZm9uZCBpbnN0YWJsZSBzJ2VmZm9uZHJlLiBUb3V0ZSBjcsOpYXR1cmUgcXVpIHNlIHRyb3V2ZSBkYW5zIGxhIHpvbmUgc2l0dcOpZSBzb3VzIGxhIHNlY3Rpb24gaW5zdGFibGUgZG9pdCBmYWlyZSB1biAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jamV0cy1kZS1zYXV2ZWdhcmRlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiamV0IGRlIHNhdXZlZ2FyZGUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgZGUgRGV4dMOpcml0w6kgREQgMTYuIENlbGxlcyBxdWkgw6ljaG91ZW50IHN1Ymlzc2VudCA3ZDYgZMOpZ8OidHMgY29udG9uZGFudHMsIGxlcyBhdXRyZXMgbGEgbW9pdGnDqSBzZXVsZW1lbnQuIFVuZSBmb2lzIGxlIHBpw6hnZSBkw6ljbGVuY2jDqSwgbGUgc29sIGRlIGxhIHpvbmUgZXN0IGVuY29tYnLDqSBkZSBncmF2YXRzIGV0IGRldmllbnQgdW4gdGVycmFpbiBkaWZmaWNpbGUuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogImZpbGV0IiB9IH0sIFsKICAgICAgICBfdm0uX3YoIkZpbGV0ICIpLAogICAgICAgIF9jKCJhIiwgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI2ZpbGV0IiB9IH0sIFsKICAgICAgICAgIF9jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSkKICAgICAgICBdKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJlbSIsIFtfdm0uX3YoIlBpw6hnZSBtw6ljYW5pcXVlIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkNlIHBpw6hnZSBmb25jdGlvbm5lIGdyw6JjZSDDoCB1biBmaWwgdGVuZHUgcXVpIGxpYsOocmUgdW4gZmlsZXQgc3VzcGVuZHUgYXUgcGxhZm9uZC4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJMZSBmaWwgZXN0IHRlbmR1IMOgIDEwIGNlbnRpbcOodHJlcyBkdSBzb2wgZXQgYXR0YWNow6kgZW50cmUgZGV1eCBjb2xvbm5lcyBvdSBkZXV4IGFyYnJlcy4gTGUgZmlsZXQgZXN0IGRpc3NpbXVsw6kgcGFyIGRlcyB0b2lsZXMgZCdhcmFpZ27DqWUgb3UgbGUgZmV1aWxsYWdlLiBMZSBERCBwZXJtZXR0YW50IGRlIHJlcMOpcmVyIGxlIGZpbCBlc3QgZGUgMTAuIFVuIHRlc3QgZGUgRGV4dMOpcml0w6kgREQgMTYgw6AgbCdhaWRlIGQnb3V0aWxzIGRlIHZvbGV1ciBwZXJtZXQgZGUgZMOpc2Ftb3JjZXIgbGUgZmlsIGVuIHRvdXRlIHPDqWN1cml0w6kuIFVuIHBlcnNvbm5hZ2UgZMOpcG91cnZ1IGRlIHRlbHMgb3V0aWxzIHBldXQgdG91dCBkZSBtw6ptZSB0ZW50ZXIgbGUgdGVzdCBhdmVjIHVuZSBhcm1lIG91IHVuIG91dGlsIGFmZsO7dMOpLCBtYWlzIGlsIHN1Yml0IGFsb3JzIHVuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3V0aWxpc2VyLWxlcy1jYXJhY3RlcmlzdGlxdWVzLyNhdmFudGFnZS1ldC1kZXNhdmFudGFnZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJkw6lzYXZhbnRhZ2UiKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLiBTJ2lsIHJhdGUgbGUgdGVzdCwgbGUgcGnDqGdlIHNlIGTDqWNsZW5jaGUuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJMZSBmaWxldCB0b21iZSBkw6hzIHF1ZSBsZSBwacOoZ2Ugc2UgZMOpY2xlbmNoZSBldCByZWNvdXZyZSB1bmUgem9uZSBkZSAzIG3DqHRyZXMgZGUgY8O0dMOpLiBMZXMgY3LDqWF0dXJlcyBxdWkgc2UgdHJvdXZlbnQgbMOgIHNvbnQgY29pbmPDqWVzIHNvdXMgbGUgZmlsZXQgZXQgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ2VyZXItbGEtc2FudGUtZHUtcGVyc29ubmFnZS8jZW50cmF2ZSIgfSB9LAogICAgICAgICAgICBbX2MoImVtIiwgW192bS5fdigiZW50cmF2w6llcyIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIuIENlbGxlcyBxdWkgcmF0ZW50IHVuICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jamV0cy1kZS1zYXV2ZWdhcmRlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiamV0IGRlIHNhdXZlZ2FyZGUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiBkZSBGb3JjZSBERCAgMTIgc2UgcmV0cm91dmVudCDDqWdhbGVtZW50ICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyNhLXRlcnJlIiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCLDoCB0ZXJyZSIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiLiBVbmUgY3LDqWF0dXJlIHBldXQgZMOpcGVuc2VyIHNvbiBhY3Rpb24gcG91ciBmYWlyZSB1biB0ZXN0IGRlIEZvcmNlIEREIDEyLiBTaSBlbGxlIHLDqXVzc2l0LCBlbGxlIHNlIGxpYsOocmUgb3UgbGliw6hyZSB1bmUgYXV0cmUgY3LDqWF0dXJlIHNpdHXDqWUgw6AgdW5lIGRpc3RhbmNlIGluZsOpcmlldXJlIG91IMOpZ2FsZSDDoCBzb24gYWxsb25nZS4gTGUgZmlsZXQgYSB1bmUgVkQgZGUgMTAgZXQgMjAgcG9pbnRzIGRlIHN0cnVjdHVyZS4gNSBkw6lnw6J0cyB0cmFuY2hhbnRzIChWRCAxMCkgZMOpdHJ1aXNlbnQgdW5lIHNlY3Rpb24gZGUgZmlsZXQgZGUgMSw1MCBtw6h0cmVzIGRlIGPDtHTDqSBldCBsaWLDqHJlbnQgbGVzIGNyw6lhdHVyZXMgcGnDqWfDqWVzIGRhbnMgY2V0dGUgc2VjdGlvbi4iCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiZmxlY2hldHRlcy1lbXBvaXNvbm5lZXMiIH0gfSwgWwogICAgICAgIF92bS5fdigiRmzDqWNoZXR0ZXMgZW1wb2lzb25uw6llcyAiKSwKICAgICAgICBfYygKICAgICAgICAgICJhIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwKICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiNmbGVjaGV0dGVzLWVtcG9pc29ubmVlcyIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiZW0iLCBbX3ZtLl92KCJQacOoZ2UgbcOpY2FuaXF1ZSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJRdWFuZCB1bmUgY3LDqWF0dXJlIG1hcmNoZSBzdXIgdW5lIHBsYXF1ZSBkZSBwcmVzc2lvbiBjYWNow6llLCBkZXMgZmzDqWNoZXR0ZXMgZW1wb2lzb25uw6llcyBqYWlsbGlzc2VudCBkZSB0dWJlcyBtb250w6lzIHN1ciByZXNzb3J0cyBvdSBzb3VzIHByZXNzaW9uIGV0IGhhYmlsZW1lbnQgZGlzc2ltdWzDqXMgZGFucyBsZXMgbXVycyBhbGVudG91ci4gVW5lIG3Dqm1lIHpvbmUgcGV1dCBjb21wb3J0ZXIgcGx1c2lldXJzIHBsYXF1ZXMgZGUgcHJlc3Npb24sIGNoYWN1bmUgcmVsacOpZSDDoCBzb24gcHJvcHJlIGpldSBkZSBmbMOpY2hldHRlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMZXMgcGV0aXRzIHRyb3VzIGRhbnMgbGVzIG11cnMgc29udCBjYWNow6lzIHBhciBsYSBwb3Vzc2nDqHJlIGV0IGxlcyB0b2lsZXMgZCdhcmFpZ27DqWUgb3Ugc29pZ25ldXNlbWVudCBkaXNzaW11bMOpcyBkYW5zIHVuIGJhcy1yZWxpZWYsIHVuZSBmcmVzcXVlIG91IHVuZSBwZWludHVyZSBxdWkgb3JuZSBsZXMgbXVycy4gTGUgREQgcGVybWV0dGFudCBkZSBsZXMgcmVww6lyZXIgZXN0IGRlIDE2LiBVbiBwZXJzb25uYWdlIHBldXQgZGV2aW5lciBsYSBwcsOpc2VuY2UgZCd1bmUgcGxhcXVlIGRlIHByZXNzaW9uIGVuIGFuYWx5c2FudCBsZXMgZGlmZsOpcmVuY2VzIGVudHJlIGxlIG1vcnRpZXIgZXQgbGEgcGllcnJlIHF1aSBsYSBjb21wb3NlbnQgZXQgbGUgc29sIGFsZW50b3VyLCDDoCBjb25kaXRpb24gZGUgcsOpdXNzaXIgdW4gdGVzdCBkJ0ludGVsbGlnZW5jZSAoSW52ZXN0aWdhdGlvbikgREQgMTYuIE9uIHBldXQgZ2xpc3NlciB1bmUgcG9pbnRlIGRlIGZlciBvdSB1biBvYmpldCBzaW1pbGFpcmUgc291cyB1bmUgcGxhcXVlIGRlIHByZXNzaW9uIHBvdXIgZW1ww6pjaGVyIGxlIHBpw6hnZSBkZSBzJ2FjdGl2ZXIuIE9uIHBldXQgw6lnYWxlbWVudCBib3VjaGVyIGxlcyB0cm91cyBkZXMgbXVycyBhdmVjIGR1IHRpc3N1IG91IGRlIGxhIGNpcmUgcG91ciBlbXDDqmNoZXIgbGVzIGZsw6ljaGV0dGVzIGRlIHNvcnRpci4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJMZSBwacOoZ2UgcydhY3RpdmUgcXVhbmQgdW4gcG9pZHMgZGUgMTAgIGtpbG9zIG91IHBsdXMgYXBwdWllIHN1ciBsYSBwbGFxdWUgZGUgcHJlc3Npb24uIElsIHByb2pldHRlIGFsb3JzIHF1YXRyZSBmbMOpY2hldHRlcyBxdWkgZWZmZWN0dWVudCBjaGFjdW5lIHVuZSBhdHRhcXVlIMOgIGRpc3RhbmNlIGF2ZWMgdW4gYm9udXMgZCdhdHRhcXVlIGRlICs4IGNvbnRyZSB1bmUgY2libGUgYWzDqWF0b2lyZSBzaXR1w6llIGRhbnMgdW4gcmF5b24gZGUgMyBtw6h0cmVzIGF1dG91ciBkZSBsYSBwbGFxdWUgKGxhIHZpc2lvbiBuZSBqb3VhbnQgYXVjdW4gcsO0bGUgZGFucyBjZSBqZXQgZCdhdHRhcXVlKS4gKFNpIGxhIHpvbmUgbmUgY29tcG9ydGUgYXVjdW5lIGNpYmxlLCBsZXMgZmzDqWNoZXR0ZXMgbmUgdG91Y2hlbnQgcmllbi4pIFVuZSBjaWJsZSB0b3VjaMOpZSByZcOnb2l0IDIgKDFkNikgZMOpZ8OidHMgcGVyZm9yYW50cyBldCBkb2l0IGZhaXJlIHVuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3V0aWxpc2VyLWxlcy1jYXJhY3RlcmlzdGlxdWVzLyNqZXRzLWRlLXNhdXZlZ2FyZGUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJqZXQgZGUgc2F1dmVnYXJkZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBkZSBDb25zdGl0dXRpb24gREQgMTYuIFNpIGVsbGUgw6ljaG91ZSwgZWxsZSBzdWJpdCAzZDYgZMOpZ8OidHMgZGUgcG9pc29uLCBsYSBtb2l0acOpIHNldWxlbWVudCBzaSBlbGxlIHLDqXVzc2l0LiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJoMyIsIHsgYXR0cnM6IHsgaWQ6ICJmb3NzZSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJGb3NzZSAiKSwKICAgICAgICBfYygiYSIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXItYW5jaG9yIiwgYXR0cnM6IHsgaHJlZjogIiNmb3NzZSIgfSB9LCBbCiAgICAgICAgICBfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiZW0iLCBbX3ZtLl92KCJQacOoZ2UgbcOpY2FuaXF1ZSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW192bS5fdigiVm9pY2kgcXVhdHJlIHR5cGVzIGRlIGZvc3NlcyBiYXNpcXVlcy4iKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX2MoInN0cm9uZyIsIFtfdm0uX3YoIkZvc3NlIG9yZGluYWlyZSIpXSksCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIi4gVW5lIGZvc3NlIG9yZGluYWlyZSBlc3QgdW4gc2ltcGxlIHRyb3UgY3JldXPDqSBhdSBzb2wuIE9uIHBldXQgbGUgcmVjb3V2cmlyIGF2ZWMgdW4gZ3JhbmQgdGlzc3UgZml4w6kgc3VyIGxlcyBib3JkcyBkZSBsYSBmb3NzZSBldCBjYW1vdWZsw6kgYXZlYyBkZSBsYSBwb3Vzc2nDqHJlIGV0IGRlcyBkw6licmlzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxlIEREIHBvdXIgcmVww6lyZXIgbGEgZm9zc2UgZXN0IGRlIDEyLiBUb3V0ZSBjcsOpYXR1cmUgcXVpIG1hcmNoZSBzdXIgbGUgdGlzc3UgdG9tYmUgYXUgdHJhdmVycyBldCBsJ2VtcG9ydGUgZGFucyBzYSBjaHV0ZS4gRWxsZSBzdWJpdCB1biBtb250YW50IGRlIGTDqWfDonRzIGTDqXBlbmRhbnQgZGUgbGEgcHJvZm9uZGV1ciBkdSB0cm91IChlbiBnw6luw6lyYWwgMyBtw6h0cmVzLCBtYWlzIGNlcnRhaW5lcyBmb3NzZXMgc29udCBwbHVzIHByb2ZvbmRlcykuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRm9zc2UgZGlzc2ltdWzDqWUiKV0pLAogICAgICAgIF92bS5fdigKICAgICAgICAgICIuIENldHRlIGZvc3NlIGVzdCByZWNvdXZlcnRlIGQndW4gbWF0w6lyaWF1IGRlIGNvdXZlcnR1cmUgaWRlbnRpcXVlIMOgIGNlbHVpIGZvcm1hbnQgbGUgc29sIGFsZW50b3VyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlVuIHRlc3QgZGUgU2FnZXNzZSAoUGVyY2VwdGlvbikgREQgMTYgcsOpdsOobGUgdW5lIGFic2VuY2UgZCdlbXByZWludGVzIGluZGlxdWFudCBxdWUgY2V0dGUgcGFydGllIGVzdCDDqXZpdMOpZSBwYXIgbGVzIGhhYml0YW50cy4gSWwgZmF1dCBlbnN1aXRlIHLDqXVzc2lyIHVuIHRlc3QgZCdJbnRlbGxpZ2VuY2UgKEludmVzdGlnYXRpb24pIEREIDE2IHBvdXIgY29uZmlybWVyIHF1ZSBsYSB6b25lIHBpw6lnw6llIGNhY2hlIHVuZSBmb3NzZSBkaXNzaW11bMOpZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJRdWFuZCB1bmUgY3LDqWF0dXJlIHMnYXZhbmNlIHN1ciBsZSBtYXTDqXJpYXUgZGUgY291dmVydHVyZSwgaWwgcydvdXZyZSBjb21tZSB1bmUgdHJhcHBlIGV0IGVudm9pZSBsJ2ludHJ1cyBkYW5zIGxlcyBwcm9mb25kZXVycyBkZSBsYSBmb3NzZSwgcXVpIG1lc3VyZSBnw6luw6lyYWxlbWVudCBlbnRyZSAzIGV0IDYgbcOodHJlcyBkZSBwcm9mb25kZXVyLCBtYWlzIHBhcmZvaXMgcGx1cy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJVbmUgZm9pcyBsYSBmb3NzZSBkw6l0ZWN0w6llLCBpbCBmYXV0IGdsaXNzZXIgdW5lIHBvaW50ZSBkZSBmZXIgb3UgdW4gb2JqZXQgc2ltaWxhaXJlIGVudHJlIGxlIG1hdMOpcmlhdSBkZSBjb3V2ZXJ0dXJlIGV0IGxlIHNvbCBub3JtYWwgYWZpbiBkJ2VtcMOqY2hlciBsZSBtYXTDqXJpYXUgZGUgcydvdXZyaXIgY29tbWUgdW5lIHRyYXBwZSwgY2UgcXVpIHBlcm1ldCBkZSBwYXNzZXIgc2FucyByaXNxdWUuIE9uIHBldXQgw6lnYWxlbWVudCBtYWludGVuaXIgbGUgbWF0w6lyaWF1IGVuIHBvc2l0aW9uIGZlcm3DqWUgcGFyIG1hZ2llLCBhdmVjIHVuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygiUm91dGVyTGluayIsIHsgYXR0cnM6IHsgdG86ICIvZ3JpbW9pcmUvdmVycm91LW1hZ2lxdWUvIiB9IH0sIFsKICAgICAgICAgICAgX2MoImVtIiwgW192bS5fdigidmVycm91IG1hZ2lxdWUiKV0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF92bS5fdigiIG91IHVuIHNvcnQgc2ltaWxhaXJlLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRm9zc2UgdmVycm91aWxsw6llIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiLiBDZXR0ZSBmb3NzZSBlc3QgaWRlbnRpcXVlIMOgIGxhIGZvc3NlIGRpc3NpbXVsw6llLCDDoCB1bmUgZXhjZXB0aW9uIHByw6hzIGV0IGRlIHRhaWxsZSA6IGxhIHRyYXBwZSBlc3QgbW9udMOpZSBzdXIgcmVzc29ydHMgZXQgc2UgcmVmZXJtZSB1bmUgZm9pcyB1bmUgY3LDqWF0dXJlIHRvbWLDqWUgZGFucyBsYSBmb3NzZSwgbGEgcGnDqWdlYW50IMOgIGwnaW50w6lyaWV1ci4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJJbCBmYXV0IHLDqXVzc2lyIHVuIHRlc3QgZGUgRm9yY2UgREQgMjIgcG91ciBvdXZyaXIgbGEgdHJhcHBlIGRlIGZvcmNlLCBtYWlzIG9uIHBldXQgYXVzc2kgbGEgYnJpc2VyLiBVbiBwZXJzb25uYWdlIGNvaW5jw6kgZGFucyBsYSBmb3NzZSBwZXV0IHRlbnRlciBkZSBkw6lzYW1vcmNlciBsZSBtw6ljYW5pc21lIGRlcyByZXNzb3J0cyBkZSBsJ2ludMOpcmlldXIgw6AgbCdhaWRlIGQnb3V0aWxzIGRlIHZvbGV1ciBlbiByw6l1c3Npc3NhbnQgdW4gdGVzdCBkZSBEZXh0w6lyaXTDqSBERCAxNiwgw6AgY29uZGl0aW9uIMOpdmlkZW1tZW50IGRlIHBvdXZvaXIgYWNjw6lkZXIgYXUgbcOpY2FuaXNtZSBldCBkZSBsZSB2b2lyLiBFbiBnw6luw6lyYWwsIGlsIGV4aXN0ZSB1biBtw6ljYW5pc21lIChzb3V2ZW50IGNhY2jDqSBkZXJyacOocmUgdW5lIHBvcnRlIGTDqXJvYsOpZSB2b2lzaW5lKSBxdWkgcGVybWV0IGQnb3V2cmlyIGxhIHRyYXBwZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfYygic3Ryb25nIiwgW192bS5fdigiRm9zc2UgaMOpcmlzc8OpZSBkZSBwaWV1eCIpXSksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIuIENldHRlIGZvc3NlIGVzdCB1bmUgZm9zc2Ugb3JkaW5haXJlLCBkaXNzaW11bMOpZSBvdSB2ZXJyb3VpbGzDqWUgZXQgZG90w6llIGRlIHBpZXV4IGRlIGJvaXMgb3UgZGUgZmVyIGFjw6lyw6lzIHBsYW50w6lzIGF1IGZvbmQuIFVuZSBjcsOpYXR1cmUgcXVpIHRvbWJlIGzDoCBzdWJpdCAzZDYgZMOpZ8OidHMgcGVyZm9yYW50cyDDoCBjYXVzZSBkZXMgcGlxdWVzIGVuIHBsdXMgZGUgc2VzIGTDqWfDonRzIGRlIGNodXRlLiBMZXMgdmVyc2lvbnMgbGVzIHBsdXMgcmV0b3JzZXMgZHUgcGnDqGdlIGFqb3V0ZW50IGR1IHBvaXNvbiBzdXIgbGVzIHBvaW50ZXMuIERhbnMgY2UgY2FzLCB1bmUgY3LDqWF0dXJlIHF1aSBzdWJpdCBsZSBtb2luZHJlIGTDqWfDonQgcGVyZm9yYW50IGRlIGxhIHBhcnQgZGVzIHBpZXV4IGRvaXQgZmFpcmUgdW4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86ICIvdXRpbGlzZXItbGVzLWNhcmFjdGVyaXN0aXF1ZXMvI2pldHMtZGUtc2F1dmVnYXJkZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImpldCBkZSBzYXV2ZWdhcmRlIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGRlIENvbnN0aXR1dGlvbi4gU2kgZWxsZSDDqWNob3VlLCBlbGxlIHN1Yml0IDdkNiBkw6lnw6J0cyBkZSBwb2lzb24sIGxhIG1vaXRpw6kgc2V1bGVtZW50IHNpIGVsbGUgcsOpdXNzaXQuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogIm11ci1kZS1sYW1lcyIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJNdXIgZGUgbGFtZXMgIiksCiAgICAgICAgX2MoCiAgICAgICAgICAiYSIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAiaGVhZGVyLWFuY2hvciIsIGF0dHJzOiB7IGhyZWY6ICIjbXVyLWRlLWxhbWVzIiB9IH0sCiAgICAgICAgICBbX2MoImkiLCB7IHN0YXRpY0NsYXNzOiAidi1pY29uIG5vdHJhbnNsYXRlIG1kaSBtZGktbGluay12YXJpYW50IiB9KV0KICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbX2MoImVtIiwgW192bS5fdigiUGnDqGdlIG3DqWNhbmlxdWUiKV0pXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVW5lIHN0YXR1ZXR0ZSBlbiBvciAob3UgdG91dCBhdXRyZSBvYmpldCBhdHRpc2FudCBsYSBjb252b2l0aXNlKSBlc3QgcG9zw6llIHN1ciB1biBwacOpZGVzdGFsIGF1IGNlbnRyZSBkZSBsYSBwacOoY2UuIExlIHNvY2xlIGVzdCBlbmZvbmPDqSBkYW5zIGxlIHNvbCBldCBsJ2lkb2xlIHNlcnQgZGUgY29udHJlcG9pZHMuIExlIEREIHBvdXIgbGUgcmVtYXJxdWVyIGVzdCBkZSAxNi4gVW4gdGVzdCBkZSBTYWdlc3NlIChQZXJjZXB0aW9uKSBERCAxMiByw6l1c3NpdCBwZXJtZXQgZGUgZMOpdGVjdGVyIGF1IHNvbCBkZXMgdHJhY2VzIGRlIHNhbmcgZXQsIGVuIHJlZ2FyZGFudCBsZSBwbGFmb25kLCBkZSByZW1hcnF1ZXIgZGV1eCBsb25ndWVzIHJhaW51cmVzIGp1c3RlIMOgIGxhIHZlcnRpY2FsZSBkdSBwacOpZGVzdGFsLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkxlIHBpw6hnZSBzJ2FjdGl2ZSBsb3JzcXVlIGxhIHN0YXR1ZSBlc3Qgc291bGV2w6llLiBMZSBwacOpZGVzdGFsIHJlbW9udGUgdW4gcGV1IGV0IGTDqWNsZW5jaGUgbGEgc29ydGllIGRlIGRldXggbG9uZ3VlcyBsYW1lcyBkZXB1aXMgbGUgcGxhZm9uZCwgcXVpIGJhbGFpZW50IGwnYWlyIGp1c3F1J2F1IHNvbCBkZXZhbnQgZXQgZGVycmnDqHJlIGxlIHBpw6lkZXN0YWwuIENoYXF1ZSBjcsOpYXR1cmUgc2l0dcOpZSDDoCBtb2lucyBkJ3VuIG3DqHRyZSBlbiBhdmFudCBvdSBlbiBhcnJpw6hyZSBkdSBwacOpZGVzdGFsIGRvaXQgZmFpcmUgdW4gIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgdG86ICIvdXRpbGlzZXItbGVzLWNhcmFjdGVyaXN0aXF1ZXMvI2pldHMtZGUtc2F1dmVnYXJkZSIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoImpldCBkZSBzYXV2ZWdhcmRlIildCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiIGRlIERleHTDqXJpdMOpIEREIDE2LiBDZWxsZXMgcXVpIMOpY2hvdWVudCBzdWJpc3NlbnQgN2Q2IGTDqWfDonRzIHRyYW5jaGFudHMsIGxlcyBhdXRyZXMgbGEgbW9pdGnDqSBzZXVsZW1lbnQuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxlIG3DqWNhbmlzbWUgcGV1dCDDqnRyZSBkw6lzYW1vcmPDqSBvdSBsZSBiYWxhbmNpZXIgZGVzIGxhbWVzIHBldXQgw6p0cmUgc3RvcHDDqSBlbiBkw6lwb3NhbnQgdW4gb2JqZXQgZHUgbcOqbWUgcG9pZHMgc3VyIGxlIHBpw6lkZXN0YWwuIFBvdXIgY2VsYSwgaWwgZmF1dCByw6l1c3NpciB1biB0ZXN0IGRlIERleHTDqXJpdMOpIEREIDEyLiBUb3V0ZWZvaXMsIHJlcGxhY2VyIHVuIGNvbnRyZXBvaWRzIHVuZSBmb2lzIHF1ZSBsZSBwcmVtaWVyIG3DqWNhbmlzbWUgZXN0IGTDqWNsZW5jaMOpIGFycsOqdGUgY2VydGVzIGxlIHByZW1pZXIgbcOpY2FuaXNtZSwgbWFpcyBlbiBlbnRyYcOubmUgdW4gc2Vjb25kIDogZGV1eCBsYW1lcyBxdWkgYmFsYWllbnQgbCdhaXIgw6AgZHJvaXRlIGV0IMOgIGdhdWNoZSBkdSBwacOpZGVzdGFsIGNldHRlIGZvaXMuIExlcyBERCBwb3VyIMOpdml0ZXIgZXQgbGVzIGTDqWfDonRzIHN1YmlzIHNvbnQgaWRlbnRpcXVlcy4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJEYW5zIHVuZSBzdHJ1Y3R1cmUgZW4gYm9pcywgY29tbWUgdW5lIGNhYmFuZSBvdSB1bmUgbWFpc29uIG9yaWVudGFsZSwgaWwgZXN0IHBvc3NpYmxlIGRlIHJlbXBsYWNlciBsZXMgbGFtZXMgcGFyIGRlcyBiYXR0ZXVycyBlbiBib2lzLiBMZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jamV0cy1kZS1zYXV2ZWdhcmRlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiamV0IGRlIHNhdXZlZ2FyZGUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgcmVzdGUgaW5jaGFuZ8OpIG1haXMgbGVzIGNyw6lhdHVyZXMgcXVpIGxlIHJhdGVudCBuZSByZcOnb2l2ZW50IHF1ZSAzZDYgZMOpZ8OidHMgdHJhbmNoYW50cywgb3UgbGEgbW9pdGnDqSBzZXVsZW1lbnQgcG91ciB1biB0ZXN0IHLDqXVzc2kuIgogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInNwaGVyZS1kLWFubmloaWxhdGlvbiIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJTcGjDqHJlIGQnYW5uaWhpbGF0aW9uICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3NwaGVyZS1kLWFubmloaWxhdGlvbiIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiZW0iLCBbX3ZtLl92KCJQacOoZ2UgbWFnaXF1ZSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJEZXMgdMOpbsOoYnJlcyBtYWdpcXVlcyBldCBpbXDDqW7DqXRyYWJsZXMgZW1wbGlzc2VudCBsYSBib3VjaGUgYsOpYW50ZSBkJ3VuIHZpc2FnZSBkZSBwaWVycmUgdGFpbGzDqSBkYW5zIHVuIG11ci4gQ2V0dGUgYm91Y2hlLCBkZSBmb3JtZSB2YWd1ZW1lbnQgY2lyY3VsYWlyZSwgZmFpdCA2MCBjZW50aW3DqHRyZXMgZGUgZGlhbcOodHJlLiBBdWN1biBzb24gbidlbiDDqW1hbmUsIGF1Y3VuZSBsdW1pw6hyZSBuZSBwZXJjZSBzZXMgdMOpbsOoYnJlcyBldCB0b3V0ZSBtYXRpw6hyZSBxdWUgbCdvbiB5IGluc8OocmUgZXN0IGluc3RhbnRhbsOpbWVudCBvYmxpdMOpcsOpZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJVbiB0ZXN0IGQnSW50ZWxsaWdlbmNlIChBcmNhbmVzKSBERCAyMiByw6l2w6hsZSBxdWUgbGEgYm91Y2hlIGNvbnRpZW50IHVuZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJzcGjDqHJlIGQnYW5uaWhpbGF0aW9uIildKSwKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiIHF1ZSBsJ29uIG5lIHBldXQgbmkgY29udHLDtGxlciwgbmkgZMOpcGxhY2VyLiBFbiBkZWhvcnMgZGUgY2VsYSwgZWxsZSBmb25jdGlvbm5lIGNvbW1lIHVuZSAiCiAgICAgICAgKSwKICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJzcGjDqHJlIGQnYW5uaWhpbGF0aW9uIildKSwKICAgICAgICBfdm0uX3YoIiBvcmRpbmFpcmUuIikKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiQ2VydGFpbmVzIHZlcnNpb25zIGR1IHBpw6hnZSBjb21wb3J0ZW50IGVuIHBsdXMgdW4gZW5jaGFudGVtZW50IHF1aSBhZmZlY3RlIGxhIHN1cmZhY2UgZGUgcGllcnJlIGV0IHBvdXNzZSBsZXMgY3LDqWF0dXJlcyBzcMOpY2lmacOpZXMgw6AgcydhcHByb2NoZXIgZXQgZXNzYXllciBkZSBncmltcGVyIGRhbnMgbGEgYm91Y2hlLiBFbiBkZWhvcnMgZGUgY2VsYSwgY2V0IGVmZmV0IGZvbmN0aW9ubmUgY29tbWUgbCdlZmZldCBkJyIKICAgICAgICAgICksCiAgICAgICAgICBfYygiZW0iLCBbX3ZtLl92KCJhdHRpcmFuY2UiKV0pLAogICAgICAgICAgX3ZtLl92KCIgZHUgc29ydCAiKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ3JpbW9pcmUvcmVwdWxzaW9uLWF0dGlyYW5jZS8iIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoInLDqXB1bHNpb24vYXR0aXJhbmNlIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIi4gVW5lICIpLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9ncmltb2lyZS9kaXNzaXBhdGlvbi1kZS1sYS1tYWdpZS8iIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoImRpc3NpcGF0aW9uIGRlIGxhIG1hZ2llIildKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoIiAoREQgMTgpIHLDqXVzc2llIGRpc3NpcGUgY2V0IGVuY2hhbnRlbWVudC4iKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInNwaGVyZS1yb3VsYW50ZSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJTcGjDqHJlIHJvdWxhbnRlICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLCBhdHRyczogeyBocmVmOiAiI3NwaGVyZS1yb3VsYW50ZSIgfSB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJlbSIsIFtfdm0uX3YoIlBpw6hnZSBtw6ljYW5pcXVlIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIlF1YW5kIHVuIHBvaWRzIGRlIDEwIGtpbG9zIG91IHBsdXMgYXBwdWllIHN1ciBsYSBwbGFxdWUgZGUgcHJlc3Npb24gcmVsacOpZSBhdSBwacOoZ2UsIHVuZSB0cmFwcGUgZGlzc2ltdWzDqWUgcydvdXZyZSBhdSBwbGFmb25kIGV0IGxpYsOocmUgdW5lIHNwaMOocmUgZGUgcGllcnJlIGRlIDMgbcOodHJlcyBkZSBkaWFtw6h0cmUuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFsKICAgICAgICBfdm0uX3YoCiAgICAgICAgICAiVW4gcGVyc29ubmFnZSBwZXV0IHJlcMOpcmVyIGxhIHRyYXBwZSBldCBsYSBwbGFxdWUgZGUgcHJlc3Npb24gw6AgbCdhaWRlIGQndW4gdGVzdCBkZSBTYWdlc3NlIChQZXJjZXB0aW9uKSBERCAxNi4gVW4gcGVyc29ubmFnZSBwZXV0IHJlbWFycXVlciBsYSBwbGFxdWUgZGUgcHJlc3Npb24gZW4gYW5hbHlzYW50IGxlcyBkaWZmw6lyZW5jZXMgcXVlIHByw6lzZW50ZW50IGxlIG1vcnRpZXIgZXQgbGEgcGllcnJlIHF1aSBsYSBjb21wb3NlbnQgw6AgY29uZGl0aW9uIGRlIHLDqXVzc2lyIHVuIHRlc3QgZCdJbnRlbGxpZ2VuY2UgKEludmVzdGlnYXRpb24pIEREIDE2LiBMZSBtw6ptZSB0ZXN0IGVmZmVjdHXDqSBlbiBhbmFseXNhbnQgbGUgcGxhZm9uZCByw6l2w6hsZSBsZXMgaXJyw6lndWxhcml0w6lzIGRlIG1hw6dvbm5lcmllIHF1aSB0cmFoaXNzZW50IGxhIHByw6lzZW5jZSBkZSBsYSB0cmFwcGUuIE9uIHBldXQgZ2xpc3NlciB1bmUgcG9pbnRlIGRlIGZlciBvdSB1biBvYmpldCBzaW1pbGFpcmUgc291cyB1bmUgcGxhcXVlIGRlIHByZXNzaW9uIHBvdXIgZW1ww6pjaGVyIGxlIHBpw6hnZSBkZSBzJ2FjdGl2ZXIuIgogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiRMOocyBxdWUgbGUgcGnDqGdlIHMnYWN0aXZlLCB0b3V0ZXMgbGVzIGNyw6lhdHVyZXMgcHLDqXNlbnRlcyBkb2l2ZW50IGZhaXJlIHVuIHRlc3QgZCdpbml0aWF0aXZlLiBMYSBzcGjDqHJlIGVmZmVjdHVlIHNvbiB0ZXN0IGF2ZWMgdW4gYm9udXMgZGUgKzguIMOAIHNvbiB0b3VyLCBlbGxlIHNlIGTDqXBsYWNlIGRlIDE4IG3DqHRyZXMgZW4gbGlnbmUgZHJvaXRlLiBMYSBzcGjDqHJlIHBldXQgdHJhdmVyc2VyIGwnZW1wbGFjZW1lbnQgZCd1bmUgY3LDqWF0dXJlIGV0IHVuZSBjcsOpYXR1cmUgcGV1dCB0cmF2ZXJzZXIgbCdlbXBsYWNlbWVudCBkZSBsYSBzcGjDqHJlIHF1J2VsbGUgY29uc2lkw6hyZSBjb21tZSB1biB0ZXJyYWluIGRpZmZpY2lsZS4gUXVhbmQgbGEgc3Bow6hyZSBlbnRyZSBkYW5zIGwnZW1wbGFjZW1lbnQgZCd1bmUgY3LDqWF0dXJlIG91IHF1J3VuZSBjcsOpYXR1cmUgZW50cmUgZGFucyBsZSBzaWVuIGFsb3JzIHF1J2VsbGUgcm91bGUsIGxhIGNyw6lhdHVyZSBkb2l0IHLDqXVzc2lyIHVuICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHRvOiAiL3V0aWxpc2VyLWxlcy1jYXJhY3RlcmlzdGlxdWVzLyNqZXRzLWRlLXNhdXZlZ2FyZGUiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJqZXQgZGUgc2F1dmVnYXJkZSIpXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIiBkZSBEZXh0w6lyaXTDqSBERCAxNiwgc2FucyBxdW9pIGVsbGUgc3ViaXQgMTVkNiBkw6lnw6J0cyBjb250b25kYW50cyBldCBzZSByZXRyb3V2ZSAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgeyBhdHRyczogeyB0bzogIi9nZXJlci1sYS1zYW50ZS1kdS1wZXJzb25uYWdlLyNhLXRlcnJlIiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCLDoCB0ZXJyZSIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIuIikKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJMYSBzcGjDqHJlIHMnYXJyw6p0ZSBxdWFuZCBlbGxlIGhldXJ0ZSB1biBtdXIgb3UgdW4gb2JzdGFjbGUgc2ltaWxhaXJlLiBFbGxlIG5lIHBldXQgcGFzIGZyYW5jaGlyIHVuIGFuZ2xlLCBtYWlzIGxlcyBjb25zdHJ1Y3RldXJzIGRlIGRvbmpvbiByZXRvcnMgaW50w6hncmVudCBkZSBkb3VjZXMgY291cmJlcyBwb3VyIHJlbGllciBsZXMgZGl2ZXJzIHBhc3NhZ2VzLCBhZmluIHF1ZSBsYSBzcGjDqHJlIGNvbnRpbnVlIGRlIHJvdWxlci4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJQYXIgdW5lIGFjdGlvbiwgdW5lIGNyw6lhdHVyZSBxdWkgc2UgdHJvdXZlIMOgIDEsNTAgbcOodHJlIG91IG1vaW5zIGRlIGxhIHNwaMOocmUgcGV1dCB0ZW50ZXIgZGUgbGEgcmFsZW50aXIgYXZlYyB1biB0ZXN0IGRlIEZvcmNlIEREIDIyLiBTaSBlbGxlIHLDqXVzc2l0LCBsYSB2aXRlc3NlIGRlIGxhIHNwaMOocmUgc2UgcsOpZHVpdCBkZSA0LDUwIG3DqHRyZXMuIFNpIGVsbGUgdG9tYmUgw6AgMCwgbGEgc3Bow6hyZSBzJ2ltbW9iaWxpc2UgZXQgbmUgcmVwcsOpc2VudGUgcGx1cyB1bmUgbWVuYWNlLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoImgzIiwgeyBhdHRyczogeyBpZDogInN0YXR1ZS1jcmFjaGV1c2UtZGUtZmV1IiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlN0YXR1ZSBjcmFjaGV1c2UgZGUgZmV1ICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3N0YXR1ZS1jcmFjaGV1c2UtZGUtZmV1IiB9CiAgICAgICAgICB9LAogICAgICAgICAgW19jKCJpIiwgeyBzdGF0aWNDbGFzczogInYtaWNvbiBub3RyYW5zbGF0ZSBtZGkgbWRpLWxpbmstdmFyaWFudCIgfSldCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgW19jKCJlbSIsIFtfdm0uX3YoIlBpw6hnZSBtYWdpcXVlIildKV0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkNlIHBpw6hnZSBzJ2FjdGl2ZSBxdWFuZCB1biBpbnRydXMgbWFyY2hlIHN1ciB1bmUgcGxhcXVlIGRlIHByZXNzaW9uLiBJbCBsaWLDqHJlIGFsb3JzIHVuIGpldCBkZSBmbGFtbWVzIHF1aSBqYWlsbGl0IGQndW5lIHN0YXR1ZSB2b2lzaW5lLiBMYSBzdGF0dWUgcGV1dCByZXByw6lzZW50ZXIgbidpbXBvcnRlIHF1b2ksIHkgY29tcHJpcyB1biBkcmFnb24gb3UgdW4gbWFnaWNpZW4gZW4gcGxlaW5lIGluY2FudGF0aW9uLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoCiAgICAgICAgInAiLAogICAgICAgIFsKICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgIkxlIEREIGVzdCBkZSAxNiBwb3VyIHJlcMOpcmVyIGxhIHBsYXF1ZSBkZSBwcmVzc2lvbiBldCBkZSBsw6lnw6hyZXMgdHJhY2VzIGRlIGJyw7tsdXJlIHN1ciBsZXMgbXVycyBldCBsZSBzb2wuIFVuIHNvcnQgb3UgdW4gYXV0cmUgZWZmZXQgY2FwYWJsZSBkZSBwZXJjZXZvaXIgbGEgbWFnaWUsIGNvbW1lICIKICAgICAgICAgICksCiAgICAgICAgICBfYygKICAgICAgICAgICAgIlJvdXRlckxpbmsiLAogICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL2dyaW1vaXJlL2RldGVjdGlvbi1kZS1sYS1tYWdpZS8iIH0gfSwKICAgICAgICAgICAgW19jKCJlbSIsIFtfdm0uX3YoImTDqXRlY3Rpb24gZGUgbGEgbWFnaWUiKV0pXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fdigiLCByw6l2w6hsZSB1bmUgYXVyYSBtYWdpcXVlIGQnw6l2b2NhdGlvbiBhdXRvdXIgZGUgbGEgc3RhdHVlLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygKICAgICAgICAicCIsCiAgICAgICAgWwogICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAiTGUgcGnDqGdlIHMnYWN0aXZlIHF1YW5kIHVuIHBvaWRzIGRlIDEwIGtpbG9zIG91IHBsdXMgYXBwdWllIHN1ciBsYSBwbGFxdWUgZGUgcHJlc3Npb24uIExhIHN0YXR1ZSBjcmFjaGUgYWxvcnMgdW4gY8O0bmUgZGUgZmV1IGRlIDkgbcOodHJlcy4gQ2hhcXVlIGNyw6lhdHVyZSBzaXR1w6llIGRhbnMgbGUgY8O0bmUgZG9pdCBmYWlyZSB1biAiCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJSb3V0ZXJMaW5rIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICB0bzogIi91dGlsaXNlci1sZXMtY2FyYWN0ZXJpc3RpcXVlcy8jamV0cy1kZS1zYXV2ZWdhcmRlIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiamV0IGRlIHNhdXZlZ2FyZGUiKV0KICAgICAgICAgICksCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICIgZGUgRGV4dMOpcml0w6kgREQgMTYuIENlbGxlcyBxdWkgw6ljaG91ZW50IHN1Ymlzc2VudCA3ZDYgZMOpZ8OidHMgZGUgZmV1LCBsZXMgYXV0cmVzIGxhIG1vaXRpw6kgc2V1bGVtZW50LiIKICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKAogICAgICAgICJwIiwKICAgICAgICBbCiAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICJJbCBzdWZmaXQgZGUgZ2xpc3NlciB1bmUgcG9pbnRlIGRlIGZlciBvdSB1biBhdXRyZSBvYmpldCBzb3VzIGxhIHBsYXF1ZSBkZSBwcmVzc2lvbiBwb3VyIGVtcMOqY2hlciBsZSBwacOoZ2UgZGUgcydhY3RpdmVyLiBTaSBxdWVscXUndW4gbGFuY2UgIgogICAgICAgICAgKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiUm91dGVyTGluayIsCiAgICAgICAgICAgIHsgYXR0cnM6IHsgdG86ICIvZ3JpbW9pcmUvZGlzc2lwYXRpb24tZGUtbGEtbWFnaWUvIiB9IH0sCiAgICAgICAgICAgIFtfYygiZW0iLCBbX3ZtLl92KCJkaXNzaXBhdGlvbiBkZSBsYSBtYWdpZSIpXSldCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl92KCIgKEREIDE2KSBhdmVjIHN1Y2PDqHMgc3VyIGxhIHN0YXR1ZSwgaWwgZMOpdHJ1aXQgbGUgcGnDqGdlLiIpCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygiaDMiLCB7IGF0dHJzOiB7IGlkOiAiem9uZS1kZS1ncmF2aXRlLWludmVyc2VlIiB9IH0sIFsKICAgICAgICBfdm0uX3YoIlpvbmUgZGUgZ3Jhdml0w6kgaW52ZXJzw6llICIpLAogICAgICAgIF9jKAogICAgICAgICAgImEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogImhlYWRlci1hbmNob3IiLAogICAgICAgICAgICBhdHRyczogeyBocmVmOiAiI3pvbmUtZGUtZ3Jhdml0ZS1pbnZlcnNlZSIgfQogICAgICAgICAgfSwKICAgICAgICAgIFtfYygiaSIsIHsgc3RhdGljQ2xhc3M6ICJ2LWljb24gbm90cmFuc2xhdGUgbWRpIG1kaS1saW5rLXZhcmlhbnQiIH0pXQogICAgICAgICkKICAgICAgXSksCiAgICAgIF92bS5fdigiICIpLAogICAgICBfYygicCIsIFtfYygiZW0iLCBbX3ZtLl92KCJQacOoZ2UgbWFnaXF1ZSIpXSldKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJVbiBsb25nIGNvdWxvaXIgKG91IHVuZSB2YXN0ZSBzYWxsZSkgc2VydCBkZSBkw6ljb3Igw6AgY2UgcGnDqGdlLiBEZXMgc3F1ZWxldHRlcyBkZSBjcsOpYXR1cmVzIHBldXZlbnQgc2UgdHJvdXZlciBhdSBzb2wsIHBlcmZvcsOpZXMgZXQgw6ljcmFzw6llcy4gTGUgcGxhZm9uZCBlc3Qgc2l0dcOpIMOgIHVuZSBxdWluemFpbmUgZGUgbcOodHJlcyBkZSBoYXV0ZXVyLCBob3JzIGRlIHBvcnTDqWUgZHUgZmFpc2NlYXUgZGVzIGxhbnRlcm5lcy4gTGVzIGNyw6lhdHVyZXMgYXZlYyBsYSB2aXNpb24gZGFucyBsZSBub2lyIHBldXZlbnQsIGF2ZWMgdW4gdGVzdCBkZSBTYWdlc3NlIChQZXJjZXB0aW9uKSBERCAxMiwgZGlzdGluZ3VlciBkZXMgcG9pbnRlcyBtw6l0YWxsaXF1ZXMgY291dnJhbnQgbGUgcGxhZm9uZCDDoCBsYSBsaW1pdGUgZGUgbGV1ciBjaGFtcCBkZSB2aXNpb24uIEhvcm1pcyBsZXMgw6l2ZW50dWVscyBjYWRhdnJlcywgcmllbiBuJ2VzdCBwZXJjZXB0aWJsZSBhdSBzb2wgZGVwdWlzIGwnZW50csOpZS4iCiAgICAgICAgKQogICAgICBdKSwKICAgICAgX3ZtLl92KCIgIiksCiAgICAgIF9jKCJwIiwgWwogICAgICAgIF92bS5fdigKICAgICAgICAgICJRdWFuZCB1biBwb2lkcyBkZSAyMCBraWxvcyBvdSBwbHVzIGFwcHVpZSBzdXIgdW5lIGRlcyBwbGFxdWVzIGRlIHByZXNzaW9uIHLDqXBhcnRpZXMgZGFucyBsZSBjb3Vsb2lyLCB1biBzb3J0IGQnaW52ZXJzaW9uIGRlIGxhIGdyYXZpdMOpIHNlIGTDqWNsZW5jaGUgZXQgYWZmZWN0ZSB0b3V0IGxlIGNvdWxvaXIuIFVuIHBlcnNvbm5hZ2UgcGV1dCByZXDDqXJlciBjaGFxdWUgcGxhcXVlIGRlIHByZXNzaW9uIMOgIGwnYWlkZSBkJ3VuIHRlc3QgZGUgU2FnZXNzZSAoUGVyY2VwdGlvbikgREQgMTYuIFVuIHBlcnNvbm5hZ2UgcGV1dCBhdXNzaSByZW1hcnF1ZXIgbGEgcGxhcXVlIGRlIHByZXNzaW9uIGVuIGFuYWx5c2FudCBsZXMgZGlmZsOpcmVuY2VzIGVudHJlIGxlIG1vcnRpZXIgZXQgbGEgcGllcnJlIHF1aSBsYSBjb21wb3NlbnQgw6AgY29uZGl0aW9uIGRlIHLDqXVzc2lyIHVuIHRlc3QgZCdJbnRlbGxpZ2VuY2UgKEludmVzdGlnYXRpb24pIEREIDE2LiBPbiBwZXV0IGdsaXNzZXIgdW5lIHBvaW50ZSBkZSBmZXIgb3UgdW4gb2JqZXQgc2ltaWxhaXJlIHNvdXMgdW5lIHBsYXF1ZSBkZSBwcmVzc2lvbiBwb3VyIGVtcMOqY2hlciBsZSBwacOoZ2UgZGUgcydhY3RpdmVyLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkxlcyBwZXJzb25uYWdlcyBwcmlzIGRhbnMgbGEgem9uZSBkZSBncmF2aXTDqSBpbnZlcnPDqWUgZXQgc2l0dcOpcyDDoCBtb2lucyBkZSAzIG3DqHRyZXMgZGUgbCdlbnRyw6llIHBldXZlbnQgZmFpcmUgdW4gdGVzdCBkZSBEZXh0w6lyaXTDqSBERCAxNiBwb3VyIHNlIHJhY2Nyb2NoZXIgYXUgY2hhbWJyYW5sZS4gTGVzIGF1dHJlcyBwZXJzb25uYWdlcyDCqyB0b21iZW50IMK7IHZlcnMgbGUgcGxhZm9uZCBldCBzdWJpc3NlbnQgNWQ2IGTDqWfDonRzIGNvbnRvbmRhbnRzIGRlIGNodXRlICsgM2Q2IGTDqWfDonRzIHBlcmZvcmFudHMgZGVzIHBpcXVlcy4gw4AgbGEgZmluIGRlIGxhIGR1csOpZSBkdSBzb3J0ICgxIG1pbnV0ZSksIGxhIGdyYXZpdMOpIHJlZGV2aWVudCBub3JtYWxlIGV0IGRlcyBub3V2ZWF1eCBkw6lnw6J0cyBkZSBjaHV0ZSBwZXV2ZW50IMOqdHJlIHN1YmlzLiIKICAgICAgICApCiAgICAgIF0pLAogICAgICBfdm0uX3YoIiAiKSwKICAgICAgX2MoInAiLCBbCiAgICAgICAgX3ZtLl92KAogICAgICAgICAgIkRlcyB2YXJpYW50ZXMgZXhpc3RlbnQsIGF1IG5pdmVhdSBkdSBsaWV1IGV0IGRlIGxhIGZpbmFsaXTDqS4gTGUgZMOpY2xlbmNoZXVyIHBldXQgw6p0cmUgbCdvdXZlcnR1cmUgZCd1biBjb2ZmcmUgb3UgZGUgbGEgcG9ydGUgZGUgc29ydGllIGR1IGNvdWxvaXIuIExlIEREIGRlIGTDqXRlY3Rpb24gZXN0IGxlIG3Dqm1lIGV0IHVuIHRlc3QgZGUgRGV4dMOpcml0w6kgREQgMTYgZWZmZWN0dcOpIGF2ZWMgZGVzIG91dGlscyBkZSB2b2xldXIgZMOpc2FybWUgbGUgcGnDqGdlLiBMZXMgcGlxdWVzIGF1IHBsYWZvbmQgcGV1dmVudCDDqnRyZSByZW1wbGFjw6llcyBwYXIgdW5lIGNhZ2Ugb3UgZGUgbGEgY29sbGUgcXVpIHBpw6hnZSBsZXMgcGVyc29ubmFnZXMgZW4gYXR0ZW5kYW50IHF1J3VuIGdhcmRlIHZpZW5uZSBsZXMgcsOpY3Vww6lyZXIuIgogICAgICAgICkKICAgICAgXSkKICAgIF0KICApCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}